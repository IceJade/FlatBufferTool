// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Chanto.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRquest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRquest GetRootAsDRquest(ByteBuffer _bb) { return GetRootAsDRquest(_bb, new DRquest()); }
  public static DRquest GetRootAsDRquest(ByteBuffer _bb, DRquest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRquest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Plot(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PlotLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPlotBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetPlotBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetPlotArray() { return __p.__vector_as_array<int>(6); }
  public int Series { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(10); }
  public string Description { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(14); }
  public int Gotype { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Go(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GoLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGoBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetGoBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetGoArray() { return __p.__vector_as_array<int>(18); }
  public int Gotype2 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Go2 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Gobuild2 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InteractiveButton { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TipsType { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Remind(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RemindLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRemindBytes() { return __p.__vector_as_span<float>(30, 4); }
#else
  public ArraySegment<byte>? GetRemindBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public float[] GetRemindArray() { return __p.__vector_as_array<float>(30); }
  public int ListId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type2 { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Para1 { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara1Bytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetPara1Bytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetPara1Array() { return __p.__vector_as_array<byte>(36); }
  public string Para2 { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara2Bytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetPara2Bytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetPara2Array() { return __p.__vector_as_array<byte>(38); }
  public int IsChapter { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Pic { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPicBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetPicBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetPicArray() { return __p.__vector_as_array<byte>(42); }
  public string PreId { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPreIdBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetPreIdBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetPreIdArray() { return __p.__vector_as_array<byte>(44); }
  public int Auto { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Progress { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Gobuild { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardStory { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GuideFreedom { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClickStory { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TipsMovie { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TipsSoilId { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FinishStory { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Para3 { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara3Bytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetPara3Bytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetPara3Array() { return __p.__vector_as_array<byte>(64); }
  public int RemindAuto { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Accept2 { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsAchievement { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FinishId { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MainQuest { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Par3 { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Processing { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DailySeries { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DebugDot { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MainTime { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainTimeBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetMainTimeBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetMainTimeArray() { return __p.__vector_as_array<byte>(86); }
  public string MainTime2 { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainTime2Bytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetMainTime2Bytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetMainTime2Array() { return __p.__vector_as_array<byte>(88); }
  public int BookClose { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventDailyunlockChest { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LF.Table.DRquest> CreateDRquest(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset PlotOffset = default(VectorOffset),
      int series = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      int gotype = 0,
      VectorOffset goOffset = default(VectorOffset),
      int gotype2 = 0,
      int go2 = 0,
      int gobuild2 = 0,
      int interactiveButton = 0,
      int Tips_Type = 0,
      VectorOffset remindOffset = default(VectorOffset),
      int List_Id = 0,
      int type2 = 0,
      StringOffset para1Offset = default(StringOffset),
      StringOffset para2Offset = default(StringOffset),
      int is_chapter = 0,
      StringOffset picOffset = default(StringOffset),
      StringOffset pre_idOffset = default(StringOffset),
      int auto = 0,
      int progress = 0,
      int gobuild = 0,
      int reward_story = 0,
      int guide_freedom = 0,
      int click_story = 0,
      int Tips_Movie = 0,
      int Tips_Soil_Id = 0,
      int finish_story = 0,
      StringOffset para3Offset = default(StringOffset),
      int remind_auto = 0,
      int accept2 = 0,
      int is_achievement = 0,
      int Finish_Id = 0,
      int priority = 0,
      int main_quest = 0,
      int par3 = 0,
      int processing = 0,
      int daily_series = 0,
      int DebugDot = 0,
      StringOffset Main_timeOffset = default(StringOffset),
      StringOffset Main_time2Offset = default(StringOffset),
      int book_close = 0,
      int event_dailyunlock_chest = 0) {
    builder.StartTable(45);
    DRquest.AddEventDailyunlockChest(builder, event_dailyunlock_chest);
    DRquest.AddBookClose(builder, book_close);
    DRquest.AddMainTime2(builder, Main_time2Offset);
    DRquest.AddMainTime(builder, Main_timeOffset);
    DRquest.AddDebugDot(builder, DebugDot);
    DRquest.AddDailySeries(builder, daily_series);
    DRquest.AddProcessing(builder, processing);
    DRquest.AddPar3(builder, par3);
    DRquest.AddMainQuest(builder, main_quest);
    DRquest.AddPriority(builder, priority);
    DRquest.AddFinishId(builder, Finish_Id);
    DRquest.AddIsAchievement(builder, is_achievement);
    DRquest.AddAccept2(builder, accept2);
    DRquest.AddRemindAuto(builder, remind_auto);
    DRquest.AddPara3(builder, para3Offset);
    DRquest.AddFinishStory(builder, finish_story);
    DRquest.AddTipsSoilId(builder, Tips_Soil_Id);
    DRquest.AddTipsMovie(builder, Tips_Movie);
    DRquest.AddClickStory(builder, click_story);
    DRquest.AddGuideFreedom(builder, guide_freedom);
    DRquest.AddRewardStory(builder, reward_story);
    DRquest.AddGobuild(builder, gobuild);
    DRquest.AddProgress(builder, progress);
    DRquest.AddAuto(builder, auto);
    DRquest.AddPreId(builder, pre_idOffset);
    DRquest.AddPic(builder, picOffset);
    DRquest.AddIsChapter(builder, is_chapter);
    DRquest.AddPara2(builder, para2Offset);
    DRquest.AddPara1(builder, para1Offset);
    DRquest.AddType2(builder, type2);
    DRquest.AddListId(builder, List_Id);
    DRquest.AddRemind(builder, remindOffset);
    DRquest.AddTipsType(builder, Tips_Type);
    DRquest.AddInteractiveButton(builder, interactiveButton);
    DRquest.AddGobuild2(builder, gobuild2);
    DRquest.AddGo2(builder, go2);
    DRquest.AddGotype2(builder, gotype2);
    DRquest.AddGo(builder, goOffset);
    DRquest.AddGotype(builder, gotype);
    DRquest.AddName(builder, nameOffset);
    DRquest.AddDescription(builder, descriptionOffset);
    DRquest.AddTitle(builder, titleOffset);
    DRquest.AddSeries(builder, series);
    DRquest.AddPlot(builder, PlotOffset);
    DRquest.AddId(builder, id);
    return DRquest.EndDRquest(builder);
  }

  public static void StartDRquest(FlatBufferBuilder builder) { builder.StartTable(45); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPlot(FlatBufferBuilder builder, VectorOffset PlotOffset) { builder.AddOffset(1, PlotOffset.Value, 0); }
  public static VectorOffset CreatePlotVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePlotVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlotVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSeries(FlatBufferBuilder builder, int series) { builder.AddInt(2, series, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(3, titleOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(4, descriptionOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(5, nameOffset.Value, 0); }
  public static void AddGotype(FlatBufferBuilder builder, int gotype) { builder.AddInt(6, gotype, 0); }
  public static void AddGo(FlatBufferBuilder builder, VectorOffset goOffset) { builder.AddOffset(7, goOffset.Value, 0); }
  public static VectorOffset CreateGoVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGoVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGotype2(FlatBufferBuilder builder, int gotype2) { builder.AddInt(8, gotype2, 0); }
  public static void AddGo2(FlatBufferBuilder builder, int go2) { builder.AddInt(9, go2, 0); }
  public static void AddGobuild2(FlatBufferBuilder builder, int gobuild2) { builder.AddInt(10, gobuild2, 0); }
  public static void AddInteractiveButton(FlatBufferBuilder builder, int interactiveButton) { builder.AddInt(11, interactiveButton, 0); }
  public static void AddTipsType(FlatBufferBuilder builder, int TipsType) { builder.AddInt(12, TipsType, 0); }
  public static void AddRemind(FlatBufferBuilder builder, VectorOffset remindOffset) { builder.AddOffset(13, remindOffset.Value, 0); }
  public static VectorOffset CreateRemindVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRemindVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRemindVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddListId(FlatBufferBuilder builder, int ListId) { builder.AddInt(14, ListId, 0); }
  public static void AddType2(FlatBufferBuilder builder, int type2) { builder.AddInt(15, type2, 0); }
  public static void AddPara1(FlatBufferBuilder builder, StringOffset para1Offset) { builder.AddOffset(16, para1Offset.Value, 0); }
  public static void AddPara2(FlatBufferBuilder builder, StringOffset para2Offset) { builder.AddOffset(17, para2Offset.Value, 0); }
  public static void AddIsChapter(FlatBufferBuilder builder, int isChapter) { builder.AddInt(18, isChapter, 0); }
  public static void AddPic(FlatBufferBuilder builder, StringOffset picOffset) { builder.AddOffset(19, picOffset.Value, 0); }
  public static void AddPreId(FlatBufferBuilder builder, StringOffset preIdOffset) { builder.AddOffset(20, preIdOffset.Value, 0); }
  public static void AddAuto(FlatBufferBuilder builder, int auto) { builder.AddInt(21, auto, 0); }
  public static void AddProgress(FlatBufferBuilder builder, int progress) { builder.AddInt(22, progress, 0); }
  public static void AddGobuild(FlatBufferBuilder builder, int gobuild) { builder.AddInt(23, gobuild, 0); }
  public static void AddRewardStory(FlatBufferBuilder builder, int rewardStory) { builder.AddInt(24, rewardStory, 0); }
  public static void AddGuideFreedom(FlatBufferBuilder builder, int guideFreedom) { builder.AddInt(25, guideFreedom, 0); }
  public static void AddClickStory(FlatBufferBuilder builder, int clickStory) { builder.AddInt(26, clickStory, 0); }
  public static void AddTipsMovie(FlatBufferBuilder builder, int TipsMovie) { builder.AddInt(27, TipsMovie, 0); }
  public static void AddTipsSoilId(FlatBufferBuilder builder, int TipsSoilId) { builder.AddInt(28, TipsSoilId, 0); }
  public static void AddFinishStory(FlatBufferBuilder builder, int finishStory) { builder.AddInt(29, finishStory, 0); }
  public static void AddPara3(FlatBufferBuilder builder, StringOffset para3Offset) { builder.AddOffset(30, para3Offset.Value, 0); }
  public static void AddRemindAuto(FlatBufferBuilder builder, int remindAuto) { builder.AddInt(31, remindAuto, 0); }
  public static void AddAccept2(FlatBufferBuilder builder, int accept2) { builder.AddInt(32, accept2, 0); }
  public static void AddIsAchievement(FlatBufferBuilder builder, int isAchievement) { builder.AddInt(33, isAchievement, 0); }
  public static void AddFinishId(FlatBufferBuilder builder, int FinishId) { builder.AddInt(34, FinishId, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(35, priority, 0); }
  public static void AddMainQuest(FlatBufferBuilder builder, int mainQuest) { builder.AddInt(36, mainQuest, 0); }
  public static void AddPar3(FlatBufferBuilder builder, int par3) { builder.AddInt(37, par3, 0); }
  public static void AddProcessing(FlatBufferBuilder builder, int processing) { builder.AddInt(38, processing, 0); }
  public static void AddDailySeries(FlatBufferBuilder builder, int dailySeries) { builder.AddInt(39, dailySeries, 0); }
  public static void AddDebugDot(FlatBufferBuilder builder, int DebugDot) { builder.AddInt(40, DebugDot, 0); }
  public static void AddMainTime(FlatBufferBuilder builder, StringOffset MainTimeOffset) { builder.AddOffset(41, MainTimeOffset.Value, 0); }
  public static void AddMainTime2(FlatBufferBuilder builder, StringOffset MainTime2Offset) { builder.AddOffset(42, MainTime2Offset.Value, 0); }
  public static void AddBookClose(FlatBufferBuilder builder, int bookClose) { builder.AddInt(43, bookClose, 0); }
  public static void AddEventDailyunlockChest(FlatBufferBuilder builder, int eventDailyunlockChest) { builder.AddInt(44, eventDailyunlockChest, 0); }
  public static Offset<LF.Table.DRquest> EndDRquest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRquest>(o);
  }
};

public struct Table_quest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_quest GetRootAsTable_quest(ByteBuffer _bb) { return GetRootAsTable_quest(_bb, new Table_quest()); }
  public static Table_quest GetRootAsTable_quest(ByteBuffer _bb, Table_quest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_quest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRquest? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRquest?)(new LF.Table.DRquest()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_quest> CreateTable_quest(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_quest.AddData(builder, dataOffset);
    return Table_quest.EndTable_quest(builder);
  }

  public static void StartTable_quest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRquest>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRquest>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_quest> EndTable_quest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_quest>(o);
  }
  public static void FinishTable_questBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_quest> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_questBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_quest> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
