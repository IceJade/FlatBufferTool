// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Chanto.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRduoyuyan : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRduoyuyan GetRootAsDRduoyuyan(ByteBuffer _bb) { return GetRootAsDRduoyuyan(_bb, new DRduoyuyan()); }
  public static DRduoyuyan GetRootAsDRduoyuyan(ByteBuffer _bb, DRduoyuyan obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRduoyuyan __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Language { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLanguageBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLanguageBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLanguageArray() { return __p.__vector_as_array<byte>(6); }
  public int LockAlies { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LF.Table.DRduoyuyan> CreateDRduoyuyan(FlatBufferBuilder builder,
      int id = 0,
      StringOffset languageOffset = default(StringOffset),
      int lock_alies = 0) {
    builder.StartTable(3);
    DRduoyuyan.AddLockAlies(builder, lock_alies);
    DRduoyuyan.AddLanguage(builder, languageOffset);
    DRduoyuyan.AddId(builder, id);
    return DRduoyuyan.EndDRduoyuyan(builder);
  }

  public static void StartDRduoyuyan(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLanguage(FlatBufferBuilder builder, StringOffset languageOffset) { builder.AddOffset(1, languageOffset.Value, 0); }
  public static void AddLockAlies(FlatBufferBuilder builder, int lockAlies) { builder.AddInt(2, lockAlies, 0); }
  public static Offset<LF.Table.DRduoyuyan> EndDRduoyuyan(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRduoyuyan>(o);
  }
};

public struct Table_duoyuyan : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_duoyuyan GetRootAsTable_duoyuyan(ByteBuffer _bb) { return GetRootAsTable_duoyuyan(_bb, new Table_duoyuyan()); }
  public static Table_duoyuyan GetRootAsTable_duoyuyan(ByteBuffer _bb, Table_duoyuyan obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_duoyuyan __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRduoyuyan? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRduoyuyan?)(new LF.Table.DRduoyuyan()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_duoyuyan> CreateTable_duoyuyan(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_duoyuyan.AddData(builder, dataOffset);
    return Table_duoyuyan.EndTable_duoyuyan(builder);
  }

  public static void StartTable_duoyuyan(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRduoyuyan>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRduoyuyan>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_duoyuyan> EndTable_duoyuyan(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_duoyuyan>(o);
  }
  public static void FinishTable_duoyuyanBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_duoyuyan> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_duoyuyanBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_duoyuyan> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
