// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRvip : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRvip GetRootAsDRvip(ByteBuffer _bb) { return GetRootAsDRvip(_bb, new DRvip()); }
  public static DRvip GetRootAsDRvip(ByteBuffer _bb, DRvip obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRvip __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Point { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }
  public string Reward1(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int Reward1Length { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Reward2 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Display(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DisplayLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDisplayBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetDisplayBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetDisplayArray() { return __p.__vector_as_array<int>(14); }
  public string Effect(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EffectLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.DRvip> CreateDRvip(FlatBufferBuilder builder,
      int id = 0,
      int point = 0,
      StringOffset iconOffset = default(StringOffset),
      VectorOffset reward1Offset = default(VectorOffset),
      int reward2 = 0,
      VectorOffset displayOffset = default(VectorOffset),
      VectorOffset effectOffset = default(VectorOffset)) {
    builder.StartTable(7);
    DRvip.AddEffect(builder, effectOffset);
    DRvip.AddDisplay(builder, displayOffset);
    DRvip.AddReward2(builder, reward2);
    DRvip.AddReward1(builder, reward1Offset);
    DRvip.AddIcon(builder, iconOffset);
    DRvip.AddPoint(builder, point);
    DRvip.AddId(builder, id);
    return DRvip.EndDRvip(builder);
  }

  public static void StartDRvip(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPoint(FlatBufferBuilder builder, int point) { builder.AddInt(1, point, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(2, iconOffset.Value, 0); }
  public static void AddReward1(FlatBufferBuilder builder, VectorOffset reward1Offset) { builder.AddOffset(3, reward1Offset.Value, 0); }
  public static VectorOffset CreateReward1Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReward1VectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward2(FlatBufferBuilder builder, int reward2) { builder.AddInt(4, reward2, 0); }
  public static void AddDisplay(FlatBufferBuilder builder, VectorOffset displayOffset) { builder.AddOffset(5, displayOffset.Value, 0); }
  public static VectorOffset CreateDisplayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDisplayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDisplayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffect(FlatBufferBuilder builder, VectorOffset effectOffset) { builder.AddOffset(6, effectOffset.Value, 0); }
  public static VectorOffset CreateEffectVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEffectVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEffectVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.DRvip> EndDRvip(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRvip>(o);
  }
};

public struct Table_vip : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_vip GetRootAsTable_vip(ByteBuffer _bb) { return GetRootAsTable_vip(_bb, new Table_vip()); }
  public static Table_vip GetRootAsTable_vip(ByteBuffer _bb, Table_vip obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_vip __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRvip? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRvip?)(new LF.Table.DRvip()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_vip> CreateTable_vip(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_vip.AddData(builder, dataOffset);
    return Table_vip.EndTable_vip(builder);
  }

  public static void StartTable_vip(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRvip>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRvip>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_vip> EndTable_vip(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_vip>(o);
  }
  public static void FinishTable_vipBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_vip> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_vipBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_vip> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
