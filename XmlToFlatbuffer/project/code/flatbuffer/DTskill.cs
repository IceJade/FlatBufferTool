// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRskill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRskill GetRootAsDRskill(ByteBuffer _bb) { return GetRootAsDRskill(_bb, new DRskill()); }
  public static DRskill GetRootAsDRskill(ByteBuffer _bb, DRskill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRskill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypeArea { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ObjectNum { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Effect(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EffectLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string EffectNum(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EffectNumLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Type { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypePara { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowType { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(22); }
  public int Des { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(26); }
  public int ObjectAlies { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Times { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Condition { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectType { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CdTime(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CdTimeLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCdTimeBytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetCdTimeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetCdTimeArray() { return __p.__vector_as_array<int>(36); }
  public int ShortDes { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivateType { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HideEffect(int j) { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HideEffectLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetHideEffectBytes() { return __p.__vector_as_span<int>(42, 4); }
#else
  public ArraySegment<byte>? GetHideEffectBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public int[] GetHideEffectArray() { return __p.__vector_as_array<int>(42); }

  public static Offset<LF.Table.DRskill> CreateDRskill(FlatBufferBuilder builder,
      int id = 0,
      int level = 0,
      int type_area = 0,
      int object_num = 0,
      VectorOffset effectOffset = default(VectorOffset),
      VectorOffset effect_numOffset = default(VectorOffset),
      int type = 0,
      int type_para = 0,
      int show_type = 0,
      StringOffset nameOffset = default(StringOffset),
      int des = 0,
      StringOffset iconOffset = default(StringOffset),
      int object_alies = 0,
      int times = 0,
      int condition = 0,
      int effect_type = 0,
      VectorOffset cd_timeOffset = default(VectorOffset),
      int ShortDes = 0,
      int activate_type = 0,
      VectorOffset hide_effectOffset = default(VectorOffset)) {
    builder.StartTable(20);
    DRskill.AddHideEffect(builder, hide_effectOffset);
    DRskill.AddActivateType(builder, activate_type);
    DRskill.AddShortDes(builder, ShortDes);
    DRskill.AddCdTime(builder, cd_timeOffset);
    DRskill.AddEffectType(builder, effect_type);
    DRskill.AddCondition(builder, condition);
    DRskill.AddTimes(builder, times);
    DRskill.AddObjectAlies(builder, object_alies);
    DRskill.AddIcon(builder, iconOffset);
    DRskill.AddDes(builder, des);
    DRskill.AddName(builder, nameOffset);
    DRskill.AddShowType(builder, show_type);
    DRskill.AddTypePara(builder, type_para);
    DRskill.AddType(builder, type);
    DRskill.AddEffectNum(builder, effect_numOffset);
    DRskill.AddEffect(builder, effectOffset);
    DRskill.AddObjectNum(builder, object_num);
    DRskill.AddTypeArea(builder, type_area);
    DRskill.AddLevel(builder, level);
    DRskill.AddId(builder, id);
    return DRskill.EndDRskill(builder);
  }

  public static void StartDRskill(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(1, level, 0); }
  public static void AddTypeArea(FlatBufferBuilder builder, int typeArea) { builder.AddInt(2, typeArea, 0); }
  public static void AddObjectNum(FlatBufferBuilder builder, int objectNum) { builder.AddInt(3, objectNum, 0); }
  public static void AddEffect(FlatBufferBuilder builder, VectorOffset effectOffset) { builder.AddOffset(4, effectOffset.Value, 0); }
  public static VectorOffset CreateEffectVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEffectVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEffectVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffectNum(FlatBufferBuilder builder, VectorOffset effectNumOffset) { builder.AddOffset(5, effectNumOffset.Value, 0); }
  public static VectorOffset CreateEffectNumVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEffectNumVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEffectNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(6, type, 0); }
  public static void AddTypePara(FlatBufferBuilder builder, int typePara) { builder.AddInt(7, typePara, 0); }
  public static void AddShowType(FlatBufferBuilder builder, int showType) { builder.AddInt(8, showType, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(9, nameOffset.Value, 0); }
  public static void AddDes(FlatBufferBuilder builder, int des) { builder.AddInt(10, des, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(11, iconOffset.Value, 0); }
  public static void AddObjectAlies(FlatBufferBuilder builder, int objectAlies) { builder.AddInt(12, objectAlies, 0); }
  public static void AddTimes(FlatBufferBuilder builder, int times) { builder.AddInt(13, times, 0); }
  public static void AddCondition(FlatBufferBuilder builder, int condition) { builder.AddInt(14, condition, 0); }
  public static void AddEffectType(FlatBufferBuilder builder, int effectType) { builder.AddInt(15, effectType, 0); }
  public static void AddCdTime(FlatBufferBuilder builder, VectorOffset cdTimeOffset) { builder.AddOffset(16, cdTimeOffset.Value, 0); }
  public static VectorOffset CreateCdTimeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCdTimeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCdTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShortDes(FlatBufferBuilder builder, int ShortDes) { builder.AddInt(17, ShortDes, 0); }
  public static void AddActivateType(FlatBufferBuilder builder, int activateType) { builder.AddInt(18, activateType, 0); }
  public static void AddHideEffect(FlatBufferBuilder builder, VectorOffset hideEffectOffset) { builder.AddOffset(19, hideEffectOffset.Value, 0); }
  public static VectorOffset CreateHideEffectVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHideEffectVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartHideEffectVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.DRskill> EndDRskill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRskill>(o);
  }
};

public struct Table_skill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_skill GetRootAsTable_skill(ByteBuffer _bb) { return GetRootAsTable_skill(_bb, new Table_skill()); }
  public static Table_skill GetRootAsTable_skill(ByteBuffer _bb, Table_skill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_skill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRskill? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRskill?)(new LF.Table.DRskill()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_skill> CreateTable_skill(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_skill.AddData(builder, dataOffset);
    return Table_skill.EndTable_skill(builder);
  }

  public static void StartTable_skill(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRskill>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRskill>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_skill> EndTable_skill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_skill>(o);
  }
  public static void FinishTable_skillBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_skill> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_skillBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_skill> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
