// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRheroes_quality : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRheroes_quality GetRootAsDRheroes_quality(ByteBuffer _bb) { return GetRootAsDRheroes_quality(_bb, new DRheroes_quality()); }
  public static DRheroes_quality GetRootAsDRheroes_quality(ByteBuffer _bb, DRheroes_quality obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRheroes_quality __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Pic { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPicBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPicBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPicArray() { return __p.__vector_as_array<byte>(6); }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LvAdd(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LvAddLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLvAddBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetLvAddBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetLvAddArray() { return __p.__vector_as_array<int>(10); }
  public int Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Consume(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ConsumeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetConsumeBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetConsumeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetConsumeArray() { return __p.__vector_as_array<int>(14); }
  public int RobotConsume(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RobotConsumeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRobotConsumeBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetRobotConsumeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetRobotConsumeArray() { return __p.__vector_as_array<int>(16); }
  public string Name { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(18); }
  public string Color { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetColorBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetColorBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetColorArray() { return __p.__vector_as_array<byte>(20); }
  public string Pic2 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPic2Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPic2Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPic2Array() { return __p.__vector_as_array<byte>(22); }
  public string Pic3 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPic3Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetPic3Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetPic3Array() { return __p.__vector_as_array<byte>(24); }
  public string PicColor { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPicColorBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPicColorBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPicColorArray() { return __p.__vector_as_array<byte>(26); }
  public string Pic4 { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPic4Bytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetPic4Bytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetPic4Array() { return __p.__vector_as_array<byte>(28); }
  public int LevelGrowth { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Star { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LimitType { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LF.Table.DRheroes_quality> CreateDRheroes_quality(FlatBufferBuilder builder,
      int id = 0,
      StringOffset picOffset = default(StringOffset),
      int level = 0,
      VectorOffset lv_addOffset = default(VectorOffset),
      int type = 0,
      VectorOffset consumeOffset = default(VectorOffset),
      VectorOffset robot_consumeOffset = default(VectorOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset colorOffset = default(StringOffset),
      StringOffset pic2Offset = default(StringOffset),
      StringOffset pic3Offset = default(StringOffset),
      StringOffset pic_colorOffset = default(StringOffset),
      StringOffset pic4Offset = default(StringOffset),
      int level_growth = 0,
      int star = 0,
      int limit_type = 0) {
    builder.StartTable(16);
    DRheroes_quality.AddLimitType(builder, limit_type);
    DRheroes_quality.AddStar(builder, star);
    DRheroes_quality.AddLevelGrowth(builder, level_growth);
    DRheroes_quality.AddPic4(builder, pic4Offset);
    DRheroes_quality.AddPicColor(builder, pic_colorOffset);
    DRheroes_quality.AddPic3(builder, pic3Offset);
    DRheroes_quality.AddPic2(builder, pic2Offset);
    DRheroes_quality.AddColor(builder, colorOffset);
    DRheroes_quality.AddName(builder, nameOffset);
    DRheroes_quality.AddRobotConsume(builder, robot_consumeOffset);
    DRheroes_quality.AddConsume(builder, consumeOffset);
    DRheroes_quality.AddType(builder, type);
    DRheroes_quality.AddLvAdd(builder, lv_addOffset);
    DRheroes_quality.AddLevel(builder, level);
    DRheroes_quality.AddPic(builder, picOffset);
    DRheroes_quality.AddId(builder, id);
    return DRheroes_quality.EndDRheroes_quality(builder);
  }

  public static void StartDRheroes_quality(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPic(FlatBufferBuilder builder, StringOffset picOffset) { builder.AddOffset(1, picOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(2, level, 0); }
  public static void AddLvAdd(FlatBufferBuilder builder, VectorOffset lvAddOffset) { builder.AddOffset(3, lvAddOffset.Value, 0); }
  public static VectorOffset CreateLvAddVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLvAddVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLvAddVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(4, type, 0); }
  public static void AddConsume(FlatBufferBuilder builder, VectorOffset consumeOffset) { builder.AddOffset(5, consumeOffset.Value, 0); }
  public static VectorOffset CreateConsumeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConsumeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRobotConsume(FlatBufferBuilder builder, VectorOffset robotConsumeOffset) { builder.AddOffset(6, robotConsumeOffset.Value, 0); }
  public static VectorOffset CreateRobotConsumeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRobotConsumeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRobotConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(7, nameOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, StringOffset colorOffset) { builder.AddOffset(8, colorOffset.Value, 0); }
  public static void AddPic2(FlatBufferBuilder builder, StringOffset pic2Offset) { builder.AddOffset(9, pic2Offset.Value, 0); }
  public static void AddPic3(FlatBufferBuilder builder, StringOffset pic3Offset) { builder.AddOffset(10, pic3Offset.Value, 0); }
  public static void AddPicColor(FlatBufferBuilder builder, StringOffset picColorOffset) { builder.AddOffset(11, picColorOffset.Value, 0); }
  public static void AddPic4(FlatBufferBuilder builder, StringOffset pic4Offset) { builder.AddOffset(12, pic4Offset.Value, 0); }
  public static void AddLevelGrowth(FlatBufferBuilder builder, int levelGrowth) { builder.AddInt(13, levelGrowth, 0); }
  public static void AddStar(FlatBufferBuilder builder, int star) { builder.AddInt(14, star, 0); }
  public static void AddLimitType(FlatBufferBuilder builder, int limitType) { builder.AddInt(15, limitType, 0); }
  public static Offset<LF.Table.DRheroes_quality> EndDRheroes_quality(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRheroes_quality>(o);
  }
};

public struct Table_heroes_quality : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_heroes_quality GetRootAsTable_heroes_quality(ByteBuffer _bb) { return GetRootAsTable_heroes_quality(_bb, new Table_heroes_quality()); }
  public static Table_heroes_quality GetRootAsTable_heroes_quality(ByteBuffer _bb, Table_heroes_quality obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_heroes_quality __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRheroes_quality? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRheroes_quality?)(new LF.Table.DRheroes_quality()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_heroes_quality> CreateTable_heroes_quality(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_heroes_quality.AddData(builder, dataOffset);
    return Table_heroes_quality.EndTable_heroes_quality(builder);
  }

  public static void StartTable_heroes_quality(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRheroes_quality>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRheroes_quality>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_heroes_quality> EndTable_heroes_quality(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_heroes_quality>(o);
  }
  public static void FinishTable_heroes_qualityBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_heroes_quality> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_heroes_qualityBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_heroes_quality> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
