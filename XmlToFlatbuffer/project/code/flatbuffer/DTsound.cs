// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Chanto.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRsound : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRsound GetRootAsDRsound(ByteBuffer _bb) { return GetRootAsDRsound(_bb, new DRsound()); }
  public static DRsound GetRootAsDRsound(ByteBuffer _bb, DRsound obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRsound __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public int Loop { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxDistance { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Volume { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<LF.Table.DRsound> CreateDRsound(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      int loop = 0,
      int maxDistance = 0,
      int priority = 0,
      float volume = 0.0f) {
    builder.StartTable(5);
    DRsound.AddVolume(builder, volume);
    DRsound.AddPriority(builder, priority);
    DRsound.AddMaxDistance(builder, maxDistance);
    DRsound.AddLoop(builder, loop);
    DRsound.AddId(builder, idOffset);
    return DRsound.EndDRsound(builder);
  }

  public static void StartDRsound(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddLoop(FlatBufferBuilder builder, int loop) { builder.AddInt(1, loop, 0); }
  public static void AddMaxDistance(FlatBufferBuilder builder, int maxDistance) { builder.AddInt(2, maxDistance, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(3, priority, 0); }
  public static void AddVolume(FlatBufferBuilder builder, float volume) { builder.AddFloat(4, volume, 0.0f); }
  public static Offset<LF.Table.DRsound> EndDRsound(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRsound>(o);
  }
};

public struct Table_sound : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_sound GetRootAsTable_sound(ByteBuffer _bb) { return GetRootAsTable_sound(_bb, new Table_sound()); }
  public static Table_sound GetRootAsTable_sound(ByteBuffer _bb, Table_sound obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_sound __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRsound? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRsound?)(new LF.Table.DRsound()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_sound> CreateTable_sound(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_sound.AddData(builder, dataOffset);
    return Table_sound.EndTable_sound(builder);
  }

  public static void StartTable_sound(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRsound>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRsound>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_sound> EndTable_sound(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_sound>(o);
  }
  public static void FinishTable_soundBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_sound> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_soundBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_sound> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
