// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using LF.Table;
using System.Collections.Generic;

namespace LF
{
    #region Table

	public sealed class MovieTable : BaseTable
    {
        private Table_movie table = default(Table_movie);

        private Dictionary<int, MovieDataRow> data_row = new Dictionary<int, MovieDataRow>(128);
        
        public static string g_TableFileName = "movie";

        #region Data Method

        public override bool GetBoolValue(int id, string column, bool defaultValue = false)
        {
            bool result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetBoolValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short GetShortValue(int id, string column, short defaultValue = 0)
        {
            short result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetShortValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetIntValue(int id, string column, int defaultValue = 0)
        {
            int result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "type": { result = datarow.Type; break; }
                case "delayTimeType": { result = datarow.DelayTimeType; break; }
                case "isStart": { result = datarow.IsStart; break; }
                case "hideSkip": { result = datarow.HideSkip; break; }
                case "movieMode": { result = datarow.MovieMode; break; }
                case "nextType": { result = datarow.NextType; break; }
                case "nextPara": { result = datarow.NextPara; break; }
                case "DebugDot": { result = datarow.DebugDot; break; }

                default: { GameFramework.Log.Error("Table_movie.GetIntValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float GetFloatValue(int id, string column, float defaultValue = 0.0f)
        {
            float result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "type": { result = datarow.Type; break; }
                case "time": { result = datarow.Time; break; }
                case "delayTimeType": { result = datarow.DelayTimeType; break; }
                case "delayTime": { result = datarow.DelayTime; break; }
                case "isStart": { result = datarow.IsStart; break; }
                case "hideSkip": { result = datarow.HideSkip; break; }
                case "movieMode": { result = datarow.MovieMode; break; }
                case "nextType": { result = datarow.NextType; break; }
                case "nextPara": { result = datarow.NextPara; break; }
                case "DebugDot": { result = datarow.DebugDot; break; }

                default: { GameFramework.Log.Error("Table_movie.GetFloatValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string GetStringValue(int id, string column, string defaultValue = "")
        {
            string result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id.ToString(); break; }
                case "type": { result = datarow.Type.ToString(); break; }
                case "para1": { result = datarow.Para1; break; }
                case "time": { result = datarow.Time.ToString(); break; }
                case "delayTimeType": { result = datarow.DelayTimeType.ToString(); break; }
                case "delayTime": { result = datarow.DelayTime.ToString(); break; }
                case "isStart": { result = datarow.IsStart.ToString(); break; }
                case "hideSkip": { result = datarow.HideSkip.ToString(); break; }
                case "para2": { result = datarow.Para2; break; }
                case "para3": { result = datarow.Para3; break; }
                case "para4": { result = datarow.Para4; break; }
                case "para5": { result = datarow.Para5; break; }
                case "para6": { result = datarow.Para6; break; }
                case "isEnd": { result = datarow.IsEnd; break; }
                case "movieMode": { result = datarow.MovieMode.ToString(); break; }
                case "nextType": { result = datarow.NextType.ToString(); break; }
                case "nextPara": { result = datarow.NextPara.ToString(); break; }
                case "trigger": { result = datarow.Trigger; break; }
                case "para7": { result = datarow.Para7; break; }
                case "skipId": { result = datarow.SkipId; break; }
                case "isMark": { result = datarow.IsMark; break; }
                case "para8": { result = datarow.Para8; break; }
                case "DebugDot": { result = datarow.DebugDot.ToString(); break; }
                case "interface_close": { result = datarow.InterfaceClose; break; }

                default: { GameFramework.Log.Error("Table_movie.GetStringValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override bool[] GetBoolArray(int id, string column)
        {
            bool[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetBoolArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short[] GetShortArray(int id, string column)
        {
            short[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetShortArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int[] GetIntArray(int id, string column)
        {
            int[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "nextevent": { result = datarow.NexteventArray; break; }
                case "OpenHeroAiState": { result = datarow.OpenHeroAiStateArray; break; }
                case "interactiveButton": { result = datarow.InteractiveButtonArray; break; }
                case "tips_button": { result = datarow.TipsButtonArray; break; }
                case "CloseHeroAiState": { result = datarow.CloseHeroAiStateArray; break; }
                case "functionStart": { result = datarow.FunctionStartArray; break; }
                case "delete_Button": { result = datarow.DeleteButtonArray; break; }
                case "function": { result = datarow.FunctionArray; break; }

                default: { GameFramework.Log.Error("Table_movie.GetIntArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float[] GetFloatArray(int id, string column)
        {
            float[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;
                
            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetFloatArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string[] GetStringArray(int id, string column)
        {
            string[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "fog": { result = datarow.FogArray; break; }

                default: { GameFramework.Log.Error("Table_movie.GetStringArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override string GetStringArrayItem(int id, string column, int index, string defaultValue = "")
        {
            string result = defaultValue;

            int length = this.GetStringArrayLength(id, column);
            if (index < 0 || index >= length)
            {
                GameFramework.Log.Error("Table_movie.GetStringArrayItem => index out of array length({0}), [id:{1}, column:{2}, index:{3}]", length, id, column, index);
                return result;
            }
            
            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "fog": { result = datarow.FogArray[index]; break; }

                default: { GameFramework.Log.Error("Table_movie.GetStringArrayItem => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetStringArrayLength(int id, string column)
        {
            int result = 0;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "fog": { result = datarow.FogArrayLength; break; }

                default: { GameFramework.Log.Error("Table_movie.GetStringArrayLength => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override Dictionary<int, int> GetDictionaryII(int id, string column) 
        {
            Dictionary<int, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetDictionaryII => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<int, string> GetDictionaryIS(int id, string column) 
        {
            Dictionary<int, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetDictionaryIS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, int> GetDictionarySI(int id, string column) 
        {
            Dictionary<string, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetDictionarySI => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, string> GetDictionarySS(int id, string column) 
        {
            Dictionary<string, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_movie.GetDictionarySS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        #endregion Data Method

        #region DataRow Method
        
        /// <summary>
        /// 获得数据行的数量
        /// </summary>
        /// <returns></returns>
        public override int GetDataCount() 
        {
            Table_movie table = this.GetTable();
            if (null == table.ByteBuffer)
                return 0;

            return table.DataLength; 
        }
        
        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public MovieDataRow GetDataRow(int id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_movie table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            if (null != row_index && row_index.ContainsKey(id))
            {
                DRmovie? data = table.Data(row_index[id]);
                if (data.HasValue && data.Value.Id == id)
                {
                    MovieDataRow datarow = new MovieDataRow(data.Value, row_index[id]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DRmovie? data = table.Data(i);
                if (data.HasValue)
                {
                    MovieDataRow datarow = new MovieDataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过索引获取行数据
        /// </summary>
        /// <param name="index">索引,即行号,从0开始</param>
        /// <returns></returns>
        public MovieDataRow GetDataRowByIndex(int index)
        {
            Table_movie table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;

            if (index < 0 || index >= table.DataLength)
                return null;

            DRmovie? data = table.Data(index);
            if (data.HasValue)
            {
                if (!data_row.ContainsKey(data.Value.Id))
                {
                    MovieDataRow datarow = new MovieDataRow(data.Value, index);
                    data_row.Add(datarow.Id, datarow);
                }

                return data_row[data.Value.Id];
            }

            return null;
        }
        
        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<int, MovieDataRow> GetAllData()
        {
            Table_movie table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DRmovie? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        MovieDataRow datarow = new MovieDataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="callback"></param>
        public override void VisitTable(System.Func<BaseDataRow, bool> callback)
        {
            if (null == callback)
                return;

            this.GetAllData();

            var iterator = data_row.GetEnumerator();
            try
            {
                bool _stop = false;
                while (iterator.MoveNext() && _stop == false)
                {
                    _stop = callback(iterator.Current.Value);
                }
            }
            finally
            {
                iterator.Dispose();
            }
        }
        
        public override BaseDataRow GetTableRow(int id) 
        { 
            return this.GetDataRow(id); 
        }

        public override BaseDataRow GetTableRow(string id)
        {
            int rowId = 0;
            if(int.TryParse(id, out rowId))
                return this.GetDataRow(rowId);

            return null;
        }

        public override BaseDataRow GetTableRowByIndex(int index)
        {
            return this.GetDataRowByIndex(index);
        }

        #endregion DataRow Method
        
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_movie.GetRootAsTable_movie(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_movie GetTable()
        {
            LoadTable();

            return table;
        }
        
        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "movie.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "movie_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public class MovieBaseDataRow : BaseDataRow
    {
        protected DRmovie _datarow;

        public MovieBaseDataRow(DRmovie datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }
        
        public override CSLuaTable GetLuaTable()
        {
            base.GetLuaTable();

            if (_LuaDataRow.Length <= 0)
            {
                if(this.HasKey("id")) _LuaDataRow.Set("id", this.Id);
                if(this.HasKey("type")) _LuaDataRow.Set("type", this.Type);
                if(this.HasKey("para1")) _LuaDataRow.Set("para1", this.Para1);
                if(this.HasKey("time")) _LuaDataRow.Set("time", this.Time);
                if(this.HasKey("delayTimeType")) _LuaDataRow.Set("delayTimeType", this.DelayTimeType);
                if(this.HasKey("delayTime")) _LuaDataRow.Set("delayTime", this.DelayTime);
                if(this.HasKey("nextevent")) _LuaDataRow.Set("nextevent", this.NexteventArray);
                if(this.HasKey("isStart")) _LuaDataRow.Set("isStart", this.IsStart);
                if(this.HasKey("hideSkip")) _LuaDataRow.Set("hideSkip", this.HideSkip);
                if(this.HasKey("para2")) _LuaDataRow.Set("para2", this.Para2);
                if(this.HasKey("para3")) _LuaDataRow.Set("para3", this.Para3);
                if(this.HasKey("para4")) _LuaDataRow.Set("para4", this.Para4);
                if(this.HasKey("para5")) _LuaDataRow.Set("para5", this.Para5);
                if(this.HasKey("para6")) _LuaDataRow.Set("para6", this.Para6);
                if(this.HasKey("isEnd")) _LuaDataRow.Set("isEnd", this.IsEnd);
                if(this.HasKey("OpenHeroAiState")) _LuaDataRow.Set("OpenHeroAiState", this.OpenHeroAiStateArray);
                if(this.HasKey("interactiveButton")) _LuaDataRow.Set("interactiveButton", this.InteractiveButtonArray);
                if(this.HasKey("tips_button")) _LuaDataRow.Set("tips_button", this.TipsButtonArray);
                if(this.HasKey("CloseHeroAiState")) _LuaDataRow.Set("CloseHeroAiState", this.CloseHeroAiStateArray);
                if(this.HasKey("movieMode")) _LuaDataRow.Set("movieMode", this.MovieMode);
                if(this.HasKey("fog")) _LuaDataRow.Set("fog", this.FogArray);
                if(this.HasKey("functionStart")) _LuaDataRow.Set("functionStart", this.FunctionStartArray);
                if(this.HasKey("nextType")) _LuaDataRow.Set("nextType", this.NextType);
                if(this.HasKey("nextPara")) _LuaDataRow.Set("nextPara", this.NextPara);
                if(this.HasKey("trigger")) _LuaDataRow.Set("trigger", this.Trigger);
                if(this.HasKey("delete_Button")) _LuaDataRow.Set("delete_Button", this.DeleteButtonArray);
                if(this.HasKey("function")) _LuaDataRow.Set("function", this.FunctionArray);
                if(this.HasKey("para7")) _LuaDataRow.Set("para7", this.Para7);
                if(this.HasKey("skipId")) _LuaDataRow.Set("skipId", this.SkipId);
                if(this.HasKey("isMark")) _LuaDataRow.Set("isMark", this.IsMark);
                if(this.HasKey("para8")) _LuaDataRow.Set("para8", this.Para8);
                if(this.HasKey("DebugDot")) _LuaDataRow.Set("DebugDot", this.DebugDot);
                if(this.HasKey("interface_close")) _LuaDataRow.Set("interface_close", this.InterfaceClose);

            }

            return _LuaDataRow;
        }

        protected override LuaValue GetLuaValue(string rowId)
        {
            LuaValue luaValue = new LuaValue();
            switch (rowId)
            {
                case "id": { luaValue.SetValue(this.Id); break; }
                case "type": { luaValue.SetValue(this.Type); break; }
                case "para1": { luaValue.SetValue(this.Para1); break; }
                case "time": { luaValue.SetValue(this.Time); break; }
                case "delayTimeType": { luaValue.SetValue(this.DelayTimeType); break; }
                case "delayTime": { luaValue.SetValue(this.DelayTime); break; }
                case "nextevent": { luaValue.SetValue(this.NexteventArray); break; }
                case "isStart": { luaValue.SetValue(this.IsStart); break; }
                case "hideSkip": { luaValue.SetValue(this.HideSkip); break; }
                case "para2": { luaValue.SetValue(this.Para2); break; }
                case "para3": { luaValue.SetValue(this.Para3); break; }
                case "para4": { luaValue.SetValue(this.Para4); break; }
                case "para5": { luaValue.SetValue(this.Para5); break; }
                case "para6": { luaValue.SetValue(this.Para6); break; }
                case "isEnd": { luaValue.SetValue(this.IsEnd); break; }
                case "OpenHeroAiState": { luaValue.SetValue(this.OpenHeroAiStateArray); break; }
                case "interactiveButton": { luaValue.SetValue(this.InteractiveButtonArray); break; }
                case "tips_button": { luaValue.SetValue(this.TipsButtonArray); break; }
                case "CloseHeroAiState": { luaValue.SetValue(this.CloseHeroAiStateArray); break; }
                case "movieMode": { luaValue.SetValue(this.MovieMode); break; }
                case "fog": { luaValue.SetValue(this.FogArray); break; }
                case "functionStart": { luaValue.SetValue(this.FunctionStartArray); break; }
                case "nextType": { luaValue.SetValue(this.NextType); break; }
                case "nextPara": { luaValue.SetValue(this.NextPara); break; }
                case "trigger": { luaValue.SetValue(this.Trigger); break; }
                case "delete_Button": { luaValue.SetValue(this.DeleteButtonArray); break; }
                case "function": { luaValue.SetValue(this.FunctionArray); break; }
                case "para7": { luaValue.SetValue(this.Para7); break; }
                case "skipId": { luaValue.SetValue(this.SkipId); break; }
                case "isMark": { luaValue.SetValue(this.IsMark); break; }
                case "para8": { luaValue.SetValue(this.Para8); break; }
                case "DebugDot": { luaValue.SetValue(this.DebugDot); break; }
                case "interface_close": { luaValue.SetValue(this.InterfaceClose); break; }

                default:
                    break;
            }

            return luaValue;
        }
        
        public override bool HasKey(string column)
        {
            bool result = false;

            switch (column)
            {
                case "id": { result = !this.IsEmpty(_datarow.Id); break; }
                case "type": { result = !this.IsEmpty(_datarow.Type); break; }
                case "para1": { result = !this.IsEmpty(this.Para1); break; }
                case "time": { result = !this.IsEmpty(_datarow.Time); break; }
                case "delayTimeType": { result = !this.IsEmpty(_datarow.DelayTimeType); break; }
                case "delayTime": { result = !this.IsEmpty(_datarow.DelayTime); break; }
                case "nextevent": { result = _datarow.NexteventLength > 0; break; }
                case "isStart": { result = !this.IsEmpty(_datarow.IsStart); break; }
                case "hideSkip": { result = !this.IsEmpty(_datarow.HideSkip); break; }
                case "para2": { result = !this.IsEmpty(this.Para2); break; }
                case "para3": { result = !this.IsEmpty(this.Para3); break; }
                case "para4": { result = !this.IsEmpty(this.Para4); break; }
                case "para5": { result = !this.IsEmpty(this.Para5); break; }
                case "para6": { result = !this.IsEmpty(this.Para6); break; }
                case "isEnd": { result = !this.IsEmpty(this.IsEnd); break; }
                case "OpenHeroAiState": { result = _datarow.OpenHeroAiStateLength > 0; break; }
                case "interactiveButton": { result = _datarow.InteractiveButtonLength > 0; break; }
                case "tips_button": { result = _datarow.TipsButtonLength > 0; break; }
                case "CloseHeroAiState": { result = _datarow.CloseHeroAiStateLength > 0; break; }
                case "movieMode": { result = !this.IsEmpty(_datarow.MovieMode); break; }
                case "fog": { result = _datarow.FogLength > 0; break; }
                case "functionStart": { result = _datarow.FunctionStartLength > 0; break; }
                case "nextType": { result = !this.IsEmpty(_datarow.NextType); break; }
                case "nextPara": { result = !this.IsEmpty(_datarow.NextPara); break; }
                case "trigger": { result = !this.IsEmpty(this.Trigger); break; }
                case "delete_Button": { result = _datarow.DeleteButtonLength > 0; break; }
                case "function": { result = _datarow.FunctionLength > 0; break; }
                case "para7": { result = !this.IsEmpty(this.Para7); break; }
                case "skipId": { result = !this.IsEmpty(this.SkipId); break; }
                case "isMark": { result = !this.IsEmpty(this.IsMark); break; }
                case "para8": { result = !this.IsEmpty(this.Para8); break; }
                case "DebugDot": { result = !this.IsEmpty(_datarow.DebugDot); break; }
                case "interface_close": { result = !this.IsEmpty(this.InterfaceClose); break; }

                default:
                    break;
            }

            return result;
        }
        
        public int Id { get { return this.GetTableInt(_datarow.Id); } }

        public int Type { get { return this.GetTableInt(_datarow.Type); } }

        private string _Para1 = null;
        public string Para1 { get { if (null == _Para1) _Para1 = _datarow.Para1; return _Para1; } }

        public float Time { get { return this.GetTableFloat(_datarow.Time); } }

        public int DelayTimeType { get { return this.GetTableInt(_datarow.DelayTimeType); } }

        public float DelayTime { get { return this.GetTableFloat(_datarow.DelayTime); } }

        private int[] _NexteventArray = null;
        public int[] NexteventArray { get { if (null == _NexteventArray) _NexteventArray = _datarow.GetNexteventArray(); return _NexteventArray; } }
        public int NexteventArrayLength { get { if (null == this.NexteventArray) return 0; return this.NexteventArray.Length; } }

        public int IsStart { get { return this.GetTableInt(_datarow.IsStart); } }

        public int HideSkip { get { return this.GetTableInt(_datarow.HideSkip); } }

        private string _Para2 = null;
        public string Para2 { get { if (null == _Para2) _Para2 = _datarow.Para2; return _Para2; } }

        private string _Para3 = null;
        public string Para3 { get { if (null == _Para3) _Para3 = _datarow.Para3; return _Para3; } }

        private string _Para4 = null;
        public string Para4 { get { if (null == _Para4) _Para4 = _datarow.Para4; return _Para4; } }

        private string _Para5 = null;
        public string Para5 { get { if (null == _Para5) _Para5 = _datarow.Para5; return _Para5; } }

        private string _Para6 = null;
        public string Para6 { get { if (null == _Para6) _Para6 = _datarow.Para6; return _Para6; } }

        private string _IsEnd = null;
        public string IsEnd { get { if (null == _IsEnd) _IsEnd = _datarow.IsEnd; return _IsEnd; } }

        private int[] _OpenHeroAiStateArray = null;
        public int[] OpenHeroAiStateArray { get { if (null == _OpenHeroAiStateArray) _OpenHeroAiStateArray = _datarow.GetOpenHeroAiStateArray(); return _OpenHeroAiStateArray; } }
        public int OpenHeroAiStateArrayLength { get { if (null == this.OpenHeroAiStateArray) return 0; return this.OpenHeroAiStateArray.Length; } }

        private int[] _InteractiveButtonArray = null;
        public int[] InteractiveButtonArray { get { if (null == _InteractiveButtonArray) _InteractiveButtonArray = _datarow.GetInteractiveButtonArray(); return _InteractiveButtonArray; } }
        public int InteractiveButtonArrayLength { get { if (null == this.InteractiveButtonArray) return 0; return this.InteractiveButtonArray.Length; } }

        private int[] _TipsButtonArray = null;
        public int[] TipsButtonArray { get { if (null == _TipsButtonArray) _TipsButtonArray = _datarow.GetTipsButtonArray(); return _TipsButtonArray; } }
        public int TipsButtonArrayLength { get { if (null == this.TipsButtonArray) return 0; return this.TipsButtonArray.Length; } }

        private int[] _CloseHeroAiStateArray = null;
        public int[] CloseHeroAiStateArray { get { if (null == _CloseHeroAiStateArray) _CloseHeroAiStateArray = _datarow.GetCloseHeroAiStateArray(); return _CloseHeroAiStateArray; } }
        public int CloseHeroAiStateArrayLength { get { if (null == this.CloseHeroAiStateArray) return 0; return this.CloseHeroAiStateArray.Length; } }

        public int MovieMode { get { return this.GetTableInt(_datarow.MovieMode); } }

        private string[] _FogArray = null;
        public string[] FogArray { get { if(null == _FogArray) { if (_datarow.FogLength > 0) { _FogArray = new string[_datarow.FogLength]; for (int i = 0; i < _datarow.FogLength; i++) { _FogArray[i] = _datarow.Fog(i); } } } return _FogArray; } }
        public int FogArrayLength { get { if (null == this.FogArray) return 0; return this.FogArray.Length; } }

        private int[] _FunctionStartArray = null;
        public int[] FunctionStartArray { get { if (null == _FunctionStartArray) _FunctionStartArray = _datarow.GetFunctionStartArray(); return _FunctionStartArray; } }
        public int FunctionStartArrayLength { get { if (null == this.FunctionStartArray) return 0; return this.FunctionStartArray.Length; } }

        public int NextType { get { return this.GetTableInt(_datarow.NextType); } }

        public int NextPara { get { return this.GetTableInt(_datarow.NextPara); } }

        private string _Trigger = null;
        public string Trigger { get { if (null == _Trigger) _Trigger = _datarow.Trigger; return _Trigger; } }

        private int[] _DeleteButtonArray = null;
        public int[] DeleteButtonArray { get { if (null == _DeleteButtonArray) _DeleteButtonArray = _datarow.GetDeleteButtonArray(); return _DeleteButtonArray; } }
        public int DeleteButtonArrayLength { get { if (null == this.DeleteButtonArray) return 0; return this.DeleteButtonArray.Length; } }

        private int[] _FunctionArray = null;
        public int[] FunctionArray { get { if (null == _FunctionArray) _FunctionArray = _datarow.GetFunctionArray(); return _FunctionArray; } }
        public int FunctionArrayLength { get { if (null == this.FunctionArray) return 0; return this.FunctionArray.Length; } }

        private string _Para7 = null;
        public string Para7 { get { if (null == _Para7) _Para7 = _datarow.Para7; return _Para7; } }

        private string _SkipId = null;
        public string SkipId { get { if (null == _SkipId) _SkipId = _datarow.SkipId; return _SkipId; } }

        private string _IsMark = null;
        public string IsMark { get { if (null == _IsMark) _IsMark = _datarow.IsMark; return _IsMark; } }

        private string _Para8 = null;
        public string Para8 { get { if (null == _Para8) _Para8 = _datarow.Para8; return _Para8; } }

        public int DebugDot { get { return this.GetTableInt(_datarow.DebugDot); } }

        private string _InterfaceClose = null;
        public string InterfaceClose { get { if (null == _InterfaceClose) _InterfaceClose = _datarow.InterfaceClose; return _InterfaceClose; } }


    }

    #endregion DataRow
}