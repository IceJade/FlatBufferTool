// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using LF.Table;
using System.Collections.Generic;

namespace LF
{
    #region Table

	public sealed class ScienceTable : BaseTable
    {
        private Table_science table = default(Table_science);

        private Dictionary<int, ScienceDataRow> data_row = new Dictionary<int, ScienceDataRow>(128);
        
        public static string g_TableFileName = "science";

        #region Data Method

        public override bool GetBoolValue(int id, string column, bool defaultValue = false)
        {
            bool result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetBoolValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short GetShortValue(int id, string column, short defaultValue = 0)
        {
            short result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetShortValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetIntValue(int id, string column, int defaultValue = 0)
        {
            int result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "tab": { result = datarow.Tab; break; }
                case "desc2": { result = datarow.Desc2; break; }
                case "show": { result = datarow.Show; break; }
                case "desc2_para": { result = datarow.Desc2Para; break; }
                case "important": { result = datarow.Important; break; }
                case "descsp": { result = datarow.Descsp; break; }

                default: { GameFramework.Log.Error("Table_science.GetIntValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float GetFloatValue(int id, string column, float defaultValue = 0.0f)
        {
            float result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "tab": { result = datarow.Tab; break; }
                case "desc2": { result = datarow.Desc2; break; }
                case "show": { result = datarow.Show; break; }
                case "desc2_para": { result = datarow.Desc2Para; break; }
                case "important": { result = datarow.Important; break; }
                case "descsp": { result = datarow.Descsp; break; }

                default: { GameFramework.Log.Error("Table_science.GetFloatValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string GetStringValue(int id, string column, string defaultValue = "")
        {
            string result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id.ToString(); break; }
                case "tab": { result = datarow.Tab.ToString(); break; }
                case "name": { result = datarow.Name; break; }
                case "description": { result = datarow.Description; break; }
                case "desc2": { result = datarow.Desc2.ToString(); break; }
                case "icon": { result = datarow.Icon; break; }
                case "para1": { result = datarow.Para1; break; }
                case "show": { result = datarow.Show.ToString(); break; }
                case "desc2_para": { result = datarow.Desc2Para.ToString(); break; }
                case "object": { result = datarow.ObjectAlies; break; }
                case "important": { result = datarow.Important.ToString(); break; }
                case "pic": { result = datarow.Pic; break; }
                case "description_simple": { result = datarow.DescriptionSimple; break; }
                case "descsp": { result = datarow.Descsp.ToString(); break; }

                default: { GameFramework.Log.Error("Table_science.GetStringValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override bool[] GetBoolArray(int id, string column)
        {
            bool[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetBoolArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short[] GetShortArray(int id, string column)
        {
            short[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetShortArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int[] GetIntArray(int id, string column)
        {
            int[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "position": { result = datarow.PositionArray; break; }
                case "relation": { result = datarow.RelationArray; break; }

                default: { GameFramework.Log.Error("Table_science.GetIntArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float[] GetFloatArray(int id, string column)
        {
            float[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;
                
            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetFloatArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string[] GetStringArray(int id, string column)
        {
            string[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "line": { result = datarow.LineArray; break; }
                case "info": { result = datarow.InfoArray; break; }

                default: { GameFramework.Log.Error("Table_science.GetStringArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override string GetStringArrayItem(int id, string column, int index, string defaultValue = "")
        {
            string result = defaultValue;

            int length = this.GetStringArrayLength(id, column);
            if (index < 0 || index >= length)
            {
                GameFramework.Log.Error("Table_science.GetStringArrayItem => index out of array length({0}), [id:{1}, column:{2}, index:{3}]", length, id, column, index);
                return result;
            }
            
            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "line": { result = datarow.LineArray[index]; break; }
                case "info": { result = datarow.InfoArray[index]; break; }

                default: { GameFramework.Log.Error("Table_science.GetStringArrayItem => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetStringArrayLength(int id, string column)
        {
            int result = 0;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "line": { result = datarow.LineArrayLength; break; }
                case "info": { result = datarow.InfoArrayLength; break; }

                default: { GameFramework.Log.Error("Table_science.GetStringArrayLength => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override Dictionary<int, int> GetDictionaryII(int id, string column) 
        {
            Dictionary<int, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetDictionaryII => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<int, string> GetDictionaryIS(int id, string column) 
        {
            Dictionary<int, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetDictionaryIS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, int> GetDictionarySI(int id, string column) 
        {
            Dictionary<string, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetDictionarySI => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, string> GetDictionarySS(int id, string column) 
        {
            Dictionary<string, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_science.GetDictionarySS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        #endregion Data Method

        #region DataRow Method
        
        /// <summary>
        /// 获得数据行的数量
        /// </summary>
        /// <returns></returns>
        public override int GetDataCount() 
        {
            Table_science table = this.GetTable();
            if (null == table.ByteBuffer)
                return 0;

            return table.DataLength; 
        }
        
        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public ScienceDataRow GetDataRow(int id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_science table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            if (null != row_index && row_index.ContainsKey(id))
            {
                DRscience? data = table.Data(row_index[id]);
                if (data.HasValue && data.Value.Id == id)
                {
                    ScienceDataRow datarow = new ScienceDataRow(data.Value, row_index[id]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DRscience? data = table.Data(i);
                if (data.HasValue)
                {
                    ScienceDataRow datarow = new ScienceDataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过索引获取行数据
        /// </summary>
        /// <param name="index">索引,即行号,从0开始</param>
        /// <returns></returns>
        public ScienceDataRow GetDataRowByIndex(int index)
        {
            Table_science table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;

            if (index < 0 || index >= table.DataLength)
                return null;

            DRscience? data = table.Data(index);
            if (data.HasValue)
            {
                if (!data_row.ContainsKey(data.Value.Id))
                {
                    ScienceDataRow datarow = new ScienceDataRow(data.Value, index);
                    data_row.Add(datarow.Id, datarow);
                }

                return data_row[data.Value.Id];
            }

            return null;
        }
        
        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<int, ScienceDataRow> GetAllData()
        {
            Table_science table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DRscience? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        ScienceDataRow datarow = new ScienceDataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="callback"></param>
        public override void VisitTable(System.Func<BaseDataRow, bool> callback)
        {
            if (null == callback)
                return;

            this.GetAllData();

            var iterator = data_row.GetEnumerator();
            try
            {
                bool _stop = false;
                while (iterator.MoveNext() && _stop == false)
                {
                    _stop = callback(iterator.Current.Value);
                }
            }
            finally
            {
                iterator.Dispose();
            }
        }
        
        public override BaseDataRow GetTableRow(int id) 
        { 
            return this.GetDataRow(id); 
        }

        public override BaseDataRow GetTableRow(string id)
        {
            int rowId = 0;
            if(int.TryParse(id, out rowId))
                return this.GetDataRow(rowId);

            return null;
        }

        public override BaseDataRow GetTableRowByIndex(int index)
        {
            return this.GetDataRowByIndex(index);
        }

        #endregion DataRow Method
        
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_science.GetRootAsTable_science(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_science GetTable()
        {
            LoadTable();

            return table;
        }
        
        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "science.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "science_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public class ScienceBaseDataRow : BaseDataRow
    {
        protected DRscience _datarow;

        public ScienceBaseDataRow(DRscience datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }
        
        public override CSLuaTable GetLuaTable()
        {
            base.GetLuaTable();

            if (_LuaDataRow.Length <= 0)
            {
                if(this.HasKey("id")) _LuaDataRow.Set("id", this.Id);
                if(this.HasKey("tab")) _LuaDataRow.Set("tab", this.Tab);
                if(this.HasKey("name")) _LuaDataRow.Set("name", this.Name);
                if(this.HasKey("description")) _LuaDataRow.Set("description", this.Description);
                if(this.HasKey("desc2")) _LuaDataRow.Set("desc2", this.Desc2);
                if(this.HasKey("icon")) _LuaDataRow.Set("icon", this.Icon);
                if(this.HasKey("position")) _LuaDataRow.Set("position", this.PositionArray);
                if(this.HasKey("line")) _LuaDataRow.Set("line", this.LineArray);
                if(this.HasKey("relation")) _LuaDataRow.Set("relation", this.RelationArray);
                if(this.HasKey("para1")) _LuaDataRow.Set("para1", this.Para1);
                if(this.HasKey("show")) _LuaDataRow.Set("show", this.Show);
                if(this.HasKey("desc2_para")) _LuaDataRow.Set("desc2_para", this.Desc2Para);
                if(this.HasKey("info")) _LuaDataRow.Set("info", this.InfoArray);
                if(this.HasKey("object")) _LuaDataRow.Set("object", this.ObjectAlies);
                if(this.HasKey("important")) _LuaDataRow.Set("important", this.Important);
                if(this.HasKey("pic")) _LuaDataRow.Set("pic", this.Pic);
                if(this.HasKey("description_simple")) _LuaDataRow.Set("description_simple", this.DescriptionSimple);
                if(this.HasKey("descsp")) _LuaDataRow.Set("descsp", this.Descsp);

            }

            return _LuaDataRow;
        }

        protected override LuaValue GetLuaValue(string rowId)
        {
            LuaValue luaValue = new LuaValue();
            switch (rowId)
            {
                case "id": { luaValue.SetValue(this.Id); break; }
                case "tab": { luaValue.SetValue(this.Tab); break; }
                case "name": { luaValue.SetValue(this.Name); break; }
                case "description": { luaValue.SetValue(this.Description); break; }
                case "desc2": { luaValue.SetValue(this.Desc2); break; }
                case "icon": { luaValue.SetValue(this.Icon); break; }
                case "position": { luaValue.SetValue(this.PositionArray); break; }
                case "line": { luaValue.SetValue(this.LineArray); break; }
                case "relation": { luaValue.SetValue(this.RelationArray); break; }
                case "para1": { luaValue.SetValue(this.Para1); break; }
                case "show": { luaValue.SetValue(this.Show); break; }
                case "desc2_para": { luaValue.SetValue(this.Desc2Para); break; }
                case "info": { luaValue.SetValue(this.InfoArray); break; }
                case "object": { luaValue.SetValue(this.ObjectAlies); break; }
                case "important": { luaValue.SetValue(this.Important); break; }
                case "pic": { luaValue.SetValue(this.Pic); break; }
                case "description_simple": { luaValue.SetValue(this.DescriptionSimple); break; }
                case "descsp": { luaValue.SetValue(this.Descsp); break; }

                default:
                    break;
            }

            return luaValue;
        }
        
        public override bool HasKey(string column)
        {
            bool result = false;

            switch (column)
            {
                case "id": { result = !this.IsEmpty(_datarow.Id); break; }
                case "tab": { result = !this.IsEmpty(_datarow.Tab); break; }
                case "name": { result = !this.IsEmpty(this.Name); break; }
                case "description": { result = !this.IsEmpty(this.Description); break; }
                case "desc2": { result = !this.IsEmpty(_datarow.Desc2); break; }
                case "icon": { result = !this.IsEmpty(this.Icon); break; }
                case "position": { result = _datarow.PositionLength > 0; break; }
                case "line": { result = _datarow.LineLength > 0; break; }
                case "relation": { result = _datarow.RelationLength > 0; break; }
                case "para1": { result = !this.IsEmpty(this.Para1); break; }
                case "show": { result = !this.IsEmpty(_datarow.Show); break; }
                case "desc2_para": { result = !this.IsEmpty(_datarow.Desc2Para); break; }
                case "info": { result = _datarow.InfoLength > 0; break; }
                case "object": { result = !this.IsEmpty(this.ObjectAlies); break; }
                case "important": { result = !this.IsEmpty(_datarow.Important); break; }
                case "pic": { result = !this.IsEmpty(this.Pic); break; }
                case "description_simple": { result = !this.IsEmpty(this.DescriptionSimple); break; }
                case "descsp": { result = !this.IsEmpty(_datarow.Descsp); break; }

                default:
                    break;
            }

            return result;
        }
        
        public int Id { get { return this.GetTableInt(_datarow.Id); } }

        public int Tab { get { return this.GetTableInt(_datarow.Tab); } }

        private string _Name = null;
        public string Name { get { if (null == _Name) _Name = _datarow.Name; return _Name; } }

        private string _Description = null;
        public string Description { get { if (null == _Description) _Description = _datarow.Description; return _Description; } }

        public int Desc2 { get { return this.GetTableInt(_datarow.Desc2); } }

        private string _Icon = null;
        public string Icon { get { if (null == _Icon) _Icon = _datarow.Icon; return _Icon; } }

        private int[] _PositionArray = null;
        public int[] PositionArray { get { if (null == _PositionArray) _PositionArray = _datarow.GetPositionArray(); return _PositionArray; } }
        public int PositionArrayLength { get { if (null == this.PositionArray) return 0; return this.PositionArray.Length; } }

        private string[] _LineArray = null;
        public string[] LineArray { get { if(null == _LineArray) { if (_datarow.LineLength > 0) { _LineArray = new string[_datarow.LineLength]; for (int i = 0; i < _datarow.LineLength; i++) { _LineArray[i] = _datarow.Line(i); } } } return _LineArray; } }
        public int LineArrayLength { get { if (null == this.LineArray) return 0; return this.LineArray.Length; } }

        private int[] _RelationArray = null;
        public int[] RelationArray { get { if (null == _RelationArray) _RelationArray = _datarow.GetRelationArray(); return _RelationArray; } }
        public int RelationArrayLength { get { if (null == this.RelationArray) return 0; return this.RelationArray.Length; } }

        private string _Para1 = null;
        public string Para1 { get { if (null == _Para1) _Para1 = _datarow.Para1; return _Para1; } }

        public int Show { get { return this.GetTableInt(_datarow.Show); } }

        public int Desc2Para { get { return this.GetTableInt(_datarow.Desc2Para); } }

        private string[] _InfoArray = null;
        public string[] InfoArray { get { if(null == _InfoArray) { if (_datarow.InfoLength > 0) { _InfoArray = new string[_datarow.InfoLength]; for (int i = 0; i < _datarow.InfoLength; i++) { _InfoArray[i] = _datarow.Info(i); } } } return _InfoArray; } }
        public int InfoArrayLength { get { if (null == this.InfoArray) return 0; return this.InfoArray.Length; } }

        private string _ObjectAlies = null;
        public string ObjectAlies { get { if (null == _ObjectAlies) _ObjectAlies = _datarow.ObjectAlies; return _ObjectAlies; } }

        public int Important { get { return this.GetTableInt(_datarow.Important); } }

        private string _Pic = null;
        public string Pic { get { if (null == _Pic) _Pic = _datarow.Pic; return _Pic; } }

        private string _DescriptionSimple = null;
        public string DescriptionSimple { get { if (null == _DescriptionSimple) _DescriptionSimple = _datarow.DescriptionSimple; return _DescriptionSimple; } }

        public int Descsp { get { return this.GetTableInt(_datarow.Descsp); } }


    }

    #endregion DataRow
}