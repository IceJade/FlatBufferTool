// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using LF.Table;
using System.Collections.Generic;

namespace LF
{
    #region Table

	public sealed class HeroesTable : BaseTable
    {
        private Table_heroes table = default(Table_heroes);

        private Dictionary<int, HeroesDataRow> data_row = new Dictionary<int, HeroesDataRow>(128);
        
        public static string g_TableFileName = "heroes";

        #region Data Method

        public override bool GetBoolValue(int id, string column, bool defaultValue = false)
        {
            bool result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_heroes.GetBoolValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short GetShortValue(int id, string column, short defaultValue = 0)
        {
            short result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_heroes.GetShortValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetIntValue(int id, string column, int defaultValue = 0)
        {
            int result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "handbook": { result = datarow.Handbook; break; }
                case "order": { result = datarow.Order; break; }
                case "quality_min": { result = datarow.QualityMin; break; }
                case "quality_max": { result = datarow.QualityMax; break; }
                case "poster": { result = datarow.Poster; break; }
                case "rarity": { result = datarow.Rarity; break; }
                case "camp": { result = datarow.Camp; break; }
                case "Arms": { result = datarow.Arms; break; }
                case "eat_speed": { result = datarow.EatSpeed; break; }
                case "skill_levelup_item": { result = datarow.SkillLevelupItem; break; }
                case "position": { result = datarow.Position; break; }
                case "robot": { result = datarow.Robot; break; }
                case "tryReward": { result = datarow.TryReward; break; }
                case "showType": { result = datarow.ShowType; break; }
                case "arms": { result = datarow.Arms; break; }
                case "sound": { result = datarow.Sound; break; }
                case "story": { result = datarow.Story; break; }
                case "shelter_stationed": { result = datarow.ShelterStationed; break; }
                case "hide_in_city": { result = datarow.HideInCity; break; }

                default: { GameFramework.Log.Error("Table_heroes.GetIntValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float GetFloatValue(int id, string column, float defaultValue = 0.0f)
        {
            float result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "size": { result = datarow.Size; break; }
                case "handbook": { result = datarow.Handbook; break; }
                case "order": { result = datarow.Order; break; }
                case "quality_min": { result = datarow.QualityMin; break; }
                case "quality_max": { result = datarow.QualityMax; break; }
                case "poster": { result = datarow.Poster; break; }
                case "rarity": { result = datarow.Rarity; break; }
                case "camp": { result = datarow.Camp; break; }
                case "Arms": { result = datarow.Arms; break; }
                case "eat_speed": { result = datarow.EatSpeed; break; }
                case "skill_levelup_item": { result = datarow.SkillLevelupItem; break; }
                case "position": { result = datarow.Position; break; }
                case "robot": { result = datarow.Robot; break; }
                case "tryReward": { result = datarow.TryReward; break; }
                case "showType": { result = datarow.ShowType; break; }
                case "arms": { result = datarow.Arms; break; }
                case "sound": { result = datarow.Sound; break; }
                case "story": { result = datarow.Story; break; }
                case "shelter_stationed": { result = datarow.ShelterStationed; break; }
                case "hide_in_city": { result = datarow.HideInCity; break; }

                default: { GameFramework.Log.Error("Table_heroes.GetFloatValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string GetStringValue(int id, string column, string defaultValue = "")
        {
            string result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id.ToString(); break; }
                case "name": { result = datarow.Name; break; }
                case "nickname": { result = datarow.Nickname; break; }
                case "sculpture": { result = datarow.Sculpture; break; }
                case "recruit_linshi": { result = datarow.RecruitLinshi; break; }
                case "avatar_icon": { result = datarow.AvatarIcon; break; }
                case "tujian_icon": { result = datarow.TujianIcon; break; }
                case "prefab": { result = datarow.Prefab; break; }
                case "prefab_high": { result = datarow.PrefabHigh; break; }
                case "size": { result = datarow.Size.ToString(); break; }
                case "handbook": { result = datarow.Handbook.ToString(); break; }
                case "order": { result = datarow.Order.ToString(); break; }
                case "quality_min": { result = datarow.QualityMin.ToString(); break; }
                case "quality_max": { result = datarow.QualityMax.ToString(); break; }
                case "poster": { result = datarow.Poster.ToString(); break; }
                case "rarity": { result = datarow.Rarity.ToString(); break; }
                case "camp": { result = datarow.Camp.ToString(); break; }
                case "Arms": { result = datarow.Arms.ToString(); break; }
                case "eat_speed": { result = datarow.EatSpeed.ToString(); break; }
                case "skill_levelup_item": { result = datarow.SkillLevelupItem.ToString(); break; }
                case "position": { result = datarow.Position.ToString(); break; }
                case "robot": { result = datarow.Robot.ToString(); break; }
                case "avatar_spine": { result = datarow.AvatarSpine; break; }
                case "work_sculpture": { result = datarow.WorkSculpture; break; }
                case "TujianIcon2": { result = datarow.TujianIcon2; break; }
                case "video": { result = datarow.Video; break; }
                case "tryReward": { result = datarow.TryReward.ToString(); break; }
                case "showType": { result = datarow.ShowType.ToString(); break; }
                case "arms": { result = datarow.Arms.ToString(); break; }
                case "sculpture_round": { result = datarow.SculptureRound; break; }
                case "sound": { result = datarow.Sound.ToString(); break; }
                case "story": { result = datarow.Story.ToString(); break; }
                case "prefab_pve": { result = datarow.PrefabPve; break; }
                case "prefab_city": { result = datarow.PrefabCity; break; }
                case "shelter_stationed": { result = datarow.ShelterStationed.ToString(); break; }
                case "hide_in_city": { result = datarow.HideInCity.ToString(); break; }
                case "rarity_lottery": { result = datarow.RarityLottery; break; }
                case "tag_pic": { result = datarow.TagPic; break; }
                case "portrait": { result = datarow.Portrait; break; }
                case "recruit_front": { result = datarow.RecruitFront; break; }
                case "recruit_rear": { result = datarow.RecruitRear; break; }
                case "honor": { result = datarow.Honor; break; }

                default: { GameFramework.Log.Error("Table_heroes.GetStringValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override bool[] GetBoolArray(int id, string column)
        {
            bool[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_heroes.GetBoolArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short[] GetShortArray(int id, string column)
        {
            short[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_heroes.GetShortArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int[] GetIntArray(int id, string column)
        {
            int[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "Label_1": { result = datarow.Label1Array; break; }
                case "Label_3": { result = datarow.Label3Array; break; }
                case "skill": { result = datarow.SkillArray; break; }
                case "skill_unlock": { result = datarow.SkillUnlockArray; break; }
                case "skill_levelup_num": { result = datarow.SkillLevelupNumArray; break; }
                case "power_para": { result = datarow.PowerParaArray; break; }
                case "show_condition": { result = datarow.ShowConditionArray; break; }
                case "skill_levelup_item_exchange": { result = datarow.SkillLevelupItemExchangeArray; break; }

                default: { GameFramework.Log.Error("Table_heroes.GetIntArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float[] GetFloatArray(int id, string column)
        {
            float[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;
                
            switch (column)
            {

                default: { GameFramework.Log.Error("Table_heroes.GetFloatArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string[] GetStringArray(int id, string column)
        {
            string[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "strength": { result = datarow.StrengthArray; break; }
                case "agility": { result = datarow.AgilityArray; break; }
                case "intelligence": { result = datarow.IntelligenceArray; break; }
                case "endurance": { result = datarow.EnduranceArray; break; }
                case "luck": { result = datarow.LuckArray; break; }
                case "promote": { result = datarow.PromoteArray; break; }
                case "skill_levelup_num_new": { result = datarow.SkillLevelupNumNewArray; break; }
                case "show_server": { result = datarow.ShowServerArray; break; }

                default: { GameFramework.Log.Error("Table_heroes.GetStringArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override string GetStringArrayItem(int id, string column, int index, string defaultValue = "")
        {
            string result = defaultValue;

            int length = this.GetStringArrayLength(id, column);
            if (index < 0 || index >= length)
            {
                GameFramework.Log.Error("Table_heroes.GetStringArrayItem => index out of array length({0}), [id:{1}, column:{2}, index:{3}]", length, id, column, index);
                return result;
            }
            
            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "strength": { result = datarow.StrengthArray[index]; break; }
                case "agility": { result = datarow.AgilityArray[index]; break; }
                case "intelligence": { result = datarow.IntelligenceArray[index]; break; }
                case "endurance": { result = datarow.EnduranceArray[index]; break; }
                case "luck": { result = datarow.LuckArray[index]; break; }
                case "promote": { result = datarow.PromoteArray[index]; break; }
                case "skill_levelup_num_new": { result = datarow.SkillLevelupNumNewArray[index]; break; }
                case "show_server": { result = datarow.ShowServerArray[index]; break; }

                default: { GameFramework.Log.Error("Table_heroes.GetStringArrayItem => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetStringArrayLength(int id, string column)
        {
            int result = 0;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "strength": { result = datarow.StrengthArrayLength; break; }
                case "agility": { result = datarow.AgilityArrayLength; break; }
                case "intelligence": { result = datarow.IntelligenceArrayLength; break; }
                case "endurance": { result = datarow.EnduranceArrayLength; break; }
                case "luck": { result = datarow.LuckArrayLength; break; }
                case "promote": { result = datarow.PromoteArrayLength; break; }
                case "skill_levelup_num_new": { result = datarow.SkillLevelupNumNewArrayLength; break; }
                case "show_server": { result = datarow.ShowServerArrayLength; break; }

                default: { GameFramework.Log.Error("Table_heroes.GetStringArrayLength => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override Dictionary<int, int> GetDictionaryII(int id, string column) 
        {
            Dictionary<int, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_heroes.GetDictionaryII => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<int, string> GetDictionaryIS(int id, string column) 
        {
            Dictionary<int, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_heroes.GetDictionaryIS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, int> GetDictionarySI(int id, string column) 
        {
            Dictionary<string, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_heroes.GetDictionarySI => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, string> GetDictionarySS(int id, string column) 
        {
            Dictionary<string, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "strength": { result = datarow.StrengthDic; break; }
                case "agility": { result = datarow.AgilityDic; break; }
                case "intelligence": { result = datarow.IntelligenceDic; break; }
                case "endurance": { result = datarow.EnduranceDic; break; }
                case "luck": { result = datarow.LuckDic; break; }

                default: { GameFramework.Log.Error("Table_heroes.GetDictionarySS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        #endregion Data Method

        #region DataRow Method
        
        /// <summary>
        /// 获得数据行的数量
        /// </summary>
        /// <returns></returns>
        public override int GetDataCount() 
        {
            Table_heroes table = this.GetTable();
            if (null == table.ByteBuffer)
                return 0;

            return table.DataLength; 
        }
        
        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public HeroesDataRow GetDataRow(int id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_heroes table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            if (null != row_index && row_index.ContainsKey(id))
            {
                DRheroes? data = table.Data(row_index[id]);
                if (data.HasValue && data.Value.Id == id)
                {
                    HeroesDataRow datarow = new HeroesDataRow(data.Value, row_index[id]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DRheroes? data = table.Data(i);
                if (data.HasValue)
                {
                    HeroesDataRow datarow = new HeroesDataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过索引获取行数据
        /// </summary>
        /// <param name="index">索引,即行号,从0开始</param>
        /// <returns></returns>
        public HeroesDataRow GetDataRowByIndex(int index)
        {
            Table_heroes table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;

            if (index < 0 || index >= table.DataLength)
                return null;

            DRheroes? data = table.Data(index);
            if (data.HasValue)
            {
                if (!data_row.ContainsKey(data.Value.Id))
                {
                    HeroesDataRow datarow = new HeroesDataRow(data.Value, index);
                    data_row.Add(datarow.Id, datarow);
                }

                return data_row[data.Value.Id];
            }

            return null;
        }
        
        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<int, HeroesDataRow> GetAllData()
        {
            Table_heroes table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DRheroes? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        HeroesDataRow datarow = new HeroesDataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="callback"></param>
        public override void VisitTable(System.Func<BaseDataRow, bool> callback)
        {
            if (null == callback)
                return;

            this.GetAllData();

            var iterator = data_row.GetEnumerator();
            try
            {
                bool _stop = false;
                while (iterator.MoveNext() && _stop == false)
                {
                    _stop = callback(iterator.Current.Value);
                }
            }
            finally
            {
                iterator.Dispose();
            }
        }
        
        public override BaseDataRow GetTableRow(int id) 
        { 
            return this.GetDataRow(id); 
        }

        public override BaseDataRow GetTableRow(string id)
        {
            int rowId = 0;
            if(int.TryParse(id, out rowId))
                return this.GetDataRow(rowId);

            return null;
        }

        public override BaseDataRow GetTableRowByIndex(int index)
        {
            return this.GetDataRowByIndex(index);
        }

        #endregion DataRow Method
        
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_heroes.GetRootAsTable_heroes(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_heroes GetTable()
        {
            LoadTable();

            return table;
        }
        
        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "heroes.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "heroes_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public class HeroesBaseDataRow : BaseDataRow
    {
        protected DRheroes _datarow;

        public HeroesBaseDataRow(DRheroes datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }
        
        public override CSLuaTable GetLuaTable()
        {
            base.GetLuaTable();

            if (_LuaDataRow.Length <= 0)
            {
                if(this.HasKey("id")) _LuaDataRow.Set("id", this.Id);
                if(this.HasKey("name")) _LuaDataRow.Set("name", this.Name);
                if(this.HasKey("nickname")) _LuaDataRow.Set("nickname", this.Nickname);
                if(this.HasKey("sculpture")) _LuaDataRow.Set("sculpture", this.Sculpture);
                if(this.HasKey("recruit_linshi")) _LuaDataRow.Set("recruit_linshi", this.RecruitLinshi);
                if(this.HasKey("avatar_icon")) _LuaDataRow.Set("avatar_icon", this.AvatarIcon);
                if(this.HasKey("tujian_icon")) _LuaDataRow.Set("tujian_icon", this.TujianIcon);
                if(this.HasKey("prefab")) _LuaDataRow.Set("prefab", this.Prefab);
                if(this.HasKey("prefab_high")) _LuaDataRow.Set("prefab_high", this.PrefabHigh);
                if(this.HasKey("size")) _LuaDataRow.Set("size", this.Size);
                if(this.HasKey("handbook")) _LuaDataRow.Set("handbook", this.Handbook);
                if(this.HasKey("order")) _LuaDataRow.Set("order", this.Order);
                if(this.HasKey("quality_min")) _LuaDataRow.Set("quality_min", this.QualityMin);
                if(this.HasKey("quality_max")) _LuaDataRow.Set("quality_max", this.QualityMax);
                if(this.HasKey("poster")) _LuaDataRow.Set("poster", this.Poster);
                if(this.HasKey("rarity")) _LuaDataRow.Set("rarity", this.Rarity);
                if(this.HasKey("camp")) _LuaDataRow.Set("camp", this.Camp);
                if(this.HasKey("Arms")) _LuaDataRow.Set("Arms", this.Arms);
                if(this.HasKey("Label_1")) _LuaDataRow.Set("Label_1", this.Label1Array);
                if(this.HasKey("Label_3")) _LuaDataRow.Set("Label_3", this.Label3Array);
                if(this.HasKey("eat_speed")) _LuaDataRow.Set("eat_speed", this.EatSpeed);
                if(this.HasKey("strength")) _LuaDataRow.Set("strength", this.StrengthArray);
                if(this.HasKey("agility")) _LuaDataRow.Set("agility", this.AgilityArray);
                if(this.HasKey("intelligence")) _LuaDataRow.Set("intelligence", this.IntelligenceArray);
                if(this.HasKey("endurance")) _LuaDataRow.Set("endurance", this.EnduranceArray);
                if(this.HasKey("luck")) _LuaDataRow.Set("luck", this.LuckArray);
                if(this.HasKey("skill")) _LuaDataRow.Set("skill", this.SkillArray);
                if(this.HasKey("skill_unlock")) _LuaDataRow.Set("skill_unlock", this.SkillUnlockArray);
                if(this.HasKey("skill_levelup_num")) _LuaDataRow.Set("skill_levelup_num", this.SkillLevelupNumArray);
                if(this.HasKey("skill_levelup_item")) _LuaDataRow.Set("skill_levelup_item", this.SkillLevelupItem);
                if(this.HasKey("power_para")) _LuaDataRow.Set("power_para", this.PowerParaArray);
                if(this.HasKey("position")) _LuaDataRow.Set("position", this.Position);
                if(this.HasKey("robot")) _LuaDataRow.Set("robot", this.Robot);
                if(this.HasKey("promote")) _LuaDataRow.Set("promote", this.PromoteArray);
                if(this.HasKey("avatar_spine")) _LuaDataRow.Set("avatar_spine", this.AvatarSpine);
                if(this.HasKey("work_sculpture")) _LuaDataRow.Set("work_sculpture", this.WorkSculpture);
                if(this.HasKey("TujianIcon2")) _LuaDataRow.Set("TujianIcon2", this.TujianIcon2);
                if(this.HasKey("skill_levelup_num_new")) _LuaDataRow.Set("skill_levelup_num_new", this.SkillLevelupNumNewArray);
                if(this.HasKey("show_condition")) _LuaDataRow.Set("show_condition", this.ShowConditionArray);
                if(this.HasKey("video")) _LuaDataRow.Set("video", this.Video);
                if(this.HasKey("tryReward")) _LuaDataRow.Set("tryReward", this.TryReward);
                if(this.HasKey("showType")) _LuaDataRow.Set("showType", this.ShowType);
                if(this.HasKey("arms")) _LuaDataRow.Set("arms", this.Arms);
                if(this.HasKey("skill_levelup_item_exchange")) _LuaDataRow.Set("skill_levelup_item_exchange", this.SkillLevelupItemExchangeArray);
                if(this.HasKey("sculpture_round")) _LuaDataRow.Set("sculpture_round", this.SculptureRound);
                if(this.HasKey("sound")) _LuaDataRow.Set("sound", this.Sound);
                if(this.HasKey("story")) _LuaDataRow.Set("story", this.Story);
                if(this.HasKey("prefab_pve")) _LuaDataRow.Set("prefab_pve", this.PrefabPve);
                if(this.HasKey("prefab_city")) _LuaDataRow.Set("prefab_city", this.PrefabCity);
                if(this.HasKey("show_server")) _LuaDataRow.Set("show_server", this.ShowServerArray);
                if(this.HasKey("shelter_stationed")) _LuaDataRow.Set("shelter_stationed", this.ShelterStationed);
                if(this.HasKey("hide_in_city")) _LuaDataRow.Set("hide_in_city", this.HideInCity);
                if(this.HasKey("rarity_lottery")) _LuaDataRow.Set("rarity_lottery", this.RarityLottery);
                if(this.HasKey("tag_pic")) _LuaDataRow.Set("tag_pic", this.TagPic);
                if(this.HasKey("portrait")) _LuaDataRow.Set("portrait", this.Portrait);
                if(this.HasKey("recruit_front")) _LuaDataRow.Set("recruit_front", this.RecruitFront);
                if(this.HasKey("recruit_rear")) _LuaDataRow.Set("recruit_rear", this.RecruitRear);
                if(this.HasKey("honor")) _LuaDataRow.Set("honor", this.Honor);

            }

            return _LuaDataRow;
        }

        protected override LuaValue GetLuaValue(string rowId)
        {
            LuaValue luaValue = new LuaValue();
            switch (rowId)
            {
                case "id": { luaValue.SetValue(this.Id); break; }
                case "name": { luaValue.SetValue(this.Name); break; }
                case "nickname": { luaValue.SetValue(this.Nickname); break; }
                case "sculpture": { luaValue.SetValue(this.Sculpture); break; }
                case "recruit_linshi": { luaValue.SetValue(this.RecruitLinshi); break; }
                case "avatar_icon": { luaValue.SetValue(this.AvatarIcon); break; }
                case "tujian_icon": { luaValue.SetValue(this.TujianIcon); break; }
                case "prefab": { luaValue.SetValue(this.Prefab); break; }
                case "prefab_high": { luaValue.SetValue(this.PrefabHigh); break; }
                case "size": { luaValue.SetValue(this.Size); break; }
                case "handbook": { luaValue.SetValue(this.Handbook); break; }
                case "order": { luaValue.SetValue(this.Order); break; }
                case "quality_min": { luaValue.SetValue(this.QualityMin); break; }
                case "quality_max": { luaValue.SetValue(this.QualityMax); break; }
                case "poster": { luaValue.SetValue(this.Poster); break; }
                case "rarity": { luaValue.SetValue(this.Rarity); break; }
                case "camp": { luaValue.SetValue(this.Camp); break; }
                case "Arms": { luaValue.SetValue(this.Arms); break; }
                case "Label_1": { luaValue.SetValue(this.Label1Array); break; }
                case "Label_3": { luaValue.SetValue(this.Label3Array); break; }
                case "eat_speed": { luaValue.SetValue(this.EatSpeed); break; }
                case "strength": { luaValue.SetValue(this.StrengthDic); break; }
                case "agility": { luaValue.SetValue(this.AgilityDic); break; }
                case "intelligence": { luaValue.SetValue(this.IntelligenceDic); break; }
                case "endurance": { luaValue.SetValue(this.EnduranceDic); break; }
                case "luck": { luaValue.SetValue(this.LuckDic); break; }
                case "skill": { luaValue.SetValue(this.SkillArray); break; }
                case "skill_unlock": { luaValue.SetValue(this.SkillUnlockArray); break; }
                case "skill_levelup_num": { luaValue.SetValue(this.SkillLevelupNumArray); break; }
                case "skill_levelup_item": { luaValue.SetValue(this.SkillLevelupItem); break; }
                case "power_para": { luaValue.SetValue(this.PowerParaArray); break; }
                case "position": { luaValue.SetValue(this.Position); break; }
                case "robot": { luaValue.SetValue(this.Robot); break; }
                case "promote": { luaValue.SetValue(this.PromoteArray); break; }
                case "avatar_spine": { luaValue.SetValue(this.AvatarSpine); break; }
                case "work_sculpture": { luaValue.SetValue(this.WorkSculpture); break; }
                case "TujianIcon2": { luaValue.SetValue(this.TujianIcon2); break; }
                case "skill_levelup_num_new": { luaValue.SetValue(this.SkillLevelupNumNewArray); break; }
                case "show_condition": { luaValue.SetValue(this.ShowConditionArray); break; }
                case "video": { luaValue.SetValue(this.Video); break; }
                case "tryReward": { luaValue.SetValue(this.TryReward); break; }
                case "showType": { luaValue.SetValue(this.ShowType); break; }
                case "arms": { luaValue.SetValue(this.Arms); break; }
                case "skill_levelup_item_exchange": { luaValue.SetValue(this.SkillLevelupItemExchangeArray); break; }
                case "sculpture_round": { luaValue.SetValue(this.SculptureRound); break; }
                case "sound": { luaValue.SetValue(this.Sound); break; }
                case "story": { luaValue.SetValue(this.Story); break; }
                case "prefab_pve": { luaValue.SetValue(this.PrefabPve); break; }
                case "prefab_city": { luaValue.SetValue(this.PrefabCity); break; }
                case "show_server": { luaValue.SetValue(this.ShowServerArray); break; }
                case "shelter_stationed": { luaValue.SetValue(this.ShelterStationed); break; }
                case "hide_in_city": { luaValue.SetValue(this.HideInCity); break; }
                case "rarity_lottery": { luaValue.SetValue(this.RarityLottery); break; }
                case "tag_pic": { luaValue.SetValue(this.TagPic); break; }
                case "portrait": { luaValue.SetValue(this.Portrait); break; }
                case "recruit_front": { luaValue.SetValue(this.RecruitFront); break; }
                case "recruit_rear": { luaValue.SetValue(this.RecruitRear); break; }
                case "honor": { luaValue.SetValue(this.Honor); break; }

                default:
                    break;
            }

            return luaValue;
        }
        
        public override bool HasKey(string column)
        {
            bool result = false;

            switch (column)
            {
                case "id": { result = !this.IsEmpty(_datarow.Id); break; }
                case "name": { result = !this.IsEmpty(this.Name); break; }
                case "nickname": { result = !this.IsEmpty(this.Nickname); break; }
                case "sculpture": { result = !this.IsEmpty(this.Sculpture); break; }
                case "recruit_linshi": { result = !this.IsEmpty(this.RecruitLinshi); break; }
                case "avatar_icon": { result = !this.IsEmpty(this.AvatarIcon); break; }
                case "tujian_icon": { result = !this.IsEmpty(this.TujianIcon); break; }
                case "prefab": { result = !this.IsEmpty(this.Prefab); break; }
                case "prefab_high": { result = !this.IsEmpty(this.PrefabHigh); break; }
                case "size": { result = !this.IsEmpty(_datarow.Size); break; }
                case "handbook": { result = !this.IsEmpty(_datarow.Handbook); break; }
                case "order": { result = !this.IsEmpty(_datarow.Order); break; }
                case "quality_min": { result = !this.IsEmpty(_datarow.QualityMin); break; }
                case "quality_max": { result = !this.IsEmpty(_datarow.QualityMax); break; }
                case "poster": { result = !this.IsEmpty(_datarow.Poster); break; }
                case "rarity": { result = !this.IsEmpty(_datarow.Rarity); break; }
                case "camp": { result = !this.IsEmpty(_datarow.Camp); break; }
                case "Arms": { result = !this.IsEmpty(_datarow.Arms); break; }
                case "Label_1": { result = _datarow.Label1Length > 0; break; }
                case "Label_3": { result = _datarow.Label3Length > 0; break; }
                case "eat_speed": { result = !this.IsEmpty(_datarow.EatSpeed); break; }
                case "strength": { result = _datarow.StrengthLength > 0; break; }
                case "agility": { result = _datarow.AgilityLength > 0; break; }
                case "intelligence": { result = _datarow.IntelligenceLength > 0; break; }
                case "endurance": { result = _datarow.EnduranceLength > 0; break; }
                case "luck": { result = _datarow.LuckLength > 0; break; }
                case "skill": { result = _datarow.SkillLength > 0; break; }
                case "skill_unlock": { result = _datarow.SkillUnlockLength > 0; break; }
                case "skill_levelup_num": { result = _datarow.SkillLevelupNumLength > 0; break; }
                case "skill_levelup_item": { result = !this.IsEmpty(_datarow.SkillLevelupItem); break; }
                case "power_para": { result = _datarow.PowerParaLength > 0; break; }
                case "position": { result = !this.IsEmpty(_datarow.Position); break; }
                case "robot": { result = !this.IsEmpty(_datarow.Robot); break; }
                case "promote": { result = _datarow.PromoteLength > 0; break; }
                case "avatar_spine": { result = !this.IsEmpty(this.AvatarSpine); break; }
                case "work_sculpture": { result = !this.IsEmpty(this.WorkSculpture); break; }
                case "TujianIcon2": { result = !this.IsEmpty(this.TujianIcon2); break; }
                case "skill_levelup_num_new": { result = _datarow.SkillLevelupNumNewLength > 0; break; }
                case "show_condition": { result = _datarow.ShowConditionLength > 0; break; }
                case "video": { result = !this.IsEmpty(this.Video); break; }
                case "tryReward": { result = !this.IsEmpty(_datarow.TryReward); break; }
                case "showType": { result = !this.IsEmpty(_datarow.ShowType); break; }
                case "arms": { result = !this.IsEmpty(_datarow.Arms); break; }
                case "skill_levelup_item_exchange": { result = _datarow.SkillLevelupItemExchangeLength > 0; break; }
                case "sculpture_round": { result = !this.IsEmpty(this.SculptureRound); break; }
                case "sound": { result = !this.IsEmpty(_datarow.Sound); break; }
                case "story": { result = !this.IsEmpty(_datarow.Story); break; }
                case "prefab_pve": { result = !this.IsEmpty(this.PrefabPve); break; }
                case "prefab_city": { result = !this.IsEmpty(this.PrefabCity); break; }
                case "show_server": { result = _datarow.ShowServerLength > 0; break; }
                case "shelter_stationed": { result = !this.IsEmpty(_datarow.ShelterStationed); break; }
                case "hide_in_city": { result = !this.IsEmpty(_datarow.HideInCity); break; }
                case "rarity_lottery": { result = !this.IsEmpty(this.RarityLottery); break; }
                case "tag_pic": { result = !this.IsEmpty(this.TagPic); break; }
                case "portrait": { result = !this.IsEmpty(this.Portrait); break; }
                case "recruit_front": { result = !this.IsEmpty(this.RecruitFront); break; }
                case "recruit_rear": { result = !this.IsEmpty(this.RecruitRear); break; }
                case "honor": { result = !this.IsEmpty(this.Honor); break; }

                default:
                    break;
            }

            return result;
        }
        
        public int Id { get { return this.GetTableInt(_datarow.Id); } }

        private string _Name = null;
        public string Name { get { if (null == _Name) _Name = _datarow.Name; return _Name; } }

        private string _Nickname = null;
        public string Nickname { get { if (null == _Nickname) _Nickname = _datarow.Nickname; return _Nickname; } }

        private string _Sculpture = null;
        public string Sculpture { get { if (null == _Sculpture) _Sculpture = _datarow.Sculpture; return _Sculpture; } }

        private string _RecruitLinshi = null;
        public string RecruitLinshi { get { if (null == _RecruitLinshi) _RecruitLinshi = _datarow.RecruitLinshi; return _RecruitLinshi; } }

        private string _AvatarIcon = null;
        public string AvatarIcon { get { if (null == _AvatarIcon) _AvatarIcon = _datarow.AvatarIcon; return _AvatarIcon; } }

        private string _TujianIcon = null;
        public string TujianIcon { get { if (null == _TujianIcon) _TujianIcon = _datarow.TujianIcon; return _TujianIcon; } }

        private string _Prefab = null;
        public string Prefab { get { if (null == _Prefab) _Prefab = _datarow.Prefab; return _Prefab; } }

        private string _PrefabHigh = null;
        public string PrefabHigh { get { if (null == _PrefabHigh) _PrefabHigh = _datarow.PrefabHigh; return _PrefabHigh; } }

        public float Size { get { return this.GetTableFloat(_datarow.Size); } }

        public int Handbook { get { return this.GetTableInt(_datarow.Handbook); } }

        public int Order { get { return this.GetTableInt(_datarow.Order); } }

        public int QualityMin { get { return this.GetTableInt(_datarow.QualityMin); } }

        public int QualityMax { get { return this.GetTableInt(_datarow.QualityMax); } }

        public int Poster { get { return this.GetTableInt(_datarow.Poster); } }

        public int Rarity { get { return this.GetTableInt(_datarow.Rarity); } }

        public int Camp { get { return this.GetTableInt(_datarow.Camp); } }

        public int Arms { get { return this.GetTableInt(_datarow.Arms); } }

        private int[] _Label1Array = null;
        public int[] Label1Array { get { if (null == _Label1Array) _Label1Array = _datarow.GetLabel1Array(); return _Label1Array; } }
        public int Label1ArrayLength { get { if (null == this.Label1Array) return 0; return this.Label1Array.Length; } }

        private int[] _Label3Array = null;
        public int[] Label3Array { get { if (null == _Label3Array) _Label3Array = _datarow.GetLabel3Array(); return _Label3Array; } }
        public int Label3ArrayLength { get { if (null == this.Label3Array) return 0; return this.Label3Array.Length; } }

        public int EatSpeed { get { return this.GetTableInt(_datarow.EatSpeed); } }

        private string[] _StrengthArray = null;
        public string[] StrengthArray { get { if(null == _StrengthArray) { if (_datarow.StrengthLength > 0) { _StrengthArray = new string[_datarow.StrengthLength]; for (int i = 0; i < _datarow.StrengthLength; i++) { _StrengthArray[i] = _datarow.Strength(i); } } } return _StrengthArray; } }
        public int StrengthArrayLength { get { if (null == this.StrengthArray) return 0; return this.StrengthArray.Length; } }

        private Dictionary<string, string> _StrengthDic = null;
        public Dictionary<string, string> StrengthDic { get { if(null == _StrengthDic) { _StrengthDic = new Dictionary<string, string>(); if(StrengthArrayLength > 0) { for(int i = 0; i < StrengthArrayLength; i++) { string[] array = StrengthArray[i].Split(split_chars); if(array.Length > 1) { string key = array[0]; if (!_StrengthDic.ContainsKey(key)) _StrengthDic.Add(array[0], array[1]); } } } } return _StrengthDic; } }

        private string[] _AgilityArray = null;
        public string[] AgilityArray { get { if(null == _AgilityArray) { if (_datarow.AgilityLength > 0) { _AgilityArray = new string[_datarow.AgilityLength]; for (int i = 0; i < _datarow.AgilityLength; i++) { _AgilityArray[i] = _datarow.Agility(i); } } } return _AgilityArray; } }
        public int AgilityArrayLength { get { if (null == this.AgilityArray) return 0; return this.AgilityArray.Length; } }

        private Dictionary<string, string> _AgilityDic = null;
        public Dictionary<string, string> AgilityDic { get { if(null == _AgilityDic) { _AgilityDic = new Dictionary<string, string>(); if(AgilityArrayLength > 0) { for(int i = 0; i < AgilityArrayLength; i++) { string[] array = AgilityArray[i].Split(split_chars); if(array.Length > 1) { string key = array[0]; if (!_AgilityDic.ContainsKey(key)) _AgilityDic.Add(array[0], array[1]); } } } } return _AgilityDic; } }

        private string[] _IntelligenceArray = null;
        public string[] IntelligenceArray { get { if(null == _IntelligenceArray) { if (_datarow.IntelligenceLength > 0) { _IntelligenceArray = new string[_datarow.IntelligenceLength]; for (int i = 0; i < _datarow.IntelligenceLength; i++) { _IntelligenceArray[i] = _datarow.Intelligence(i); } } } return _IntelligenceArray; } }
        public int IntelligenceArrayLength { get { if (null == this.IntelligenceArray) return 0; return this.IntelligenceArray.Length; } }

        private Dictionary<string, string> _IntelligenceDic = null;
        public Dictionary<string, string> IntelligenceDic { get { if(null == _IntelligenceDic) { _IntelligenceDic = new Dictionary<string, string>(); if(IntelligenceArrayLength > 0) { for(int i = 0; i < IntelligenceArrayLength; i++) { string[] array = IntelligenceArray[i].Split(split_chars); if(array.Length > 1) { string key = array[0]; if (!_IntelligenceDic.ContainsKey(key)) _IntelligenceDic.Add(array[0], array[1]); } } } } return _IntelligenceDic; } }

        private string[] _EnduranceArray = null;
        public string[] EnduranceArray { get { if(null == _EnduranceArray) { if (_datarow.EnduranceLength > 0) { _EnduranceArray = new string[_datarow.EnduranceLength]; for (int i = 0; i < _datarow.EnduranceLength; i++) { _EnduranceArray[i] = _datarow.Endurance(i); } } } return _EnduranceArray; } }
        public int EnduranceArrayLength { get { if (null == this.EnduranceArray) return 0; return this.EnduranceArray.Length; } }

        private Dictionary<string, string> _EnduranceDic = null;
        public Dictionary<string, string> EnduranceDic { get { if(null == _EnduranceDic) { _EnduranceDic = new Dictionary<string, string>(); if(EnduranceArrayLength > 0) { for(int i = 0; i < EnduranceArrayLength; i++) { string[] array = EnduranceArray[i].Split(split_chars); if(array.Length > 1) { string key = array[0]; if (!_EnduranceDic.ContainsKey(key)) _EnduranceDic.Add(array[0], array[1]); } } } } return _EnduranceDic; } }

        private string[] _LuckArray = null;
        public string[] LuckArray { get { if(null == _LuckArray) { if (_datarow.LuckLength > 0) { _LuckArray = new string[_datarow.LuckLength]; for (int i = 0; i < _datarow.LuckLength; i++) { _LuckArray[i] = _datarow.Luck(i); } } } return _LuckArray; } }
        public int LuckArrayLength { get { if (null == this.LuckArray) return 0; return this.LuckArray.Length; } }

        private Dictionary<string, string> _LuckDic = null;
        public Dictionary<string, string> LuckDic { get { if(null == _LuckDic) { _LuckDic = new Dictionary<string, string>(); if(LuckArrayLength > 0) { for(int i = 0; i < LuckArrayLength; i++) { string[] array = LuckArray[i].Split(split_chars); if(array.Length > 1) { string key = array[0]; if (!_LuckDic.ContainsKey(key)) _LuckDic.Add(array[0], array[1]); } } } } return _LuckDic; } }

        private int[] _SkillArray = null;
        public int[] SkillArray { get { if (null == _SkillArray) _SkillArray = _datarow.GetSkillArray(); return _SkillArray; } }
        public int SkillArrayLength { get { if (null == this.SkillArray) return 0; return this.SkillArray.Length; } }

        private int[] _SkillUnlockArray = null;
        public int[] SkillUnlockArray { get { if (null == _SkillUnlockArray) _SkillUnlockArray = _datarow.GetSkillUnlockArray(); return _SkillUnlockArray; } }
        public int SkillUnlockArrayLength { get { if (null == this.SkillUnlockArray) return 0; return this.SkillUnlockArray.Length; } }

        private int[] _SkillLevelupNumArray = null;
        public int[] SkillLevelupNumArray { get { if (null == _SkillLevelupNumArray) _SkillLevelupNumArray = _datarow.GetSkillLevelupNumArray(); return _SkillLevelupNumArray; } }
        public int SkillLevelupNumArrayLength { get { if (null == this.SkillLevelupNumArray) return 0; return this.SkillLevelupNumArray.Length; } }

        public int SkillLevelupItem { get { return this.GetTableInt(_datarow.SkillLevelupItem); } }

        private int[] _PowerParaArray = null;
        public int[] PowerParaArray { get { if (null == _PowerParaArray) _PowerParaArray = _datarow.GetPowerParaArray(); return _PowerParaArray; } }
        public int PowerParaArrayLength { get { if (null == this.PowerParaArray) return 0; return this.PowerParaArray.Length; } }

        public int Position { get { return this.GetTableInt(_datarow.Position); } }

        public int Robot { get { return this.GetTableInt(_datarow.Robot); } }

        private string[] _PromoteArray = null;
        public string[] PromoteArray { get { if(null == _PromoteArray) { if (_datarow.PromoteLength > 0) { _PromoteArray = new string[_datarow.PromoteLength]; for (int i = 0; i < _datarow.PromoteLength; i++) { _PromoteArray[i] = _datarow.Promote(i); } } } return _PromoteArray; } }
        public int PromoteArrayLength { get { if (null == this.PromoteArray) return 0; return this.PromoteArray.Length; } }

        private string _AvatarSpine = null;
        public string AvatarSpine { get { if (null == _AvatarSpine) _AvatarSpine = _datarow.AvatarSpine; return _AvatarSpine; } }

        private string _WorkSculpture = null;
        public string WorkSculpture { get { if (null == _WorkSculpture) _WorkSculpture = _datarow.WorkSculpture; return _WorkSculpture; } }

        private string _TujianIcon2 = null;
        public string TujianIcon2 { get { if (null == _TujianIcon2) _TujianIcon2 = _datarow.TujianIcon2; return _TujianIcon2; } }

        private string[] _SkillLevelupNumNewArray = null;
        public string[] SkillLevelupNumNewArray { get { if(null == _SkillLevelupNumNewArray) { if (_datarow.SkillLevelupNumNewLength > 0) { _SkillLevelupNumNewArray = new string[_datarow.SkillLevelupNumNewLength]; for (int i = 0; i < _datarow.SkillLevelupNumNewLength; i++) { _SkillLevelupNumNewArray[i] = _datarow.SkillLevelupNumNew(i); } } } return _SkillLevelupNumNewArray; } }
        public int SkillLevelupNumNewArrayLength { get { if (null == this.SkillLevelupNumNewArray) return 0; return this.SkillLevelupNumNewArray.Length; } }

        private int[] _ShowConditionArray = null;
        public int[] ShowConditionArray { get { if (null == _ShowConditionArray) _ShowConditionArray = _datarow.GetShowConditionArray(); return _ShowConditionArray; } }
        public int ShowConditionArrayLength { get { if (null == this.ShowConditionArray) return 0; return this.ShowConditionArray.Length; } }

        private string _Video = null;
        public string Video { get { if (null == _Video) _Video = _datarow.Video; return _Video; } }

        public int TryReward { get { return this.GetTableInt(_datarow.TryReward); } }

        public int ShowType { get { return this.GetTableInt(_datarow.ShowType); } }

        public int Arms { get { return this.GetTableInt(_datarow.Arms); } }

        private int[] _SkillLevelupItemExchangeArray = null;
        public int[] SkillLevelupItemExchangeArray { get { if (null == _SkillLevelupItemExchangeArray) _SkillLevelupItemExchangeArray = _datarow.GetSkillLevelupItemExchangeArray(); return _SkillLevelupItemExchangeArray; } }
        public int SkillLevelupItemExchangeArrayLength { get { if (null == this.SkillLevelupItemExchangeArray) return 0; return this.SkillLevelupItemExchangeArray.Length; } }

        private string _SculptureRound = null;
        public string SculptureRound { get { if (null == _SculptureRound) _SculptureRound = _datarow.SculptureRound; return _SculptureRound; } }

        public int Sound { get { return this.GetTableInt(_datarow.Sound); } }

        public int Story { get { return this.GetTableInt(_datarow.Story); } }

        private string _PrefabPve = null;
        public string PrefabPve { get { if (null == _PrefabPve) _PrefabPve = _datarow.PrefabPve; return _PrefabPve; } }

        private string _PrefabCity = null;
        public string PrefabCity { get { if (null == _PrefabCity) _PrefabCity = _datarow.PrefabCity; return _PrefabCity; } }

        private string[] _ShowServerArray = null;
        public string[] ShowServerArray { get { if(null == _ShowServerArray) { if (_datarow.ShowServerLength > 0) { _ShowServerArray = new string[_datarow.ShowServerLength]; for (int i = 0; i < _datarow.ShowServerLength; i++) { _ShowServerArray[i] = _datarow.ShowServer(i); } } } return _ShowServerArray; } }
        public int ShowServerArrayLength { get { if (null == this.ShowServerArray) return 0; return this.ShowServerArray.Length; } }

        public int ShelterStationed { get { return this.GetTableInt(_datarow.ShelterStationed); } }

        public int HideInCity { get { return this.GetTableInt(_datarow.HideInCity); } }

        private string _RarityLottery = null;
        public string RarityLottery { get { if (null == _RarityLottery) _RarityLottery = _datarow.RarityLottery; return _RarityLottery; } }

        private string _TagPic = null;
        public string TagPic { get { if (null == _TagPic) _TagPic = _datarow.TagPic; return _TagPic; } }

        private string _Portrait = null;
        public string Portrait { get { if (null == _Portrait) _Portrait = _datarow.Portrait; return _Portrait; } }

        private string _RecruitFront = null;
        public string RecruitFront { get { if (null == _RecruitFront) _RecruitFront = _datarow.RecruitFront; return _RecruitFront; } }

        private string _RecruitRear = null;
        public string RecruitRear { get { if (null == _RecruitRear) _RecruitRear = _datarow.RecruitRear; return _RecruitRear; } }

        private string _Honor = null;
        public string Honor { get { if (null == _Honor) _Honor = _datarow.Honor; return _Honor; } }


    }

    #endregion DataRow
}