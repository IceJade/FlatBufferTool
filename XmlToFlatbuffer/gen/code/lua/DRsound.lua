-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRsound = {} -- the module
local DRsound_mt = {} -- the class metatable

function DRsound.New()
    local o = {}
    setmetatable(o, {__index = DRsound_mt})
    return o
end
function DRsound.GetRootAsDRsound(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRsound.New()
    o:Init(buf, n + offset)
    return o
end
function DRsound_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRsound_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRsound_mt:Loop()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRsound_mt:MaxDistance()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRsound_mt:Priority()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRsound_mt:Volume()
    local o = self.view:Offset(12)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Float32, o + self.view.pos)
    end
    return 0.0
end
function DRsound.Start(builder) builder:StartObject(5) end
function DRsound.AddId(builder, id) builder:PrependUOffsetTRelativeSlot(0, id, 0) end
function DRsound.AddLoop(builder, loop) builder:PrependInt32Slot(1, loop, 0) end
function DRsound.AddMaxDistance(builder, maxDistance) builder:PrependInt32Slot(2, maxDistance, 0) end
function DRsound.AddPriority(builder, priority) builder:PrependInt32Slot(3, priority, 0) end
function DRsound.AddVolume(builder, volume) builder:PrependFloat32Slot(4, volume, 0.0) end
function DRsound.End(builder) return builder:EndObject() end

return DRsound -- return the module