-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRheroes_camp = {} -- the module
local DRheroes_camp_mt = {} -- the class metatable

function DRheroes_camp.New()
    local o = {}
    setmetatable(o, {__index = DRheroes_camp_mt})
    return o
end
function DRheroes_camp.GetRootAsDRheroes_camp(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRheroes_camp.New()
    o:Init(buf, n + offset)
    return o
end
function DRheroes_camp_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRheroes_camp_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRheroes_camp_mt:Name()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:Des()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:KindIcon1()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:KindIcon2()
    local o = self.view:Offset(12)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:KindIcon3()
    local o = self.view:Offset(14)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:Icon()
    local o = self.view:Offset(16)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:CampScene()
    local o = self.view:Offset(18)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:ResultIcon()
    local o = self.view:Offset(20)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:Against()
    local o = self.view:Offset(22)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRheroes_camp_mt:BigIcon()
    local o = self.view:Offset(24)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:KindIcon4()
    local o = self.view:Offset(26)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:CampIcon()
    local o = self.view:Offset(28)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:NormalIcon()
    local o = self.view:Offset(30)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:ListIcon()
    local o = self.view:Offset(32)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:Order()
    local o = self.view:Offset(34)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRheroes_camp_mt:IconColor()
    local o = self.view:Offset(36)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRheroes_camp_mt:RestraintDes()
    local o = self.view:Offset(38)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRheroes_camp_mt:Effect(j)
    local o = self.view:Offset(40)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRheroes_camp_mt:EffectLength()
    local o = self.view:Offset(40)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRheroes_camp.Start(builder) builder:StartObject(19) end
function DRheroes_camp.AddId(builder, id) builder:PrependInt32Slot(0, id, 0) end
function DRheroes_camp.AddName(builder, name) builder:PrependUOffsetTRelativeSlot(1, name, 0) end
function DRheroes_camp.AddDes(builder, des) builder:PrependUOffsetTRelativeSlot(2, des, 0) end
function DRheroes_camp.AddKindIcon1(builder, kindIcon1) builder:PrependUOffsetTRelativeSlot(3, kindIcon1, 0) end
function DRheroes_camp.AddKindIcon2(builder, kindIcon2) builder:PrependUOffsetTRelativeSlot(4, kindIcon2, 0) end
function DRheroes_camp.AddKindIcon3(builder, kindIcon3) builder:PrependUOffsetTRelativeSlot(5, kindIcon3, 0) end
function DRheroes_camp.AddIcon(builder, icon) builder:PrependUOffsetTRelativeSlot(6, icon, 0) end
function DRheroes_camp.AddCampScene(builder, campScene) builder:PrependUOffsetTRelativeSlot(7, campScene, 0) end
function DRheroes_camp.AddResultIcon(builder, resultIcon) builder:PrependUOffsetTRelativeSlot(8, resultIcon, 0) end
function DRheroes_camp.AddAgainst(builder, against) builder:PrependInt32Slot(9, against, 0) end
function DRheroes_camp.AddBigIcon(builder, bigIcon) builder:PrependUOffsetTRelativeSlot(10, bigIcon, 0) end
function DRheroes_camp.AddKindIcon4(builder, kindIcon4) builder:PrependUOffsetTRelativeSlot(11, kindIcon4, 0) end
function DRheroes_camp.AddCampIcon(builder, campIcon) builder:PrependUOffsetTRelativeSlot(12, campIcon, 0) end
function DRheroes_camp.AddNormalIcon(builder, normalIcon) builder:PrependUOffsetTRelativeSlot(13, normalIcon, 0) end
function DRheroes_camp.AddListIcon(builder, listIcon) builder:PrependUOffsetTRelativeSlot(14, listIcon, 0) end
function DRheroes_camp.AddOrder(builder, order) builder:PrependInt32Slot(15, order, 0) end
function DRheroes_camp.AddIconColor(builder, iconColor) builder:PrependUOffsetTRelativeSlot(16, iconColor, 0) end
function DRheroes_camp.AddRestraintDes(builder, restraintDes) builder:PrependInt32Slot(17, restraintDes, 0) end
function DRheroes_camp.AddEffect(builder, effect) builder:PrependUOffsetTRelativeSlot(18, effect, 0) end
function DRheroes_camp.StartEffectVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRheroes_camp.End(builder) return builder:EndObject() end

return DRheroes_camp -- return the module