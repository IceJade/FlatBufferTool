-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRbuilding = {} -- the module
local DRbuilding_mt = {} -- the class metatable

function DRbuilding.New()
    local o = {}
    setmetatable(o, {__index = DRbuilding_mt})
    return o
end
function DRbuilding.GetRootAsDRbuilding(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRbuilding.New()
    o:Init(buf, n + offset)
    return o
end
function DRbuilding_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRbuilding_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Name()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:Description()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:StationName()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:SmallIcon()
    local o = self.view:Offset(12)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:CharAlies()
    local o = self.view:Offset(14)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Information(j)
    local o = self.view:Offset(16)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:InformationLength()
    local o = self.view:Offset(16)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:Type()
    local o = self.view:Offset(18)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:MaxLevel()
    local o = self.view:Offset(20)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Num()
    local o = self.view:Offset(22)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Tiles()
    local o = self.view:Offset(24)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Floor()
    local o = self.view:Offset(26)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Power(j)
    local o = self.view:Offset(28)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function DRbuilding_mt:PowerLength()
    local o = self.view:Offset(28)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:Pic()
    local o = self.view:Offset(30)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:Prefab(j)
    local o = self.view:Offset(32)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:PrefabLength()
    local o = self.view:Offset(32)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:PrefabWorld(j)
    local o = self.view:Offset(34)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:PrefabWorldLength()
    local o = self.view:Offset(34)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:TabType()
    local o = self.view:Offset(36)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:BuildingList()
    local o = self.view:Offset(38)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Order()
    local o = self.view:Offset(40)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Edit()
    local o = self.view:Offset(42)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Time()
    local o = self.view:Offset(44)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:PutConsume(j)
    local o = self.view:Offset(46)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:PutConsumeLength()
    local o = self.view:Offset(46)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:PowerDissipation(j)
    local o = self.view:Offset(48)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Float32, a + ((j-1) * 4))
    end
    return 0
end
function DRbuilding_mt:PowerDissipationLength()
    local o = self.view:Offset(48)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:LackResource()
    local o = self.view:Offset(50)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Para10()
    local o = self.view:Offset(52)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:StationMax()
    local o = self.view:Offset(54)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Intelligence(j)
    local o = self.view:Offset(56)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:IntelligenceLength()
    local o = self.view:Offset(56)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:Destip()
    local o = self.view:Offset(58)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:StationType()
    local o = self.view:Offset(60)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Exp()
    local o = self.view:Offset(62)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:UnlockNum(j)
    local o = self.view:Offset(64)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:UnlockNumLength()
    local o = self.view:Offset(64)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:UnlockPopulation(j)
    local o = self.view:Offset(66)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:UnlockPopulationLength()
    local o = self.view:Offset(66)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:StoreLimit()
    local o = self.view:Offset(68)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:NeedScience()
    local o = self.view:Offset(70)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Agility(j)
    local o = self.view:Offset(72)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:AgilityLength()
    local o = self.view:Offset(72)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:Rush()
    local o = self.view:Offset(74)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:UnlockQuest()
    local o = self.view:Offset(76)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Endurance(j)
    local o = self.view:Offset(78)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:EnduranceLength()
    local o = self.view:Offset(78)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:Building(j)
    local o = self.view:Offset(80)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:BuildingLength()
    local o = self.view:Offset(80)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:GiftId()
    local o = self.view:Offset(82)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:Strength(j)
    local o = self.view:Offset(84)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:StrengthLength()
    local o = self.view:Offset(84)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:Para2()
    local o = self.view:Offset(86)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:Para3()
    local o = self.view:Offset(88)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:FixedLocation(j)
    local o = self.view:Offset(90)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:FixedLocationLength()
    local o = self.view:Offset(90)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:Para1()
    local o = self.view:Offset(92)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:Para5()
    local o = self.view:Offset(94)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:Luck(j)
    local o = self.view:Offset(96)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:LuckLength()
    local o = self.view:Offset(96)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:OpenArms(j)
    local o = self.view:Offset(98)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:OpenArmsLength()
    local o = self.view:Offset(98)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:UnlockEffect()
    local o = self.view:Offset(100)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:InBuilding(j)
    local o = self.view:Offset(102)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function DRbuilding_mt:InBuildingLength()
    local o = self.view:Offset(102)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:DestroyHero()
    local o = self.view:Offset(104)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:UnlockEdit(j)
    local o = self.view:Offset(106)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRbuilding_mt:UnlockEditLength()
    local o = self.view:Offset(106)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:QuestInterfaceId()
    local o = self.view:Offset(108)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:Drawing()
    local o = self.view:Offset(110)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:ThumbIcon()
    local o = self.view:Offset(112)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:MonthCard()
    local o = self.view:Offset(114)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:WorkBdPic()
    local o = self.view:Offset(116)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:UpBdPic()
    local o = self.view:Offset(118)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:DescriptionSimple()
    local o = self.view:Offset(120)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRbuilding_mt:FoodShow(j)
    local o = self.view:Offset(122)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function DRbuilding_mt:FoodShowLength()
    local o = self.view:Offset(122)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding_mt:UnlockSeason()
    local o = self.view:Offset(124)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRbuilding_mt:UnlockOrder(j)
    local o = self.view:Offset(126)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function DRbuilding_mt:UnlockOrderLength()
    local o = self.view:Offset(126)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRbuilding.Start(builder) builder:StartObject(62) end
function DRbuilding.AddId(builder, id) builder:PrependInt32Slot(0, id, 0) end
function DRbuilding.AddName(builder, name) builder:PrependUOffsetTRelativeSlot(1, name, 0) end
function DRbuilding.AddDescription(builder, description) builder:PrependUOffsetTRelativeSlot(2, description, 0) end
function DRbuilding.AddStationName(builder, stationName) builder:PrependInt32Slot(3, stationName, 0) end
function DRbuilding.AddSmallIcon(builder, smallIcon) builder:PrependUOffsetTRelativeSlot(4, smallIcon, 0) end
function DRbuilding.AddCharAlies(builder, charAlies) builder:PrependInt32Slot(5, charAlies, 0) end
function DRbuilding.AddInformation(builder, information) builder:PrependUOffsetTRelativeSlot(6, information, 0) end
function DRbuilding.StartInformationVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddType(builder, type) builder:PrependInt32Slot(7, type, 0) end
function DRbuilding.AddMaxLevel(builder, maxLevel) builder:PrependInt32Slot(8, maxLevel, 0) end
function DRbuilding.AddNum(builder, num) builder:PrependInt32Slot(9, num, 0) end
function DRbuilding.AddTiles(builder, tiles) builder:PrependInt32Slot(10, tiles, 0) end
function DRbuilding.AddFloor(builder, floor) builder:PrependInt32Slot(11, floor, 0) end
function DRbuilding.AddPower(builder, power) builder:PrependUOffsetTRelativeSlot(12, power, 0) end
function DRbuilding.StartPowerVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddPic(builder, pic) builder:PrependUOffsetTRelativeSlot(13, pic, 0) end
function DRbuilding.AddPrefab(builder, prefab) builder:PrependUOffsetTRelativeSlot(14, prefab, 0) end
function DRbuilding.StartPrefabVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddPrefabWorld(builder, prefabWorld) builder:PrependUOffsetTRelativeSlot(15, prefabWorld, 0) end
function DRbuilding.StartPrefabWorldVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddTabType(builder, tabType) builder:PrependInt32Slot(16, tabType, 0) end
function DRbuilding.AddBuildingList(builder, buildingList) builder:PrependInt32Slot(17, buildingList, 0) end
function DRbuilding.AddOrder(builder, order) builder:PrependInt32Slot(18, order, 0) end
function DRbuilding.AddEdit(builder, edit) builder:PrependInt32Slot(19, edit, 0) end
function DRbuilding.AddTime(builder, time) builder:PrependInt32Slot(20, time, 0) end
function DRbuilding.AddPutConsume(builder, putConsume) builder:PrependUOffsetTRelativeSlot(21, putConsume, 0) end
function DRbuilding.StartPutConsumeVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddPowerDissipation(builder, powerDissipation) builder:PrependUOffsetTRelativeSlot(22, powerDissipation, 0) end
function DRbuilding.StartPowerDissipationVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddLackResource(builder, lackResource) builder:PrependInt32Slot(23, lackResource, 0) end
function DRbuilding.AddPara10(builder, para10) builder:PrependUOffsetTRelativeSlot(24, para10, 0) end
function DRbuilding.AddStationMax(builder, stationMax) builder:PrependInt32Slot(25, stationMax, 0) end
function DRbuilding.AddIntelligence(builder, intelligence) builder:PrependUOffsetTRelativeSlot(26, intelligence, 0) end
function DRbuilding.StartIntelligenceVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddDestip(builder, destip) builder:PrependInt32Slot(27, destip, 0) end
function DRbuilding.AddStationType(builder, stationType) builder:PrependInt32Slot(28, stationType, 0) end
function DRbuilding.AddExp(builder, exp) builder:PrependInt32Slot(29, exp, 0) end
function DRbuilding.AddUnlockNum(builder, unlockNum) builder:PrependUOffsetTRelativeSlot(30, unlockNum, 0) end
function DRbuilding.StartUnlockNumVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddUnlockPopulation(builder, unlockPopulation) builder:PrependUOffsetTRelativeSlot(31, unlockPopulation, 0) end
function DRbuilding.StartUnlockPopulationVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddStoreLimit(builder, storeLimit) builder:PrependInt32Slot(32, storeLimit, 0) end
function DRbuilding.AddNeedScience(builder, needScience) builder:PrependInt32Slot(33, needScience, 0) end
function DRbuilding.AddAgility(builder, agility) builder:PrependUOffsetTRelativeSlot(34, agility, 0) end
function DRbuilding.StartAgilityVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddRush(builder, rush) builder:PrependInt32Slot(35, rush, 0) end
function DRbuilding.AddUnlockQuest(builder, unlockQuest) builder:PrependInt32Slot(36, unlockQuest, 0) end
function DRbuilding.AddEndurance(builder, endurance) builder:PrependUOffsetTRelativeSlot(37, endurance, 0) end
function DRbuilding.StartEnduranceVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddBuilding(builder, building) builder:PrependUOffsetTRelativeSlot(38, building, 0) end
function DRbuilding.StartBuildingVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddGiftId(builder, giftId) builder:PrependUOffsetTRelativeSlot(39, giftId, 0) end
function DRbuilding.AddStrength(builder, strength) builder:PrependUOffsetTRelativeSlot(40, strength, 0) end
function DRbuilding.StartStrengthVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddPara2(builder, para2) builder:PrependUOffsetTRelativeSlot(41, para2, 0) end
function DRbuilding.AddPara3(builder, para3) builder:PrependUOffsetTRelativeSlot(42, para3, 0) end
function DRbuilding.AddFixedLocation(builder, fixedLocation) builder:PrependUOffsetTRelativeSlot(43, fixedLocation, 0) end
function DRbuilding.StartFixedLocationVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddPara1(builder, para1) builder:PrependUOffsetTRelativeSlot(44, para1, 0) end
function DRbuilding.AddPara5(builder, para5) builder:PrependUOffsetTRelativeSlot(45, para5, 0) end
function DRbuilding.AddLuck(builder, luck) builder:PrependUOffsetTRelativeSlot(46, luck, 0) end
function DRbuilding.StartLuckVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddOpenArms(builder, openArms) builder:PrependUOffsetTRelativeSlot(47, openArms, 0) end
function DRbuilding.StartOpenArmsVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddUnlockEffect(builder, unlockEffect) builder:PrependInt32Slot(48, unlockEffect, 0) end
function DRbuilding.AddInBuilding(builder, inBuilding) builder:PrependUOffsetTRelativeSlot(49, inBuilding, 0) end
function DRbuilding.StartInBuildingVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddDestroyHero(builder, destroyHero) builder:PrependInt32Slot(50, destroyHero, 0) end
function DRbuilding.AddUnlockEdit(builder, UnlockEdit) builder:PrependUOffsetTRelativeSlot(51, UnlockEdit, 0) end
function DRbuilding.StartUnlockEditVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddQuestInterfaceId(builder, questInterfaceId) builder:PrependInt32Slot(52, questInterfaceId, 0) end
function DRbuilding.AddDrawing(builder, drawing) builder:PrependInt32Slot(53, drawing, 0) end
function DRbuilding.AddThumbIcon(builder, thumbIcon) builder:PrependUOffsetTRelativeSlot(54, thumbIcon, 0) end
function DRbuilding.AddMonthCard(builder, monthCard) builder:PrependInt32Slot(55, monthCard, 0) end
function DRbuilding.AddWorkBdPic(builder, workBdPic) builder:PrependUOffsetTRelativeSlot(56, workBdPic, 0) end
function DRbuilding.AddUpBdPic(builder, upBdPic) builder:PrependUOffsetTRelativeSlot(57, upBdPic, 0) end
function DRbuilding.AddDescriptionSimple(builder, descriptionSimple) builder:PrependUOffsetTRelativeSlot(58, descriptionSimple, 0) end
function DRbuilding.AddFoodShow(builder, foodShow) builder:PrependUOffsetTRelativeSlot(59, foodShow, 0) end
function DRbuilding.StartFoodShowVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.AddUnlockSeason(builder, unlockSeason) builder:PrependInt32Slot(60, unlockSeason, 0) end
function DRbuilding.AddUnlockOrder(builder, unlockOrder) builder:PrependUOffsetTRelativeSlot(61, unlockOrder, 0) end
function DRbuilding.StartUnlockOrderVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRbuilding.End(builder) return builder:EndObject() end

return DRbuilding -- return the module