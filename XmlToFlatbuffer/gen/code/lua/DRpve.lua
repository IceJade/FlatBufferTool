-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRpve = {} -- the module
local DRpve_mt = {} -- the class metatable

function DRpve.New()
    local o = {}
    setmetatable(o, {__index = DRpve_mt})
    return o
end
function DRpve.GetRootAsDRpve(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRpve.New()
    o:Init(buf, n + offset)
    return o
end
function DRpve_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRpve_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRpve_mt:Area()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRpve_mt:Level()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRpve_mt:RewardShow(j)
    local o = self.view:Offset(10)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function DRpve_mt:RewardShowLength()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRpve_mt:BattleGround()
    local o = self.view:Offset(12)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRpve_mt:ArmyShow()
    local o = self.view:Offset(14)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRpve_mt:RoutePointId()
    local o = self.view:Offset(16)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRpve_mt:ExploreMax()
    local o = self.view:Offset(18)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRpve.Start(builder) builder:StartObject(8) end
function DRpve.AddId(builder, id) builder:PrependInt32Slot(0, id, 0) end
function DRpve.AddArea(builder, area) builder:PrependInt32Slot(1, area, 0) end
function DRpve.AddLevel(builder, level) builder:PrependInt32Slot(2, level, 0) end
function DRpve.AddRewardShow(builder, rewardShow) builder:PrependUOffsetTRelativeSlot(3, rewardShow, 0) end
function DRpve.StartRewardShowVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRpve.AddBattleGround(builder, battleGround) builder:PrependUOffsetTRelativeSlot(4, battleGround, 0) end
function DRpve.AddArmyShow(builder, armyShow) builder:PrependInt32Slot(5, armyShow, 0) end
function DRpve.AddRoutePointId(builder, routePointId) builder:PrependInt32Slot(6, routePointId, 0) end
function DRpve.AddExploreMax(builder, exploreMax) builder:PrependInt32Slot(7, exploreMax, 0) end
function DRpve.End(builder) return builder:EndObject() end

return DRpve -- return the module