-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRgoods = {} -- the module
local DRgoods_mt = {} -- the class metatable

function DRgoods.New()
    local o = {}
    setmetatable(o, {__index = DRgoods_mt})
    return o
end
function DRgoods.GetRootAsDRgoods(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRgoods.New()
    o:Init(buf, n + offset)
    return o
end
function DRgoods_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRgoods_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Name()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:Description()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:Icon()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:Type()
    local o = self.view:Offset(12)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Color()
    local o = self.view:Offset(14)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Lv()
    local o = self.view:Offset(16)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:LvLimit()
    local o = self.view:Offset(18)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Page()
    local o = self.view:Offset(20)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Pages()
    local o = self.view:Offset(22)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:PackTabType()
    local o = self.view:Offset(24)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Use()
    local o = self.view:Offset(26)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:OrderNum()
    local o = self.view:Offset(28)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:StoreOrder()
    local o = self.view:Offset(30)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Price()
    local o = self.view:Offset(32)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:PriceHot()
    local o = self.view:Offset(34)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:IsGift()
    local o = self.view:Offset(36)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Sales(j)
    local o = self.view:Offset(38)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRgoods_mt:SalesLength()
    local o = self.view:Offset(38)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRgoods_mt:AllianceOrder()
    local o = self.view:Offset(40)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:PriceAll()
    local o = self.view:Offset(42)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Type2()
    local o = self.view:Offset(44)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Useall()
    local o = self.view:Offset(46)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Para1()
    local o = self.view:Offset(48)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:NameValue(j)
    local o = self.view:Offset(50)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRgoods_mt:NameValueLength()
    local o = self.view:Offset(50)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRgoods_mt:Para()
    local o = self.view:Offset(52)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:Para3()
    local o = self.view:Offset(54)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:Pagehot()
    local o = self.view:Offset(56)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:SaveLoc()
    local o = self.view:Offset(58)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:GroupNum()
    local o = self.view:Offset(60)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Weight()
    local o = self.view:Offset(62)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:DesPara()
    local o = self.view:Offset(64)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:IsShow()
    local o = self.view:Offset(66)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Para2()
    local o = self.view:Offset(68)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:IconLoc(j)
    local o = self.view:Offset(70)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRgoods_mt:IconLocLength()
    local o = self.view:Offset(70)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRgoods_mt:Para4()
    local o = self.view:Offset(72)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:Heroid()
    local o = self.view:Offset(74)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:DenyBuy()
    local o = self.view:Offset(76)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:AutoOpen()
    local o = self.view:Offset(78)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:GoTo(j)
    local o = self.view:Offset(80)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function DRgoods_mt:GoToLength()
    local o = self.view:Offset(80)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRgoods_mt:Para5()
    local o = self.view:Offset(82)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRgoods_mt:NotGift()
    local o = self.view:Offset(84)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:OpenEffect()
    local o = self.view:Offset(86)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:AllianceLvLimit()
    local o = self.view:Offset(88)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Rate(j)
    local o = self.view:Offset(90)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRgoods_mt:RateLength()
    local o = self.view:Offset(90)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRgoods_mt:RecycleGoods(j)
    local o = self.view:Offset(92)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function DRgoods_mt:RecycleGoodsLength()
    local o = self.view:Offset(92)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRgoods_mt:BuyTimesLimit()
    local o = self.view:Offset(94)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Usemax()
    local o = self.view:Offset(96)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:UseCondition()
    local o = self.view:Offset(98)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:Bauxite()
    local o = self.view:Offset(100)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:RecyclingAllianceScore()
    local o = self.view:Offset(102)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods_mt:IsSend()
    local o = self.view:Offset(104)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRgoods.Start(builder) builder:StartObject(51) end
function DRgoods.AddId(builder, id) builder:PrependInt32Slot(0, id, 0) end
function DRgoods.AddName(builder, name) builder:PrependUOffsetTRelativeSlot(1, name, 0) end
function DRgoods.AddDescription(builder, description) builder:PrependUOffsetTRelativeSlot(2, description, 0) end
function DRgoods.AddIcon(builder, icon) builder:PrependUOffsetTRelativeSlot(3, icon, 0) end
function DRgoods.AddType(builder, type) builder:PrependInt32Slot(4, type, 0) end
function DRgoods.AddColor(builder, color) builder:PrependInt32Slot(5, color, 0) end
function DRgoods.AddLv(builder, lv) builder:PrependInt32Slot(6, lv, 0) end
function DRgoods.AddLvLimit(builder, lvLimit) builder:PrependInt32Slot(7, lvLimit, 0) end
function DRgoods.AddPage(builder, page) builder:PrependInt32Slot(8, page, 0) end
function DRgoods.AddPages(builder, pages) builder:PrependInt32Slot(9, pages, 0) end
function DRgoods.AddPackTabType(builder, packTabType) builder:PrependInt32Slot(10, packTabType, 0) end
function DRgoods.AddUse(builder, use) builder:PrependInt32Slot(11, use, 0) end
function DRgoods.AddOrderNum(builder, orderNum) builder:PrependInt32Slot(12, orderNum, 0) end
function DRgoods.AddStoreOrder(builder, storeOrder) builder:PrependInt32Slot(13, storeOrder, 0) end
function DRgoods.AddPrice(builder, price) builder:PrependInt32Slot(14, price, 0) end
function DRgoods.AddPriceHot(builder, priceHot) builder:PrependInt32Slot(15, priceHot, 0) end
function DRgoods.AddIsGift(builder, isGift) builder:PrependInt32Slot(16, isGift, 0) end
function DRgoods.AddSales(builder, sales) builder:PrependUOffsetTRelativeSlot(17, sales, 0) end
function DRgoods.StartSalesVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRgoods.AddAllianceOrder(builder, allianceOrder) builder:PrependInt32Slot(18, allianceOrder, 0) end
function DRgoods.AddPriceAll(builder, priceAll) builder:PrependInt32Slot(19, priceAll, 0) end
function DRgoods.AddType2(builder, type2) builder:PrependInt32Slot(20, type2, 0) end
function DRgoods.AddUseall(builder, useall) builder:PrependInt32Slot(21, useall, 0) end
function DRgoods.AddPara1(builder, para1) builder:PrependUOffsetTRelativeSlot(22, para1, 0) end
function DRgoods.AddNameValue(builder, nameValue) builder:PrependUOffsetTRelativeSlot(23, nameValue, 0) end
function DRgoods.StartNameValueVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRgoods.AddPara(builder, para) builder:PrependUOffsetTRelativeSlot(24, para, 0) end
function DRgoods.AddPara3(builder, para3) builder:PrependUOffsetTRelativeSlot(25, para3, 0) end
function DRgoods.AddPagehot(builder, pagehot) builder:PrependInt32Slot(26, pagehot, 0) end
function DRgoods.AddSaveLoc(builder, saveLoc) builder:PrependInt32Slot(27, saveLoc, 0) end
function DRgoods.AddGroupNum(builder, groupNum) builder:PrependInt32Slot(28, groupNum, 0) end
function DRgoods.AddWeight(builder, weight) builder:PrependInt32Slot(29, weight, 0) end
function DRgoods.AddDesPara(builder, desPara) builder:PrependInt32Slot(30, desPara, 0) end
function DRgoods.AddIsShow(builder, isShow) builder:PrependInt32Slot(31, isShow, 0) end
function DRgoods.AddPara2(builder, para2) builder:PrependUOffsetTRelativeSlot(32, para2, 0) end
function DRgoods.AddIconLoc(builder, iconLoc) builder:PrependUOffsetTRelativeSlot(33, iconLoc, 0) end
function DRgoods.StartIconLocVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRgoods.AddPara4(builder, para4) builder:PrependUOffsetTRelativeSlot(34, para4, 0) end
function DRgoods.AddHeroid(builder, heroid) builder:PrependInt32Slot(35, heroid, 0) end
function DRgoods.AddDenyBuy(builder, denyBuy) builder:PrependInt32Slot(36, denyBuy, 0) end
function DRgoods.AddAutoOpen(builder, autoOpen) builder:PrependInt32Slot(37, autoOpen, 0) end
function DRgoods.AddGoTo(builder, goTo) builder:PrependUOffsetTRelativeSlot(38, goTo, 0) end
function DRgoods.StartGoToVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRgoods.AddPara5(builder, para5) builder:PrependUOffsetTRelativeSlot(39, para5, 0) end
function DRgoods.AddNotGift(builder, notGift) builder:PrependInt32Slot(40, notGift, 0) end
function DRgoods.AddOpenEffect(builder, openEffect) builder:PrependInt32Slot(41, openEffect, 0) end
function DRgoods.AddAllianceLvLimit(builder, allianceLvLimit) builder:PrependInt32Slot(42, allianceLvLimit, 0) end
function DRgoods.AddRate(builder, rate) builder:PrependUOffsetTRelativeSlot(43, rate, 0) end
function DRgoods.StartRateVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRgoods.AddRecycleGoods(builder, recycleGoods) builder:PrependUOffsetTRelativeSlot(44, recycleGoods, 0) end
function DRgoods.StartRecycleGoodsVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRgoods.AddBuyTimesLimit(builder, buyTimesLimit) builder:PrependInt32Slot(45, buyTimesLimit, 0) end
function DRgoods.AddUsemax(builder, usemax) builder:PrependInt32Slot(46, usemax, 0) end
function DRgoods.AddUseCondition(builder, useCondition) builder:PrependInt32Slot(47, useCondition, 0) end
function DRgoods.AddBauxite(builder, bauxite) builder:PrependInt32Slot(48, bauxite, 0) end
function DRgoods.AddRecyclingAllianceScore(builder, recyclingAllianceScore) builder:PrependInt32Slot(49, recyclingAllianceScore, 0) end
function DRgoods.AddIsSend(builder, isSend) builder:PrependInt32Slot(50, isSend, 0) end
function DRgoods.End(builder) return builder:EndObject() end

return DRgoods -- return the module