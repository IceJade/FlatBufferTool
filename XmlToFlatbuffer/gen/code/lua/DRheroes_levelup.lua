-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRheroes_levelup = {} -- the module
local DRheroes_levelup_mt = {} -- the class metatable

function DRheroes_levelup.New()
    local o = {}
    setmetatable(o, {__index = DRheroes_levelup_mt})
    return o
end
function DRheroes_levelup.GetRootAsDRheroes_levelup(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRheroes_levelup.New()
    o:Init(buf, n + offset)
    return o
end
function DRheroes_levelup_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRheroes_levelup_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRheroes_levelup_mt:Exp()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRheroes_levelup_mt:Diamond()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRheroes_levelup.Start(builder) builder:StartObject(3) end
function DRheroes_levelup.AddId(builder, id) builder:PrependInt32Slot(0, id, 0) end
function DRheroes_levelup.AddExp(builder, exp) builder:PrependInt32Slot(1, exp, 0) end
function DRheroes_levelup.AddDiamond(builder, diamond) builder:PrependInt32Slot(2, diamond, 0) end
function DRheroes_levelup.End(builder) return builder:EndObject() end

return DRheroes_levelup -- return the module