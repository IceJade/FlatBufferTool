// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRbuilding : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRbuilding GetRootAsDRbuilding(ByteBuffer _bb) { return GetRootAsDRbuilding(_bb, new DRbuilding()); }
  public static DRbuilding GetRootAsDRbuilding(ByteBuffer _bb, DRbuilding obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRbuilding __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Description { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(8); }
  public int StationName { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SmallIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSmallIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSmallIconArray() { return __p.__vector_as_array<byte>(12); }
  public int CharAlies { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Information(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InformationLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Type { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Num { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Tiles { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Floor { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Power(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PowerLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPowerBytes() { return __p.__vector_as_span<int>(28, 4); }
#else
  public ArraySegment<byte>? GetPowerBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public int[] GetPowerArray() { return __p.__vector_as_array<int>(28); }
  public string Pic { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPicBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetPicBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetPicArray() { return __p.__vector_as_array<byte>(30); }
  public string Prefab(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PrefabLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PrefabWorld(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PrefabWorldLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int TabType { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuildingList { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Order { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Edit { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Time { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PutConsume(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PutConsumeLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float PowerDissipation(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int PowerDissipationLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetPowerDissipationBytes() { return __p.__vector_as_span<float>(48, 4); }
#else
  public ArraySegment<byte>? GetPowerDissipationBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public float[] GetPowerDissipationArray() { return __p.__vector_as_array<float>(48); }
  public int LackResource { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Para10 { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara10Bytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetPara10Bytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetPara10Array() { return __p.__vector_as_array<byte>(52); }
  public int StationMax { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Intelligence(int j) { int o = __p.__offset(56); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IntelligenceLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Destip { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StationType { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Exp { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string UnlockNum(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UnlockNumLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string UnlockPopulation(int j) { int o = __p.__offset(66); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UnlockPopulationLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int StoreLimit { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NeedScience { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Agility(int j) { int o = __p.__offset(72); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AgilityLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Rush { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockQuest { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Endurance(int j) { int o = __p.__offset(78); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EnduranceLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Building(int j) { int o = __p.__offset(80); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BuildingLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string GiftId { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGiftIdBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetGiftIdBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetGiftIdArray() { return __p.__vector_as_array<byte>(82); }
  public string Strength(int j) { int o = __p.__offset(84); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StrengthLength { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Para2 { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara2Bytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetPara2Bytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetPara2Array() { return __p.__vector_as_array<byte>(86); }
  public string Para3 { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara3Bytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetPara3Bytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetPara3Array() { return __p.__vector_as_array<byte>(88); }
  public string FixedLocation(int j) { int o = __p.__offset(90); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FixedLocationLength { get { int o = __p.__offset(90); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Para1 { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara1Bytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetPara1Bytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetPara1Array() { return __p.__vector_as_array<byte>(92); }
  public string Para5 { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara5Bytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetPara5Bytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetPara5Array() { return __p.__vector_as_array<byte>(94); }
  public string Luck(int j) { int o = __p.__offset(96); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LuckLength { get { int o = __p.__offset(96); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string OpenArms(int j) { int o = __p.__offset(98); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OpenArmsLength { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int UnlockEffect { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InBuilding(int j) { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InBuildingLength { get { int o = __p.__offset(102); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetInBuildingBytes() { return __p.__vector_as_span<int>(102, 4); }
#else
  public ArraySegment<byte>? GetInBuildingBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public int[] GetInBuildingArray() { return __p.__vector_as_array<int>(102); }
  public int DestroyHero { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string UnlockEdit(int j) { int o = __p.__offset(106); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UnlockEditLength { get { int o = __p.__offset(106); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int QuestInterfaceId { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Drawing { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ThumbIcon { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThumbIconBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetThumbIconBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetThumbIconArray() { return __p.__vector_as_array<byte>(112); }
  public int MonthCard { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string WorkBdPic { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorkBdPicBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetWorkBdPicBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetWorkBdPicArray() { return __p.__vector_as_array<byte>(116); }
  public string UpBdPic { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpBdPicBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetUpBdPicBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetUpBdPicArray() { return __p.__vector_as_array<byte>(118); }
  public string DescriptionSimple { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionSimpleBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetDescriptionSimpleBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetDescriptionSimpleArray() { return __p.__vector_as_array<byte>(120); }
  public int FoodShow(int j) { int o = __p.__offset(122); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FoodShowLength { get { int o = __p.__offset(122); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFoodShowBytes() { return __p.__vector_as_span<int>(122, 4); }
#else
  public ArraySegment<byte>? GetFoodShowBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public int[] GetFoodShowArray() { return __p.__vector_as_array<int>(122); }
  public int UnlockSeason { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockOrder(int j) { int o = __p.__offset(126); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UnlockOrderLength { get { int o = __p.__offset(126); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUnlockOrderBytes() { return __p.__vector_as_span<int>(126, 4); }
#else
  public ArraySegment<byte>? GetUnlockOrderBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public int[] GetUnlockOrderArray() { return __p.__vector_as_array<int>(126); }

  public static Offset<LF.Table.DRbuilding> CreateDRbuilding(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      int station_name = 0,
      StringOffset small_iconOffset = default(StringOffset),
      int char_alies = 0,
      VectorOffset informationOffset = default(VectorOffset),
      int type = 0,
      int max_level = 0,
      int num = 0,
      int tiles = 0,
      int floor = 0,
      VectorOffset powerOffset = default(VectorOffset),
      StringOffset picOffset = default(StringOffset),
      VectorOffset prefabOffset = default(VectorOffset),
      VectorOffset prefab_worldOffset = default(VectorOffset),
      int tab_type = 0,
      int building_list = 0,
      int order = 0,
      int edit = 0,
      int time = 0,
      VectorOffset put_consumeOffset = default(VectorOffset),
      VectorOffset power_dissipationOffset = default(VectorOffset),
      int lack_resource = 0,
      StringOffset para10Offset = default(StringOffset),
      int station_max = 0,
      VectorOffset intelligenceOffset = default(VectorOffset),
      int destip = 0,
      int station_type = 0,
      int exp = 0,
      VectorOffset unlock_numOffset = default(VectorOffset),
      VectorOffset unlock_populationOffset = default(VectorOffset),
      int store_limit = 0,
      int needScience = 0,
      VectorOffset agilityOffset = default(VectorOffset),
      int rush = 0,
      int unlock_quest = 0,
      VectorOffset enduranceOffset = default(VectorOffset),
      VectorOffset buildingOffset = default(VectorOffset),
      StringOffset gift_idOffset = default(StringOffset),
      VectorOffset strengthOffset = default(VectorOffset),
      StringOffset para2Offset = default(StringOffset),
      StringOffset para3Offset = default(StringOffset),
      VectorOffset fixed_locationOffset = default(VectorOffset),
      StringOffset para1Offset = default(StringOffset),
      StringOffset para5Offset = default(StringOffset),
      VectorOffset luckOffset = default(VectorOffset),
      VectorOffset open_armsOffset = default(VectorOffset),
      int unlock_effect = 0,
      VectorOffset inBuildingOffset = default(VectorOffset),
      int destroy_hero = 0,
      VectorOffset Unlock_editOffset = default(VectorOffset),
      int quest_interfaceId = 0,
      int drawing = 0,
      StringOffset thumb_iconOffset = default(StringOffset),
      int month_card = 0,
      StringOffset work_bd_picOffset = default(StringOffset),
      StringOffset up_bd_picOffset = default(StringOffset),
      StringOffset description_simpleOffset = default(StringOffset),
      VectorOffset foodShowOffset = default(VectorOffset),
      int unlock_season = 0,
      VectorOffset unlock_orderOffset = default(VectorOffset)) {
    builder.StartTable(62);
    DRbuilding.AddUnlockOrder(builder, unlock_orderOffset);
    DRbuilding.AddUnlockSeason(builder, unlock_season);
    DRbuilding.AddFoodShow(builder, foodShowOffset);
    DRbuilding.AddDescriptionSimple(builder, description_simpleOffset);
    DRbuilding.AddUpBdPic(builder, up_bd_picOffset);
    DRbuilding.AddWorkBdPic(builder, work_bd_picOffset);
    DRbuilding.AddMonthCard(builder, month_card);
    DRbuilding.AddThumbIcon(builder, thumb_iconOffset);
    DRbuilding.AddDrawing(builder, drawing);
    DRbuilding.AddQuestInterfaceId(builder, quest_interfaceId);
    DRbuilding.AddUnlockEdit(builder, Unlock_editOffset);
    DRbuilding.AddDestroyHero(builder, destroy_hero);
    DRbuilding.AddInBuilding(builder, inBuildingOffset);
    DRbuilding.AddUnlockEffect(builder, unlock_effect);
    DRbuilding.AddOpenArms(builder, open_armsOffset);
    DRbuilding.AddLuck(builder, luckOffset);
    DRbuilding.AddPara5(builder, para5Offset);
    DRbuilding.AddPara1(builder, para1Offset);
    DRbuilding.AddFixedLocation(builder, fixed_locationOffset);
    DRbuilding.AddPara3(builder, para3Offset);
    DRbuilding.AddPara2(builder, para2Offset);
    DRbuilding.AddStrength(builder, strengthOffset);
    DRbuilding.AddGiftId(builder, gift_idOffset);
    DRbuilding.AddBuilding(builder, buildingOffset);
    DRbuilding.AddEndurance(builder, enduranceOffset);
    DRbuilding.AddUnlockQuest(builder, unlock_quest);
    DRbuilding.AddRush(builder, rush);
    DRbuilding.AddAgility(builder, agilityOffset);
    DRbuilding.AddNeedScience(builder, needScience);
    DRbuilding.AddStoreLimit(builder, store_limit);
    DRbuilding.AddUnlockPopulation(builder, unlock_populationOffset);
    DRbuilding.AddUnlockNum(builder, unlock_numOffset);
    DRbuilding.AddExp(builder, exp);
    DRbuilding.AddStationType(builder, station_type);
    DRbuilding.AddDestip(builder, destip);
    DRbuilding.AddIntelligence(builder, intelligenceOffset);
    DRbuilding.AddStationMax(builder, station_max);
    DRbuilding.AddPara10(builder, para10Offset);
    DRbuilding.AddLackResource(builder, lack_resource);
    DRbuilding.AddPowerDissipation(builder, power_dissipationOffset);
    DRbuilding.AddPutConsume(builder, put_consumeOffset);
    DRbuilding.AddTime(builder, time);
    DRbuilding.AddEdit(builder, edit);
    DRbuilding.AddOrder(builder, order);
    DRbuilding.AddBuildingList(builder, building_list);
    DRbuilding.AddTabType(builder, tab_type);
    DRbuilding.AddPrefabWorld(builder, prefab_worldOffset);
    DRbuilding.AddPrefab(builder, prefabOffset);
    DRbuilding.AddPic(builder, picOffset);
    DRbuilding.AddPower(builder, powerOffset);
    DRbuilding.AddFloor(builder, floor);
    DRbuilding.AddTiles(builder, tiles);
    DRbuilding.AddNum(builder, num);
    DRbuilding.AddMaxLevel(builder, max_level);
    DRbuilding.AddType(builder, type);
    DRbuilding.AddInformation(builder, informationOffset);
    DRbuilding.AddCharAlies(builder, char_alies);
    DRbuilding.AddSmallIcon(builder, small_iconOffset);
    DRbuilding.AddStationName(builder, station_name);
    DRbuilding.AddDescription(builder, descriptionOffset);
    DRbuilding.AddName(builder, nameOffset);
    DRbuilding.AddId(builder, id);
    return DRbuilding.EndDRbuilding(builder);
  }

  public static void StartDRbuilding(FlatBufferBuilder builder) { builder.StartTable(62); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(2, descriptionOffset.Value, 0); }
  public static void AddStationName(FlatBufferBuilder builder, int stationName) { builder.AddInt(3, stationName, 0); }
  public static void AddSmallIcon(FlatBufferBuilder builder, StringOffset smallIconOffset) { builder.AddOffset(4, smallIconOffset.Value, 0); }
  public static void AddCharAlies(FlatBufferBuilder builder, int charAlies) { builder.AddInt(5, charAlies, 0); }
  public static void AddInformation(FlatBufferBuilder builder, VectorOffset informationOffset) { builder.AddOffset(6, informationOffset.Value, 0); }
  public static VectorOffset CreateInformationVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInformationVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInformationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(7, type, 0); }
  public static void AddMaxLevel(FlatBufferBuilder builder, int maxLevel) { builder.AddInt(8, maxLevel, 0); }
  public static void AddNum(FlatBufferBuilder builder, int num) { builder.AddInt(9, num, 0); }
  public static void AddTiles(FlatBufferBuilder builder, int tiles) { builder.AddInt(10, tiles, 0); }
  public static void AddFloor(FlatBufferBuilder builder, int floor) { builder.AddInt(11, floor, 0); }
  public static void AddPower(FlatBufferBuilder builder, VectorOffset powerOffset) { builder.AddOffset(12, powerOffset.Value, 0); }
  public static VectorOffset CreatePowerVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePowerVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPowerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPic(FlatBufferBuilder builder, StringOffset picOffset) { builder.AddOffset(13, picOffset.Value, 0); }
  public static void AddPrefab(FlatBufferBuilder builder, VectorOffset prefabOffset) { builder.AddOffset(14, prefabOffset.Value, 0); }
  public static VectorOffset CreatePrefabVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePrefabVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPrefabVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrefabWorld(FlatBufferBuilder builder, VectorOffset prefabWorldOffset) { builder.AddOffset(15, prefabWorldOffset.Value, 0); }
  public static VectorOffset CreatePrefabWorldVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePrefabWorldVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPrefabWorldVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTabType(FlatBufferBuilder builder, int tabType) { builder.AddInt(16, tabType, 0); }
  public static void AddBuildingList(FlatBufferBuilder builder, int buildingList) { builder.AddInt(17, buildingList, 0); }
  public static void AddOrder(FlatBufferBuilder builder, int order) { builder.AddInt(18, order, 0); }
  public static void AddEdit(FlatBufferBuilder builder, int edit) { builder.AddInt(19, edit, 0); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(20, time, 0); }
  public static void AddPutConsume(FlatBufferBuilder builder, VectorOffset putConsumeOffset) { builder.AddOffset(21, putConsumeOffset.Value, 0); }
  public static VectorOffset CreatePutConsumeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePutConsumeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPutConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPowerDissipation(FlatBufferBuilder builder, VectorOffset powerDissipationOffset) { builder.AddOffset(22, powerDissipationOffset.Value, 0); }
  public static VectorOffset CreatePowerDissipationVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePowerDissipationVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPowerDissipationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLackResource(FlatBufferBuilder builder, int lackResource) { builder.AddInt(23, lackResource, 0); }
  public static void AddPara10(FlatBufferBuilder builder, StringOffset para10Offset) { builder.AddOffset(24, para10Offset.Value, 0); }
  public static void AddStationMax(FlatBufferBuilder builder, int stationMax) { builder.AddInt(25, stationMax, 0); }
  public static void AddIntelligence(FlatBufferBuilder builder, VectorOffset intelligenceOffset) { builder.AddOffset(26, intelligenceOffset.Value, 0); }
  public static VectorOffset CreateIntelligenceVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIntelligenceVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartIntelligenceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDestip(FlatBufferBuilder builder, int destip) { builder.AddInt(27, destip, 0); }
  public static void AddStationType(FlatBufferBuilder builder, int stationType) { builder.AddInt(28, stationType, 0); }
  public static void AddExp(FlatBufferBuilder builder, int exp) { builder.AddInt(29, exp, 0); }
  public static void AddUnlockNum(FlatBufferBuilder builder, VectorOffset unlockNumOffset) { builder.AddOffset(30, unlockNumOffset.Value, 0); }
  public static VectorOffset CreateUnlockNumVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUnlockNumVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUnlockNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnlockPopulation(FlatBufferBuilder builder, VectorOffset unlockPopulationOffset) { builder.AddOffset(31, unlockPopulationOffset.Value, 0); }
  public static VectorOffset CreateUnlockPopulationVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUnlockPopulationVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUnlockPopulationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStoreLimit(FlatBufferBuilder builder, int storeLimit) { builder.AddInt(32, storeLimit, 0); }
  public static void AddNeedScience(FlatBufferBuilder builder, int needScience) { builder.AddInt(33, needScience, 0); }
  public static void AddAgility(FlatBufferBuilder builder, VectorOffset agilityOffset) { builder.AddOffset(34, agilityOffset.Value, 0); }
  public static VectorOffset CreateAgilityVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAgilityVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAgilityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRush(FlatBufferBuilder builder, int rush) { builder.AddInt(35, rush, 0); }
  public static void AddUnlockQuest(FlatBufferBuilder builder, int unlockQuest) { builder.AddInt(36, unlockQuest, 0); }
  public static void AddEndurance(FlatBufferBuilder builder, VectorOffset enduranceOffset) { builder.AddOffset(37, enduranceOffset.Value, 0); }
  public static VectorOffset CreateEnduranceVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnduranceVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEnduranceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuilding(FlatBufferBuilder builder, VectorOffset buildingOffset) { builder.AddOffset(38, buildingOffset.Value, 0); }
  public static VectorOffset CreateBuildingVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuildingVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBuildingVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGiftId(FlatBufferBuilder builder, StringOffset giftIdOffset) { builder.AddOffset(39, giftIdOffset.Value, 0); }
  public static void AddStrength(FlatBufferBuilder builder, VectorOffset strengthOffset) { builder.AddOffset(40, strengthOffset.Value, 0); }
  public static VectorOffset CreateStrengthVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStrengthVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStrengthVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPara2(FlatBufferBuilder builder, StringOffset para2Offset) { builder.AddOffset(41, para2Offset.Value, 0); }
  public static void AddPara3(FlatBufferBuilder builder, StringOffset para3Offset) { builder.AddOffset(42, para3Offset.Value, 0); }
  public static void AddFixedLocation(FlatBufferBuilder builder, VectorOffset fixedLocationOffset) { builder.AddOffset(43, fixedLocationOffset.Value, 0); }
  public static VectorOffset CreateFixedLocationVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFixedLocationVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFixedLocationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPara1(FlatBufferBuilder builder, StringOffset para1Offset) { builder.AddOffset(44, para1Offset.Value, 0); }
  public static void AddPara5(FlatBufferBuilder builder, StringOffset para5Offset) { builder.AddOffset(45, para5Offset.Value, 0); }
  public static void AddLuck(FlatBufferBuilder builder, VectorOffset luckOffset) { builder.AddOffset(46, luckOffset.Value, 0); }
  public static VectorOffset CreateLuckVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLuckVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLuckVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOpenArms(FlatBufferBuilder builder, VectorOffset openArmsOffset) { builder.AddOffset(47, openArmsOffset.Value, 0); }
  public static VectorOffset CreateOpenArmsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOpenArmsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOpenArmsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnlockEffect(FlatBufferBuilder builder, int unlockEffect) { builder.AddInt(48, unlockEffect, 0); }
  public static void AddInBuilding(FlatBufferBuilder builder, VectorOffset inBuildingOffset) { builder.AddOffset(49, inBuildingOffset.Value, 0); }
  public static VectorOffset CreateInBuildingVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInBuildingVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInBuildingVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDestroyHero(FlatBufferBuilder builder, int destroyHero) { builder.AddInt(50, destroyHero, 0); }
  public static void AddUnlockEdit(FlatBufferBuilder builder, VectorOffset UnlockEditOffset) { builder.AddOffset(51, UnlockEditOffset.Value, 0); }
  public static VectorOffset CreateUnlockEditVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUnlockEditVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUnlockEditVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQuestInterfaceId(FlatBufferBuilder builder, int questInterfaceId) { builder.AddInt(52, questInterfaceId, 0); }
  public static void AddDrawing(FlatBufferBuilder builder, int drawing) { builder.AddInt(53, drawing, 0); }
  public static void AddThumbIcon(FlatBufferBuilder builder, StringOffset thumbIconOffset) { builder.AddOffset(54, thumbIconOffset.Value, 0); }
  public static void AddMonthCard(FlatBufferBuilder builder, int monthCard) { builder.AddInt(55, monthCard, 0); }
  public static void AddWorkBdPic(FlatBufferBuilder builder, StringOffset workBdPicOffset) { builder.AddOffset(56, workBdPicOffset.Value, 0); }
  public static void AddUpBdPic(FlatBufferBuilder builder, StringOffset upBdPicOffset) { builder.AddOffset(57, upBdPicOffset.Value, 0); }
  public static void AddDescriptionSimple(FlatBufferBuilder builder, StringOffset descriptionSimpleOffset) { builder.AddOffset(58, descriptionSimpleOffset.Value, 0); }
  public static void AddFoodShow(FlatBufferBuilder builder, VectorOffset foodShowOffset) { builder.AddOffset(59, foodShowOffset.Value, 0); }
  public static VectorOffset CreateFoodShowVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFoodShowVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFoodShowVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnlockSeason(FlatBufferBuilder builder, int unlockSeason) { builder.AddInt(60, unlockSeason, 0); }
  public static void AddUnlockOrder(FlatBufferBuilder builder, VectorOffset unlockOrderOffset) { builder.AddOffset(61, unlockOrderOffset.Value, 0); }
  public static VectorOffset CreateUnlockOrderVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUnlockOrderVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUnlockOrderVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.DRbuilding> EndDRbuilding(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRbuilding>(o);
  }
};

public struct Table_building : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_building GetRootAsTable_building(ByteBuffer _bb) { return GetRootAsTable_building(_bb, new Table_building()); }
  public static Table_building GetRootAsTable_building(ByteBuffer _bb, Table_building obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_building __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRbuilding? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRbuilding?)(new LF.Table.DRbuilding()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_building> CreateTable_building(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_building.AddData(builder, dataOffset);
    return Table_building.EndTable_building(builder);
  }

  public static void StartTable_building(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRbuilding>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRbuilding>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_building> EndTable_building(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_building>(o);
  }
  public static void FinishTable_buildingBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_building> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_buildingBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_building> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
