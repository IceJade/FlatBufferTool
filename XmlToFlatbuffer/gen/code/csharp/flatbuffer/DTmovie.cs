// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRmovie : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRmovie GetRootAsDRmovie(ByteBuffer _bb) { return GetRootAsDRmovie(_bb, new DRmovie()); }
  public static DRmovie GetRootAsDRmovie(ByteBuffer _bb, DRmovie obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRmovie __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Para1 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara1Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPara1Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPara1Array() { return __p.__vector_as_array<byte>(8); }
  public float Time { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int DelayTimeType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float DelayTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Nextevent(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NexteventLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNexteventBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetNexteventBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetNexteventArray() { return __p.__vector_as_array<int>(16); }
  public int IsStart { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HideSkip { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Para2 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara2Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPara2Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPara2Array() { return __p.__vector_as_array<byte>(22); }
  public string Para3 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara3Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetPara3Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetPara3Array() { return __p.__vector_as_array<byte>(24); }
  public string Para4 { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara4Bytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPara4Bytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPara4Array() { return __p.__vector_as_array<byte>(26); }
  public string Para5 { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara5Bytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetPara5Bytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetPara5Array() { return __p.__vector_as_array<byte>(28); }
  public string Para6 { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara6Bytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetPara6Bytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetPara6Array() { return __p.__vector_as_array<byte>(30); }
  public string IsEnd { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIsEndBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetIsEndBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetIsEndArray() { return __p.__vector_as_array<byte>(32); }
  public int OpenHeroAiState(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OpenHeroAiStateLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOpenHeroAiStateBytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetOpenHeroAiStateBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetOpenHeroAiStateArray() { return __p.__vector_as_array<int>(34); }
  public int InteractiveButton(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InteractiveButtonLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetInteractiveButtonBytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetInteractiveButtonBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetInteractiveButtonArray() { return __p.__vector_as_array<int>(36); }
  public int TipsButton(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TipsButtonLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTipsButtonBytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetTipsButtonBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetTipsButtonArray() { return __p.__vector_as_array<int>(38); }
  public int CloseHeroAiState(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CloseHeroAiStateLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCloseHeroAiStateBytes() { return __p.__vector_as_span<int>(40, 4); }
#else
  public ArraySegment<byte>? GetCloseHeroAiStateBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public int[] GetCloseHeroAiStateArray() { return __p.__vector_as_array<int>(40); }
  public int MovieMode { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Fog(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FogLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int FunctionStart(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FunctionStartLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFunctionStartBytes() { return __p.__vector_as_span<int>(46, 4); }
#else
  public ArraySegment<byte>? GetFunctionStartBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public int[] GetFunctionStartArray() { return __p.__vector_as_array<int>(46); }
  public int NextType { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextPara { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Trigger { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTriggerBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetTriggerBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetTriggerArray() { return __p.__vector_as_array<byte>(52); }
  public int DeleteButton(int j) { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DeleteButtonLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDeleteButtonBytes() { return __p.__vector_as_span<int>(54, 4); }
#else
  public ArraySegment<byte>? GetDeleteButtonBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public int[] GetDeleteButtonArray() { return __p.__vector_as_array<int>(54); }
  public int Function(int j) { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FunctionLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFunctionBytes() { return __p.__vector_as_span<int>(56, 4); }
#else
  public ArraySegment<byte>? GetFunctionBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public int[] GetFunctionArray() { return __p.__vector_as_array<int>(56); }
  public string Para7 { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara7Bytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetPara7Bytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetPara7Array() { return __p.__vector_as_array<byte>(58); }
  public string SkipId { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkipIdBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetSkipIdBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetSkipIdArray() { return __p.__vector_as_array<byte>(60); }
  public string IsMark { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIsMarkBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetIsMarkBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetIsMarkArray() { return __p.__vector_as_array<byte>(62); }
  public string Para8 { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara8Bytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetPara8Bytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetPara8Array() { return __p.__vector_as_array<byte>(64); }
  public int DebugDot { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string InterfaceClose { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInterfaceCloseBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetInterfaceCloseBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetInterfaceCloseArray() { return __p.__vector_as_array<byte>(68); }

  public static Offset<LF.Table.DRmovie> CreateDRmovie(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      StringOffset para1Offset = default(StringOffset),
      float time = 0.0f,
      int delayTimeType = 0,
      float delayTime = 0.0f,
      VectorOffset nexteventOffset = default(VectorOffset),
      int isStart = 0,
      int hideSkip = 0,
      StringOffset para2Offset = default(StringOffset),
      StringOffset para3Offset = default(StringOffset),
      StringOffset para4Offset = default(StringOffset),
      StringOffset para5Offset = default(StringOffset),
      StringOffset para6Offset = default(StringOffset),
      StringOffset isEndOffset = default(StringOffset),
      VectorOffset OpenHeroAiStateOffset = default(VectorOffset),
      VectorOffset interactiveButtonOffset = default(VectorOffset),
      VectorOffset tips_buttonOffset = default(VectorOffset),
      VectorOffset CloseHeroAiStateOffset = default(VectorOffset),
      int movieMode = 0,
      VectorOffset fogOffset = default(VectorOffset),
      VectorOffset functionStartOffset = default(VectorOffset),
      int nextType = 0,
      int nextPara = 0,
      StringOffset triggerOffset = default(StringOffset),
      VectorOffset delete_ButtonOffset = default(VectorOffset),
      VectorOffset functionOffset = default(VectorOffset),
      StringOffset para7Offset = default(StringOffset),
      StringOffset skipIdOffset = default(StringOffset),
      StringOffset isMarkOffset = default(StringOffset),
      StringOffset para8Offset = default(StringOffset),
      int DebugDot = 0,
      StringOffset interface_closeOffset = default(StringOffset)) {
    builder.StartTable(33);
    DRmovie.AddInterfaceClose(builder, interface_closeOffset);
    DRmovie.AddDebugDot(builder, DebugDot);
    DRmovie.AddPara8(builder, para8Offset);
    DRmovie.AddIsMark(builder, isMarkOffset);
    DRmovie.AddSkipId(builder, skipIdOffset);
    DRmovie.AddPara7(builder, para7Offset);
    DRmovie.AddFunction(builder, functionOffset);
    DRmovie.AddDeleteButton(builder, delete_ButtonOffset);
    DRmovie.AddTrigger(builder, triggerOffset);
    DRmovie.AddNextPara(builder, nextPara);
    DRmovie.AddNextType(builder, nextType);
    DRmovie.AddFunctionStart(builder, functionStartOffset);
    DRmovie.AddFog(builder, fogOffset);
    DRmovie.AddMovieMode(builder, movieMode);
    DRmovie.AddCloseHeroAiState(builder, CloseHeroAiStateOffset);
    DRmovie.AddTipsButton(builder, tips_buttonOffset);
    DRmovie.AddInteractiveButton(builder, interactiveButtonOffset);
    DRmovie.AddOpenHeroAiState(builder, OpenHeroAiStateOffset);
    DRmovie.AddIsEnd(builder, isEndOffset);
    DRmovie.AddPara6(builder, para6Offset);
    DRmovie.AddPara5(builder, para5Offset);
    DRmovie.AddPara4(builder, para4Offset);
    DRmovie.AddPara3(builder, para3Offset);
    DRmovie.AddPara2(builder, para2Offset);
    DRmovie.AddHideSkip(builder, hideSkip);
    DRmovie.AddIsStart(builder, isStart);
    DRmovie.AddNextevent(builder, nexteventOffset);
    DRmovie.AddDelayTime(builder, delayTime);
    DRmovie.AddDelayTimeType(builder, delayTimeType);
    DRmovie.AddTime(builder, time);
    DRmovie.AddPara1(builder, para1Offset);
    DRmovie.AddType(builder, type);
    DRmovie.AddId(builder, id);
    return DRmovie.EndDRmovie(builder);
  }

  public static void StartDRmovie(FlatBufferBuilder builder) { builder.StartTable(33); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddPara1(FlatBufferBuilder builder, StringOffset para1Offset) { builder.AddOffset(2, para1Offset.Value, 0); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(3, time, 0.0f); }
  public static void AddDelayTimeType(FlatBufferBuilder builder, int delayTimeType) { builder.AddInt(4, delayTimeType, 0); }
  public static void AddDelayTime(FlatBufferBuilder builder, float delayTime) { builder.AddFloat(5, delayTime, 0.0f); }
  public static void AddNextevent(FlatBufferBuilder builder, VectorOffset nexteventOffset) { builder.AddOffset(6, nexteventOffset.Value, 0); }
  public static VectorOffset CreateNexteventVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNexteventVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNexteventVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsStart(FlatBufferBuilder builder, int isStart) { builder.AddInt(7, isStart, 0); }
  public static void AddHideSkip(FlatBufferBuilder builder, int hideSkip) { builder.AddInt(8, hideSkip, 0); }
  public static void AddPara2(FlatBufferBuilder builder, StringOffset para2Offset) { builder.AddOffset(9, para2Offset.Value, 0); }
  public static void AddPara3(FlatBufferBuilder builder, StringOffset para3Offset) { builder.AddOffset(10, para3Offset.Value, 0); }
  public static void AddPara4(FlatBufferBuilder builder, StringOffset para4Offset) { builder.AddOffset(11, para4Offset.Value, 0); }
  public static void AddPara5(FlatBufferBuilder builder, StringOffset para5Offset) { builder.AddOffset(12, para5Offset.Value, 0); }
  public static void AddPara6(FlatBufferBuilder builder, StringOffset para6Offset) { builder.AddOffset(13, para6Offset.Value, 0); }
  public static void AddIsEnd(FlatBufferBuilder builder, StringOffset isEndOffset) { builder.AddOffset(14, isEndOffset.Value, 0); }
  public static void AddOpenHeroAiState(FlatBufferBuilder builder, VectorOffset OpenHeroAiStateOffset) { builder.AddOffset(15, OpenHeroAiStateOffset.Value, 0); }
  public static VectorOffset CreateOpenHeroAiStateVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOpenHeroAiStateVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOpenHeroAiStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInteractiveButton(FlatBufferBuilder builder, VectorOffset interactiveButtonOffset) { builder.AddOffset(16, interactiveButtonOffset.Value, 0); }
  public static VectorOffset CreateInteractiveButtonVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInteractiveButtonVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInteractiveButtonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTipsButton(FlatBufferBuilder builder, VectorOffset tipsButtonOffset) { builder.AddOffset(17, tipsButtonOffset.Value, 0); }
  public static VectorOffset CreateTipsButtonVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTipsButtonVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTipsButtonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCloseHeroAiState(FlatBufferBuilder builder, VectorOffset CloseHeroAiStateOffset) { builder.AddOffset(18, CloseHeroAiStateOffset.Value, 0); }
  public static VectorOffset CreateCloseHeroAiStateVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCloseHeroAiStateVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCloseHeroAiStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMovieMode(FlatBufferBuilder builder, int movieMode) { builder.AddInt(19, movieMode, 0); }
  public static void AddFog(FlatBufferBuilder builder, VectorOffset fogOffset) { builder.AddOffset(20, fogOffset.Value, 0); }
  public static VectorOffset CreateFogVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFogVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFogVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFunctionStart(FlatBufferBuilder builder, VectorOffset functionStartOffset) { builder.AddOffset(21, functionStartOffset.Value, 0); }
  public static VectorOffset CreateFunctionStartVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFunctionStartVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFunctionStartVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNextType(FlatBufferBuilder builder, int nextType) { builder.AddInt(22, nextType, 0); }
  public static void AddNextPara(FlatBufferBuilder builder, int nextPara) { builder.AddInt(23, nextPara, 0); }
  public static void AddTrigger(FlatBufferBuilder builder, StringOffset triggerOffset) { builder.AddOffset(24, triggerOffset.Value, 0); }
  public static void AddDeleteButton(FlatBufferBuilder builder, VectorOffset deleteButtonOffset) { builder.AddOffset(25, deleteButtonOffset.Value, 0); }
  public static VectorOffset CreateDeleteButtonVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDeleteButtonVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDeleteButtonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFunction(FlatBufferBuilder builder, VectorOffset functionOffset) { builder.AddOffset(26, functionOffset.Value, 0); }
  public static VectorOffset CreateFunctionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFunctionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFunctionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPara7(FlatBufferBuilder builder, StringOffset para7Offset) { builder.AddOffset(27, para7Offset.Value, 0); }
  public static void AddSkipId(FlatBufferBuilder builder, StringOffset skipIdOffset) { builder.AddOffset(28, skipIdOffset.Value, 0); }
  public static void AddIsMark(FlatBufferBuilder builder, StringOffset isMarkOffset) { builder.AddOffset(29, isMarkOffset.Value, 0); }
  public static void AddPara8(FlatBufferBuilder builder, StringOffset para8Offset) { builder.AddOffset(30, para8Offset.Value, 0); }
  public static void AddDebugDot(FlatBufferBuilder builder, int DebugDot) { builder.AddInt(31, DebugDot, 0); }
  public static void AddInterfaceClose(FlatBufferBuilder builder, StringOffset interfaceCloseOffset) { builder.AddOffset(32, interfaceCloseOffset.Value, 0); }
  public static Offset<LF.Table.DRmovie> EndDRmovie(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRmovie>(o);
  }
};

public struct Table_movie : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_movie GetRootAsTable_movie(ByteBuffer _bb) { return GetRootAsTable_movie(_bb, new Table_movie()); }
  public static Table_movie GetRootAsTable_movie(ByteBuffer _bb, Table_movie obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_movie __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRmovie? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRmovie?)(new LF.Table.DRmovie()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_movie> CreateTable_movie(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_movie.AddData(builder, dataOffset);
    return Table_movie.EndTable_movie(builder);
  }

  public static void StartTable_movie(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRmovie>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRmovie>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_movie> EndTable_movie(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_movie>(o);
  }
  public static void FinishTable_movieBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_movie> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_movieBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_movie> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
