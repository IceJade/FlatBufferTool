// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Chanto.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRmail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRmail GetRootAsDRmail(ByteBuffer _bb) { return GetRootAsDRmail(_bb, new DRmail()); }
  public static DRmail GetRootAsDRmail(ByteBuffer _bb, DRmail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRmail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Title { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Subtitle { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Message { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Para1 { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara1Bytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPara1Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPara1Array() { return __p.__vector_as_array<byte>(16); }
  public int Time { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LF.Table.DRmail> CreateDRmail(FlatBufferBuilder builder,
      int id = 0,
      int title = 0,
      int subtitle = 0,
      int message = 0,
      int type = 0,
      int reward = 0,
      StringOffset para1Offset = default(StringOffset),
      int time = 0) {
    builder.StartTable(8);
    DRmail.AddTime(builder, time);
    DRmail.AddPara1(builder, para1Offset);
    DRmail.AddReward(builder, reward);
    DRmail.AddType(builder, type);
    DRmail.AddMessage(builder, message);
    DRmail.AddSubtitle(builder, subtitle);
    DRmail.AddTitle(builder, title);
    DRmail.AddId(builder, id);
    return DRmail.EndDRmail(builder);
  }

  public static void StartDRmail(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTitle(FlatBufferBuilder builder, int title) { builder.AddInt(1, title, 0); }
  public static void AddSubtitle(FlatBufferBuilder builder, int subtitle) { builder.AddInt(2, subtitle, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int message) { builder.AddInt(3, message, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(4, type, 0); }
  public static void AddReward(FlatBufferBuilder builder, int reward) { builder.AddInt(5, reward, 0); }
  public static void AddPara1(FlatBufferBuilder builder, StringOffset para1Offset) { builder.AddOffset(6, para1Offset.Value, 0); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(7, time, 0); }
  public static Offset<LF.Table.DRmail> EndDRmail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRmail>(o);
  }
};

public struct Table_mail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_mail GetRootAsTable_mail(ByteBuffer _bb) { return GetRootAsTable_mail(_bb, new Table_mail()); }
  public static Table_mail GetRootAsTable_mail(ByteBuffer _bb, Table_mail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_mail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRmail? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRmail?)(new LF.Table.DRmail()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_mail> CreateTable_mail(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_mail.AddData(builder, dataOffset);
    return Table_mail.EndTable_mail(builder);
  }

  public static void StartTable_mail(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRmail>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRmail>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_mail> EndTable_mail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_mail>(o);
  }
  public static void FinishTable_mailBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_mail> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_mailBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_mail> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
