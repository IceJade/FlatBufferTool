// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRheroes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRheroes GetRootAsDRheroes(ByteBuffer _bb) { return GetRootAsDRheroes(_bb, new DRheroes()); }
  public static DRheroes GetRootAsDRheroes(ByteBuffer _bb, DRheroes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRheroes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Nickname { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNicknameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNicknameArray() { return __p.__vector_as_array<byte>(8); }
  public string Sculpture { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSculptureBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSculptureBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSculptureArray() { return __p.__vector_as_array<byte>(10); }
  public string RecruitLinshi { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecruitLinshiBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetRecruitLinshiBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetRecruitLinshiArray() { return __p.__vector_as_array<byte>(12); }
  public string AvatarIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAvatarIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAvatarIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAvatarIconArray() { return __p.__vector_as_array<byte>(14); }
  public string TujianIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTujianIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTujianIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTujianIconArray() { return __p.__vector_as_array<byte>(16); }
  public string Prefab { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPrefabBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPrefabArray() { return __p.__vector_as_array<byte>(18); }
  public string PrefabHigh { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabHighBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetPrefabHighBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetPrefabHighArray() { return __p.__vector_as_array<byte>(20); }
  public float Size { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Handbook { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Order { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QualityMin { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QualityMax { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Poster { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rarity { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Camp { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Arms { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Label1(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Label1Length { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLabel1Bytes() { return __p.__vector_as_span<int>(40, 4); }
#else
  public ArraySegment<byte>? GetLabel1Bytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public int[] GetLabel1Array() { return __p.__vector_as_array<int>(40); }
  public int Label3(int j) { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Label3Length { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLabel3Bytes() { return __p.__vector_as_span<int>(42, 4); }
#else
  public ArraySegment<byte>? GetLabel3Bytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public int[] GetLabel3Array() { return __p.__vector_as_array<int>(42); }
  public int EatSpeed { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Strength(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StrengthLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Agility(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AgilityLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Intelligence(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IntelligenceLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Endurance(int j) { int o = __p.__offset(52); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EnduranceLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Luck(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LuckLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Skill(int j) { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSkillBytes() { return __p.__vector_as_span<int>(56, 4); }
#else
  public ArraySegment<byte>? GetSkillBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public int[] GetSkillArray() { return __p.__vector_as_array<int>(56); }
  public int SkillUnlock(int j) { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillUnlockLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSkillUnlockBytes() { return __p.__vector_as_span<int>(58, 4); }
#else
  public ArraySegment<byte>? GetSkillUnlockBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public int[] GetSkillUnlockArray() { return __p.__vector_as_array<int>(58); }
  public int SkillLevelupNum(int j) { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillLevelupNumLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSkillLevelupNumBytes() { return __p.__vector_as_span<int>(60, 4); }
#else
  public ArraySegment<byte>? GetSkillLevelupNumBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public int[] GetSkillLevelupNumArray() { return __p.__vector_as_array<int>(60); }
  public int SkillLevelupItem { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PowerPara(int j) { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PowerParaLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPowerParaBytes() { return __p.__vector_as_span<int>(64, 4); }
#else
  public ArraySegment<byte>? GetPowerParaBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public int[] GetPowerParaArray() { return __p.__vector_as_array<int>(64); }
  public int Position { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Robot { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Promote(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PromoteLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AvatarSpine { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAvatarSpineBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetAvatarSpineBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetAvatarSpineArray() { return __p.__vector_as_array<byte>(72); }
  public string WorkSculpture { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorkSculptureBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetWorkSculptureBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetWorkSculptureArray() { return __p.__vector_as_array<byte>(74); }
  public string TujianIcon2 { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTujianIcon2Bytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetTujianIcon2Bytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetTujianIcon2Array() { return __p.__vector_as_array<byte>(76); }
  public string SkillLevelupNumNew(int j) { int o = __p.__offset(78); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SkillLevelupNumNewLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ShowCondition(int j) { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowConditionLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowConditionBytes() { return __p.__vector_as_span<int>(80, 4); }
#else
  public ArraySegment<byte>? GetShowConditionBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public int[] GetShowConditionArray() { return __p.__vector_as_array<int>(80); }
  public string Video { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVideoBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetVideoBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetVideoArray() { return __p.__vector_as_array<byte>(82); }
  public int TryReward { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowType { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Arms { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillLevelupItemExchange(int j) { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillLevelupItemExchangeLength { get { int o = __p.__offset(90); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSkillLevelupItemExchangeBytes() { return __p.__vector_as_span<int>(90, 4); }
#else
  public ArraySegment<byte>? GetSkillLevelupItemExchangeBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public int[] GetSkillLevelupItemExchangeArray() { return __p.__vector_as_array<int>(90); }
  public string SculptureRound { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSculptureRoundBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetSculptureRoundBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetSculptureRoundArray() { return __p.__vector_as_array<byte>(92); }
  public int Sound { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Story { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PrefabPve { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabPveBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetPrefabPveBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetPrefabPveArray() { return __p.__vector_as_array<byte>(98); }
  public string PrefabCity { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabCityBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetPrefabCityBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetPrefabCityArray() { return __p.__vector_as_array<byte>(100); }
  public string ShowServer(int j) { int o = __p.__offset(102); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ShowServerLength { get { int o = __p.__offset(102); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ShelterStationed { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HideInCity { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RarityLottery { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRarityLotteryBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetRarityLotteryBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetRarityLotteryArray() { return __p.__vector_as_array<byte>(108); }
  public string TagPic { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagPicBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetTagPicBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetTagPicArray() { return __p.__vector_as_array<byte>(110); }
  public string Portrait { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPortraitBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetPortraitBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetPortraitArray() { return __p.__vector_as_array<byte>(112); }
  public string RecruitFront { get { int o = __p.__offset(114); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecruitFrontBytes() { return __p.__vector_as_span<byte>(114, 1); }
#else
  public ArraySegment<byte>? GetRecruitFrontBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public byte[] GetRecruitFrontArray() { return __p.__vector_as_array<byte>(114); }
  public string RecruitRear { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecruitRearBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetRecruitRearBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetRecruitRearArray() { return __p.__vector_as_array<byte>(116); }
  public string Honor { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHonorBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetHonorBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetHonorArray() { return __p.__vector_as_array<byte>(118); }

  public static Offset<LF.Table.DRheroes> CreateDRheroes(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset nicknameOffset = default(StringOffset),
      StringOffset sculptureOffset = default(StringOffset),
      StringOffset recruit_linshiOffset = default(StringOffset),
      StringOffset avatar_iconOffset = default(StringOffset),
      StringOffset tujian_iconOffset = default(StringOffset),
      StringOffset prefabOffset = default(StringOffset),
      StringOffset prefab_highOffset = default(StringOffset),
      float size = 0.0f,
      int handbook = 0,
      int order = 0,
      int quality_min = 0,
      int quality_max = 0,
      int poster = 0,
      int rarity = 0,
      int camp = 0,
      int Arms = 0,
      VectorOffset Label_1Offset = default(VectorOffset),
      VectorOffset Label_3Offset = default(VectorOffset),
      int eat_speed = 0,
      VectorOffset strengthOffset = default(VectorOffset),
      VectorOffset agilityOffset = default(VectorOffset),
      VectorOffset intelligenceOffset = default(VectorOffset),
      VectorOffset enduranceOffset = default(VectorOffset),
      VectorOffset luckOffset = default(VectorOffset),
      VectorOffset skillOffset = default(VectorOffset),
      VectorOffset skill_unlockOffset = default(VectorOffset),
      VectorOffset skill_levelup_numOffset = default(VectorOffset),
      int skill_levelup_item = 0,
      VectorOffset power_paraOffset = default(VectorOffset),
      int position = 0,
      int robot = 0,
      VectorOffset promoteOffset = default(VectorOffset),
      StringOffset avatar_spineOffset = default(StringOffset),
      StringOffset work_sculptureOffset = default(StringOffset),
      StringOffset TujianIcon2Offset = default(StringOffset),
      VectorOffset skill_levelup_num_newOffset = default(VectorOffset),
      VectorOffset show_conditionOffset = default(VectorOffset),
      StringOffset videoOffset = default(StringOffset),
      int tryReward = 0,
      int showType = 0,
      int arms = 0,
      VectorOffset skill_levelup_item_exchangeOffset = default(VectorOffset),
      StringOffset sculpture_roundOffset = default(StringOffset),
      int sound = 0,
      int story = 0,
      StringOffset prefab_pveOffset = default(StringOffset),
      StringOffset prefab_cityOffset = default(StringOffset),
      VectorOffset show_serverOffset = default(VectorOffset),
      int shelter_stationed = 0,
      int hide_in_city = 0,
      StringOffset rarity_lotteryOffset = default(StringOffset),
      StringOffset tag_picOffset = default(StringOffset),
      StringOffset portraitOffset = default(StringOffset),
      StringOffset recruit_frontOffset = default(StringOffset),
      StringOffset recruit_rearOffset = default(StringOffset),
      StringOffset honorOffset = default(StringOffset)) {
    builder.StartTable(58);
    DRheroes.AddHonor(builder, honorOffset);
    DRheroes.AddRecruitRear(builder, recruit_rearOffset);
    DRheroes.AddRecruitFront(builder, recruit_frontOffset);
    DRheroes.AddPortrait(builder, portraitOffset);
    DRheroes.AddTagPic(builder, tag_picOffset);
    DRheroes.AddRarityLottery(builder, rarity_lotteryOffset);
    DRheroes.AddHideInCity(builder, hide_in_city);
    DRheroes.AddShelterStationed(builder, shelter_stationed);
    DRheroes.AddShowServer(builder, show_serverOffset);
    DRheroes.AddPrefabCity(builder, prefab_cityOffset);
    DRheroes.AddPrefabPve(builder, prefab_pveOffset);
    DRheroes.AddStory(builder, story);
    DRheroes.AddSound(builder, sound);
    DRheroes.AddSculptureRound(builder, sculpture_roundOffset);
    DRheroes.AddSkillLevelupItemExchange(builder, skill_levelup_item_exchangeOffset);
    DRheroes.AddArms(builder, arms);
    DRheroes.AddShowType(builder, showType);
    DRheroes.AddTryReward(builder, tryReward);
    DRheroes.AddVideo(builder, videoOffset);
    DRheroes.AddShowCondition(builder, show_conditionOffset);
    DRheroes.AddSkillLevelupNumNew(builder, skill_levelup_num_newOffset);
    DRheroes.AddTujianIcon2(builder, TujianIcon2Offset);
    DRheroes.AddWorkSculpture(builder, work_sculptureOffset);
    DRheroes.AddAvatarSpine(builder, avatar_spineOffset);
    DRheroes.AddPromote(builder, promoteOffset);
    DRheroes.AddRobot(builder, robot);
    DRheroes.AddPosition(builder, position);
    DRheroes.AddPowerPara(builder, power_paraOffset);
    DRheroes.AddSkillLevelupItem(builder, skill_levelup_item);
    DRheroes.AddSkillLevelupNum(builder, skill_levelup_numOffset);
    DRheroes.AddSkillUnlock(builder, skill_unlockOffset);
    DRheroes.AddSkill(builder, skillOffset);
    DRheroes.AddLuck(builder, luckOffset);
    DRheroes.AddEndurance(builder, enduranceOffset);
    DRheroes.AddIntelligence(builder, intelligenceOffset);
    DRheroes.AddAgility(builder, agilityOffset);
    DRheroes.AddStrength(builder, strengthOffset);
    DRheroes.AddEatSpeed(builder, eat_speed);
    DRheroes.AddLabel3(builder, Label_3Offset);
    DRheroes.AddLabel1(builder, Label_1Offset);
    DRheroes.AddArms(builder, Arms);
    DRheroes.AddCamp(builder, camp);
    DRheroes.AddRarity(builder, rarity);
    DRheroes.AddPoster(builder, poster);
    DRheroes.AddQualityMax(builder, quality_max);
    DRheroes.AddQualityMin(builder, quality_min);
    DRheroes.AddOrder(builder, order);
    DRheroes.AddHandbook(builder, handbook);
    DRheroes.AddSize(builder, size);
    DRheroes.AddPrefabHigh(builder, prefab_highOffset);
    DRheroes.AddPrefab(builder, prefabOffset);
    DRheroes.AddTujianIcon(builder, tujian_iconOffset);
    DRheroes.AddAvatarIcon(builder, avatar_iconOffset);
    DRheroes.AddRecruitLinshi(builder, recruit_linshiOffset);
    DRheroes.AddSculpture(builder, sculptureOffset);
    DRheroes.AddNickname(builder, nicknameOffset);
    DRheroes.AddName(builder, nameOffset);
    DRheroes.AddId(builder, id);
    return DRheroes.EndDRheroes(builder);
  }

  public static void StartDRheroes(FlatBufferBuilder builder) { builder.StartTable(58); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddNickname(FlatBufferBuilder builder, StringOffset nicknameOffset) { builder.AddOffset(2, nicknameOffset.Value, 0); }
  public static void AddSculpture(FlatBufferBuilder builder, StringOffset sculptureOffset) { builder.AddOffset(3, sculptureOffset.Value, 0); }
  public static void AddRecruitLinshi(FlatBufferBuilder builder, StringOffset recruitLinshiOffset) { builder.AddOffset(4, recruitLinshiOffset.Value, 0); }
  public static void AddAvatarIcon(FlatBufferBuilder builder, StringOffset avatarIconOffset) { builder.AddOffset(5, avatarIconOffset.Value, 0); }
  public static void AddTujianIcon(FlatBufferBuilder builder, StringOffset tujianIconOffset) { builder.AddOffset(6, tujianIconOffset.Value, 0); }
  public static void AddPrefab(FlatBufferBuilder builder, StringOffset prefabOffset) { builder.AddOffset(7, prefabOffset.Value, 0); }
  public static void AddPrefabHigh(FlatBufferBuilder builder, StringOffset prefabHighOffset) { builder.AddOffset(8, prefabHighOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, float size) { builder.AddFloat(9, size, 0.0f); }
  public static void AddHandbook(FlatBufferBuilder builder, int handbook) { builder.AddInt(10, handbook, 0); }
  public static void AddOrder(FlatBufferBuilder builder, int order) { builder.AddInt(11, order, 0); }
  public static void AddQualityMin(FlatBufferBuilder builder, int qualityMin) { builder.AddInt(12, qualityMin, 0); }
  public static void AddQualityMax(FlatBufferBuilder builder, int qualityMax) { builder.AddInt(13, qualityMax, 0); }
  public static void AddPoster(FlatBufferBuilder builder, int poster) { builder.AddInt(14, poster, 0); }
  public static void AddRarity(FlatBufferBuilder builder, int rarity) { builder.AddInt(15, rarity, 0); }
  public static void AddCamp(FlatBufferBuilder builder, int camp) { builder.AddInt(16, camp, 0); }
  public static void AddArms(FlatBufferBuilder builder, int Arms) { builder.AddInt(17, Arms, 0); }
  public static void AddLabel1(FlatBufferBuilder builder, VectorOffset Label1Offset) { builder.AddOffset(18, Label1Offset.Value, 0); }
  public static VectorOffset CreateLabel1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLabel1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLabel1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLabel3(FlatBufferBuilder builder, VectorOffset Label3Offset) { builder.AddOffset(19, Label3Offset.Value, 0); }
  public static VectorOffset CreateLabel3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLabel3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLabel3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEatSpeed(FlatBufferBuilder builder, int eatSpeed) { builder.AddInt(20, eatSpeed, 0); }
  public static void AddStrength(FlatBufferBuilder builder, VectorOffset strengthOffset) { builder.AddOffset(21, strengthOffset.Value, 0); }
  public static VectorOffset CreateStrengthVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStrengthVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStrengthVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAgility(FlatBufferBuilder builder, VectorOffset agilityOffset) { builder.AddOffset(22, agilityOffset.Value, 0); }
  public static VectorOffset CreateAgilityVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAgilityVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAgilityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIntelligence(FlatBufferBuilder builder, VectorOffset intelligenceOffset) { builder.AddOffset(23, intelligenceOffset.Value, 0); }
  public static VectorOffset CreateIntelligenceVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIntelligenceVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartIntelligenceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEndurance(FlatBufferBuilder builder, VectorOffset enduranceOffset) { builder.AddOffset(24, enduranceOffset.Value, 0); }
  public static VectorOffset CreateEnduranceVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnduranceVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEnduranceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLuck(FlatBufferBuilder builder, VectorOffset luckOffset) { builder.AddOffset(25, luckOffset.Value, 0); }
  public static VectorOffset CreateLuckVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLuckVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLuckVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkill(FlatBufferBuilder builder, VectorOffset skillOffset) { builder.AddOffset(26, skillOffset.Value, 0); }
  public static VectorOffset CreateSkillVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillUnlock(FlatBufferBuilder builder, VectorOffset skillUnlockOffset) { builder.AddOffset(27, skillUnlockOffset.Value, 0); }
  public static VectorOffset CreateSkillUnlockVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillUnlockVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillUnlockVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillLevelupNum(FlatBufferBuilder builder, VectorOffset skillLevelupNumOffset) { builder.AddOffset(28, skillLevelupNumOffset.Value, 0); }
  public static VectorOffset CreateSkillLevelupNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillLevelupNumVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillLevelupNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillLevelupItem(FlatBufferBuilder builder, int skillLevelupItem) { builder.AddInt(29, skillLevelupItem, 0); }
  public static void AddPowerPara(FlatBufferBuilder builder, VectorOffset powerParaOffset) { builder.AddOffset(30, powerParaOffset.Value, 0); }
  public static VectorOffset CreatePowerParaVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePowerParaVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPowerParaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPosition(FlatBufferBuilder builder, int position) { builder.AddInt(31, position, 0); }
  public static void AddRobot(FlatBufferBuilder builder, int robot) { builder.AddInt(32, robot, 0); }
  public static void AddPromote(FlatBufferBuilder builder, VectorOffset promoteOffset) { builder.AddOffset(33, promoteOffset.Value, 0); }
  public static VectorOffset CreatePromoteVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePromoteVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPromoteVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAvatarSpine(FlatBufferBuilder builder, StringOffset avatarSpineOffset) { builder.AddOffset(34, avatarSpineOffset.Value, 0); }
  public static void AddWorkSculpture(FlatBufferBuilder builder, StringOffset workSculptureOffset) { builder.AddOffset(35, workSculptureOffset.Value, 0); }
  public static void AddTujianIcon2(FlatBufferBuilder builder, StringOffset TujianIcon2Offset) { builder.AddOffset(36, TujianIcon2Offset.Value, 0); }
  public static void AddSkillLevelupNumNew(FlatBufferBuilder builder, VectorOffset skillLevelupNumNewOffset) { builder.AddOffset(37, skillLevelupNumNewOffset.Value, 0); }
  public static VectorOffset CreateSkillLevelupNumNewVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillLevelupNumNewVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillLevelupNumNewVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowCondition(FlatBufferBuilder builder, VectorOffset showConditionOffset) { builder.AddOffset(38, showConditionOffset.Value, 0); }
  public static VectorOffset CreateShowConditionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowConditionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartShowConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVideo(FlatBufferBuilder builder, StringOffset videoOffset) { builder.AddOffset(39, videoOffset.Value, 0); }
  public static void AddTryReward(FlatBufferBuilder builder, int tryReward) { builder.AddInt(40, tryReward, 0); }
  public static void AddShowType(FlatBufferBuilder builder, int showType) { builder.AddInt(41, showType, 0); }
  public static void AddArms(FlatBufferBuilder builder, int arms) { builder.AddInt(42, arms, 0); }
  public static void AddSkillLevelupItemExchange(FlatBufferBuilder builder, VectorOffset skillLevelupItemExchangeOffset) { builder.AddOffset(43, skillLevelupItemExchangeOffset.Value, 0); }
  public static VectorOffset CreateSkillLevelupItemExchangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillLevelupItemExchangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillLevelupItemExchangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSculptureRound(FlatBufferBuilder builder, StringOffset sculptureRoundOffset) { builder.AddOffset(44, sculptureRoundOffset.Value, 0); }
  public static void AddSound(FlatBufferBuilder builder, int sound) { builder.AddInt(45, sound, 0); }
  public static void AddStory(FlatBufferBuilder builder, int story) { builder.AddInt(46, story, 0); }
  public static void AddPrefabPve(FlatBufferBuilder builder, StringOffset prefabPveOffset) { builder.AddOffset(47, prefabPveOffset.Value, 0); }
  public static void AddPrefabCity(FlatBufferBuilder builder, StringOffset prefabCityOffset) { builder.AddOffset(48, prefabCityOffset.Value, 0); }
  public static void AddShowServer(FlatBufferBuilder builder, VectorOffset showServerOffset) { builder.AddOffset(49, showServerOffset.Value, 0); }
  public static VectorOffset CreateShowServerVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateShowServerVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartShowServerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShelterStationed(FlatBufferBuilder builder, int shelterStationed) { builder.AddInt(50, shelterStationed, 0); }
  public static void AddHideInCity(FlatBufferBuilder builder, int hideInCity) { builder.AddInt(51, hideInCity, 0); }
  public static void AddRarityLottery(FlatBufferBuilder builder, StringOffset rarityLotteryOffset) { builder.AddOffset(52, rarityLotteryOffset.Value, 0); }
  public static void AddTagPic(FlatBufferBuilder builder, StringOffset tagPicOffset) { builder.AddOffset(53, tagPicOffset.Value, 0); }
  public static void AddPortrait(FlatBufferBuilder builder, StringOffset portraitOffset) { builder.AddOffset(54, portraitOffset.Value, 0); }
  public static void AddRecruitFront(FlatBufferBuilder builder, StringOffset recruitFrontOffset) { builder.AddOffset(55, recruitFrontOffset.Value, 0); }
  public static void AddRecruitRear(FlatBufferBuilder builder, StringOffset recruitRearOffset) { builder.AddOffset(56, recruitRearOffset.Value, 0); }
  public static void AddHonor(FlatBufferBuilder builder, StringOffset honorOffset) { builder.AddOffset(57, honorOffset.Value, 0); }
  public static Offset<LF.Table.DRheroes> EndDRheroes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRheroes>(o);
  }
};

public struct Table_heroes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_heroes GetRootAsTable_heroes(ByteBuffer _bb) { return GetRootAsTable_heroes(_bb, new Table_heroes()); }
  public static Table_heroes GetRootAsTable_heroes(ByteBuffer _bb, Table_heroes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_heroes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRheroes? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRheroes?)(new LF.Table.DRheroes()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_heroes> CreateTable_heroes(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_heroes.AddData(builder, dataOffset);
    return Table_heroes.EndTable_heroes(builder);
  }

  public static void StartTable_heroes(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRheroes>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRheroes>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_heroes> EndTable_heroes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_heroes>(o);
  }
  public static void FinishTable_heroesBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_heroes> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_heroesBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_heroes> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
