// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Chanto.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRscience : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRscience GetRootAsDRscience(ByteBuffer _bb) { return GetRootAsDRscience(_bb, new DRscience()); }
  public static DRscience GetRootAsDRscience(ByteBuffer _bb, DRscience obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRscience __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Tab { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }
  public int Desc2 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(14); }
  public int Position(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PositionLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPositionBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetPositionBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetPositionArray() { return __p.__vector_as_array<int>(16); }
  public string Line(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LineLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Relation(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RelationLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRelationBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetRelationBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetRelationArray() { return __p.__vector_as_array<int>(20); }
  public string Para1 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPara1Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPara1Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPara1Array() { return __p.__vector_as_array<byte>(22); }
  public int Show { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Desc2Para { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Info(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InfoLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ObjectAlies { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectAliesBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetObjectAliesBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetObjectAliesArray() { return __p.__vector_as_array<byte>(30); }
  public int Important { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Pic { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPicBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetPicBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetPicArray() { return __p.__vector_as_array<byte>(34); }
  public string DescriptionSimple { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionSimpleBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetDescriptionSimpleBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetDescriptionSimpleArray() { return __p.__vector_as_array<byte>(36); }
  public int Descsp { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LF.Table.DRscience> CreateDRscience(FlatBufferBuilder builder,
      int id = 0,
      int tab = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      int desc2 = 0,
      StringOffset iconOffset = default(StringOffset),
      VectorOffset positionOffset = default(VectorOffset),
      VectorOffset lineOffset = default(VectorOffset),
      VectorOffset relationOffset = default(VectorOffset),
      StringOffset para1Offset = default(StringOffset),
      int show = 0,
      int desc2_para = 0,
      VectorOffset infoOffset = default(VectorOffset),
      StringOffset object_aliesOffset = default(StringOffset),
      int important = 0,
      StringOffset picOffset = default(StringOffset),
      StringOffset description_simpleOffset = default(StringOffset),
      int descsp = 0) {
    builder.StartTable(18);
    DRscience.AddDescsp(builder, descsp);
    DRscience.AddDescriptionSimple(builder, description_simpleOffset);
    DRscience.AddPic(builder, picOffset);
    DRscience.AddImportant(builder, important);
    DRscience.AddObjectAlies(builder, object_aliesOffset);
    DRscience.AddInfo(builder, infoOffset);
    DRscience.AddDesc2Para(builder, desc2_para);
    DRscience.AddShow(builder, show);
    DRscience.AddPara1(builder, para1Offset);
    DRscience.AddRelation(builder, relationOffset);
    DRscience.AddLine(builder, lineOffset);
    DRscience.AddPosition(builder, positionOffset);
    DRscience.AddIcon(builder, iconOffset);
    DRscience.AddDesc2(builder, desc2);
    DRscience.AddDescription(builder, descriptionOffset);
    DRscience.AddName(builder, nameOffset);
    DRscience.AddTab(builder, tab);
    DRscience.AddId(builder, id);
    return DRscience.EndDRscience(builder);
  }

  public static void StartDRscience(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTab(FlatBufferBuilder builder, int tab) { builder.AddInt(1, tab, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(3, descriptionOffset.Value, 0); }
  public static void AddDesc2(FlatBufferBuilder builder, int desc2) { builder.AddInt(4, desc2, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(5, iconOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, VectorOffset positionOffset) { builder.AddOffset(6, positionOffset.Value, 0); }
  public static VectorOffset CreatePositionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLine(FlatBufferBuilder builder, VectorOffset lineOffset) { builder.AddOffset(7, lineOffset.Value, 0); }
  public static VectorOffset CreateLineVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLineVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLineVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRelation(FlatBufferBuilder builder, VectorOffset relationOffset) { builder.AddOffset(8, relationOffset.Value, 0); }
  public static VectorOffset CreateRelationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRelationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRelationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPara1(FlatBufferBuilder builder, StringOffset para1Offset) { builder.AddOffset(9, para1Offset.Value, 0); }
  public static void AddShow(FlatBufferBuilder builder, int show) { builder.AddInt(10, show, 0); }
  public static void AddDesc2Para(FlatBufferBuilder builder, int desc2Para) { builder.AddInt(11, desc2Para, 0); }
  public static void AddInfo(FlatBufferBuilder builder, VectorOffset infoOffset) { builder.AddOffset(12, infoOffset.Value, 0); }
  public static VectorOffset CreateInfoVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInfoVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObjectAlies(FlatBufferBuilder builder, StringOffset objectAliesOffset) { builder.AddOffset(13, objectAliesOffset.Value, 0); }
  public static void AddImportant(FlatBufferBuilder builder, int important) { builder.AddInt(14, important, 0); }
  public static void AddPic(FlatBufferBuilder builder, StringOffset picOffset) { builder.AddOffset(15, picOffset.Value, 0); }
  public static void AddDescriptionSimple(FlatBufferBuilder builder, StringOffset descriptionSimpleOffset) { builder.AddOffset(16, descriptionSimpleOffset.Value, 0); }
  public static void AddDescsp(FlatBufferBuilder builder, int descsp) { builder.AddInt(17, descsp, 0); }
  public static Offset<LF.Table.DRscience> EndDRscience(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRscience>(o);
  }
};

public struct Table_science : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_science GetRootAsTable_science(ByteBuffer _bb) { return GetRootAsTable_science(_bb, new Table_science()); }
  public static Table_science GetRootAsTable_science(ByteBuffer _bb, Table_science obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_science __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRscience? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRscience?)(new LF.Table.DRscience()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_science> CreateTable_science(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_science.AddData(builder, dataOffset);
    return Table_science.EndTable_science(builder);
  }

  public static void StartTable_science(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRscience>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRscience>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_science> EndTable_science(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_science>(o);
  }
  public static void FinishTable_scienceBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_science> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_scienceBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_science> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
