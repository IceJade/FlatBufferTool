// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using LF.Table;
using System.Collections.Generic;

namespace LF
{
    #region Table

	public sealed class GoodsTable : BaseTable
    {
        private Table_goods table = default(Table_goods);

        private Dictionary<int, GoodsDataRow> data_row = new Dictionary<int, GoodsDataRow>(128);
        
        public static string g_TableFileName = "goods";

        #region Data Method

        public override bool GetBoolValue(int id, string column, bool defaultValue = false)
        {
            bool result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_goods.GetBoolValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short GetShortValue(int id, string column, short defaultValue = 0)
        {
            short result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_goods.GetShortValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetIntValue(int id, string column, int defaultValue = 0)
        {
            int result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "type": { result = datarow.Type; break; }
                case "color": { result = datarow.Color; break; }
                case "lv": { result = datarow.Lv; break; }
                case "lv_limit": { result = datarow.LvLimit; break; }
                case "page": { result = datarow.Page; break; }
                case "pages": { result = datarow.Pages; break; }
                case "pack_tab_type": { result = datarow.PackTabType; break; }
                case "use": { result = datarow.Use; break; }
                case "order_num": { result = datarow.OrderNum; break; }
                case "store_order": { result = datarow.StoreOrder; break; }
                case "price": { result = datarow.Price; break; }
                case "price_hot": { result = datarow.PriceHot; break; }
                case "is_gift": { result = datarow.IsGift; break; }
                case "alliance_order": { result = datarow.AllianceOrder; break; }
                case "price_all": { result = datarow.PriceAll; break; }
                case "type2": { result = datarow.Type2; break; }
                case "useall": { result = datarow.Useall; break; }
                case "pagehot": { result = datarow.Pagehot; break; }
                case "save_loc": { result = datarow.SaveLoc; break; }
                case "group_num": { result = datarow.GroupNum; break; }
                case "weight": { result = datarow.Weight; break; }
                case "des_para": { result = datarow.DesPara; break; }
                case "is_show": { result = datarow.IsShow; break; }
                case "heroid": { result = datarow.Heroid; break; }
                case "denyBuy": { result = datarow.DenyBuy; break; }
                case "auto_open": { result = datarow.AutoOpen; break; }
                case "not_gift": { result = datarow.NotGift; break; }
                case "open_effect": { result = datarow.OpenEffect; break; }
                case "alliance_lv_limit": { result = datarow.AllianceLvLimit; break; }
                case "buy_times_limit": { result = datarow.BuyTimesLimit; break; }
                case "usemax": { result = datarow.Usemax; break; }
                case "use_condition": { result = datarow.UseCondition; break; }
                case "bauxite": { result = datarow.Bauxite; break; }
                case "recycling_alliance_score": { result = datarow.RecyclingAllianceScore; break; }
                case "is_send": { result = datarow.IsSend; break; }

                default: { GameFramework.Log.Error("Table_goods.GetIntValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float GetFloatValue(int id, string column, float defaultValue = 0.0f)
        {
            float result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "type": { result = datarow.Type; break; }
                case "color": { result = datarow.Color; break; }
                case "lv": { result = datarow.Lv; break; }
                case "lv_limit": { result = datarow.LvLimit; break; }
                case "page": { result = datarow.Page; break; }
                case "pages": { result = datarow.Pages; break; }
                case "pack_tab_type": { result = datarow.PackTabType; break; }
                case "use": { result = datarow.Use; break; }
                case "order_num": { result = datarow.OrderNum; break; }
                case "store_order": { result = datarow.StoreOrder; break; }
                case "price": { result = datarow.Price; break; }
                case "price_hot": { result = datarow.PriceHot; break; }
                case "is_gift": { result = datarow.IsGift; break; }
                case "alliance_order": { result = datarow.AllianceOrder; break; }
                case "price_all": { result = datarow.PriceAll; break; }
                case "type2": { result = datarow.Type2; break; }
                case "useall": { result = datarow.Useall; break; }
                case "pagehot": { result = datarow.Pagehot; break; }
                case "save_loc": { result = datarow.SaveLoc; break; }
                case "group_num": { result = datarow.GroupNum; break; }
                case "weight": { result = datarow.Weight; break; }
                case "des_para": { result = datarow.DesPara; break; }
                case "is_show": { result = datarow.IsShow; break; }
                case "heroid": { result = datarow.Heroid; break; }
                case "denyBuy": { result = datarow.DenyBuy; break; }
                case "auto_open": { result = datarow.AutoOpen; break; }
                case "not_gift": { result = datarow.NotGift; break; }
                case "open_effect": { result = datarow.OpenEffect; break; }
                case "alliance_lv_limit": { result = datarow.AllianceLvLimit; break; }
                case "buy_times_limit": { result = datarow.BuyTimesLimit; break; }
                case "usemax": { result = datarow.Usemax; break; }
                case "use_condition": { result = datarow.UseCondition; break; }
                case "bauxite": { result = datarow.Bauxite; break; }
                case "recycling_alliance_score": { result = datarow.RecyclingAllianceScore; break; }
                case "is_send": { result = datarow.IsSend; break; }

                default: { GameFramework.Log.Error("Table_goods.GetFloatValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string GetStringValue(int id, string column, string defaultValue = "")
        {
            string result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id.ToString(); break; }
                case "name": { result = datarow.Name; break; }
                case "description": { result = datarow.Description; break; }
                case "icon": { result = datarow.Icon; break; }
                case "type": { result = datarow.Type.ToString(); break; }
                case "color": { result = datarow.Color.ToString(); break; }
                case "lv": { result = datarow.Lv.ToString(); break; }
                case "lv_limit": { result = datarow.LvLimit.ToString(); break; }
                case "page": { result = datarow.Page.ToString(); break; }
                case "pages": { result = datarow.Pages.ToString(); break; }
                case "pack_tab_type": { result = datarow.PackTabType.ToString(); break; }
                case "use": { result = datarow.Use.ToString(); break; }
                case "order_num": { result = datarow.OrderNum.ToString(); break; }
                case "store_order": { result = datarow.StoreOrder.ToString(); break; }
                case "price": { result = datarow.Price.ToString(); break; }
                case "price_hot": { result = datarow.PriceHot.ToString(); break; }
                case "is_gift": { result = datarow.IsGift.ToString(); break; }
                case "alliance_order": { result = datarow.AllianceOrder.ToString(); break; }
                case "price_all": { result = datarow.PriceAll.ToString(); break; }
                case "type2": { result = datarow.Type2.ToString(); break; }
                case "useall": { result = datarow.Useall.ToString(); break; }
                case "para1": { result = datarow.Para1; break; }
                case "para": { result = datarow.Para; break; }
                case "para3": { result = datarow.Para3; break; }
                case "pagehot": { result = datarow.Pagehot.ToString(); break; }
                case "save_loc": { result = datarow.SaveLoc.ToString(); break; }
                case "group_num": { result = datarow.GroupNum.ToString(); break; }
                case "weight": { result = datarow.Weight.ToString(); break; }
                case "des_para": { result = datarow.DesPara.ToString(); break; }
                case "is_show": { result = datarow.IsShow.ToString(); break; }
                case "para2": { result = datarow.Para2; break; }
                case "para4": { result = datarow.Para4; break; }
                case "heroid": { result = datarow.Heroid.ToString(); break; }
                case "denyBuy": { result = datarow.DenyBuy.ToString(); break; }
                case "auto_open": { result = datarow.AutoOpen.ToString(); break; }
                case "para5": { result = datarow.Para5; break; }
                case "not_gift": { result = datarow.NotGift.ToString(); break; }
                case "open_effect": { result = datarow.OpenEffect.ToString(); break; }
                case "alliance_lv_limit": { result = datarow.AllianceLvLimit.ToString(); break; }
                case "buy_times_limit": { result = datarow.BuyTimesLimit.ToString(); break; }
                case "usemax": { result = datarow.Usemax.ToString(); break; }
                case "use_condition": { result = datarow.UseCondition.ToString(); break; }
                case "bauxite": { result = datarow.Bauxite.ToString(); break; }
                case "recycling_alliance_score": { result = datarow.RecyclingAllianceScore.ToString(); break; }
                case "is_send": { result = datarow.IsSend.ToString(); break; }

                default: { GameFramework.Log.Error("Table_goods.GetStringValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override bool[] GetBoolArray(int id, string column)
        {
            bool[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_goods.GetBoolArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short[] GetShortArray(int id, string column)
        {
            short[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_goods.GetShortArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int[] GetIntArray(int id, string column)
        {
            int[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "go_to": { result = datarow.GoToArray; break; }
                case "recycleGoods": { result = datarow.RecycleGoodsArray; break; }

                default: { GameFramework.Log.Error("Table_goods.GetIntArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float[] GetFloatArray(int id, string column)
        {
            float[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;
                
            switch (column)
            {

                default: { GameFramework.Log.Error("Table_goods.GetFloatArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string[] GetStringArray(int id, string column)
        {
            string[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "sales": { result = datarow.SalesArray; break; }
                case "name_value": { result = datarow.NameValueArray; break; }
                case "icon_loc": { result = datarow.IconLocArray; break; }
                case "rate": { result = datarow.RateArray; break; }

                default: { GameFramework.Log.Error("Table_goods.GetStringArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override string GetStringArrayItem(int id, string column, int index, string defaultValue = "")
        {
            string result = defaultValue;

            int length = this.GetStringArrayLength(id, column);
            if (index < 0 || index >= length)
            {
                GameFramework.Log.Error("Table_goods.GetStringArrayItem => index out of array length({0}), [id:{1}, column:{2}, index:{3}]", length, id, column, index);
                return result;
            }
            
            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "sales": { result = datarow.SalesArray[index]; break; }
                case "name_value": { result = datarow.NameValueArray[index]; break; }
                case "icon_loc": { result = datarow.IconLocArray[index]; break; }
                case "rate": { result = datarow.RateArray[index]; break; }

                default: { GameFramework.Log.Error("Table_goods.GetStringArrayItem => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetStringArrayLength(int id, string column)
        {
            int result = 0;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "sales": { result = datarow.SalesArrayLength; break; }
                case "name_value": { result = datarow.NameValueArrayLength; break; }
                case "icon_loc": { result = datarow.IconLocArrayLength; break; }
                case "rate": { result = datarow.RateArrayLength; break; }

                default: { GameFramework.Log.Error("Table_goods.GetStringArrayLength => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override Dictionary<int, int> GetDictionaryII(int id, string column) 
        {
            Dictionary<int, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "sales": { result = datarow.SalesDic; break; }

                default: { GameFramework.Log.Error("Table_goods.GetDictionaryII => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<int, string> GetDictionaryIS(int id, string column) 
        {
            Dictionary<int, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_goods.GetDictionaryIS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, int> GetDictionarySI(int id, string column) 
        {
            Dictionary<string, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_goods.GetDictionarySI => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, string> GetDictionarySS(int id, string column) 
        {
            Dictionary<string, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "icon_loc": { result = datarow.IconLocDic; break; }

                default: { GameFramework.Log.Error("Table_goods.GetDictionarySS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        #endregion Data Method

        #region DataRow Method
        
        /// <summary>
        /// 获得数据行的数量
        /// </summary>
        /// <returns></returns>
        public override int GetDataCount() 
        {
            Table_goods table = this.GetTable();
            if (null == table.ByteBuffer)
                return 0;

            return table.DataLength; 
        }
        
        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public GoodsDataRow GetDataRow(int id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_goods table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            if (null != row_index && row_index.ContainsKey(id))
            {
                DRgoods? data = table.Data(row_index[id]);
                if (data.HasValue && data.Value.Id == id)
                {
                    GoodsDataRow datarow = new GoodsDataRow(data.Value, row_index[id]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DRgoods? data = table.Data(i);
                if (data.HasValue)
                {
                    GoodsDataRow datarow = new GoodsDataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过索引获取行数据
        /// </summary>
        /// <param name="index">索引,即行号,从0开始</param>
        /// <returns></returns>
        public GoodsDataRow GetDataRowByIndex(int index)
        {
            Table_goods table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;

            if (index < 0 || index >= table.DataLength)
                return null;

            DRgoods? data = table.Data(index);
            if (data.HasValue)
            {
                if (!data_row.ContainsKey(data.Value.Id))
                {
                    GoodsDataRow datarow = new GoodsDataRow(data.Value, index);
                    data_row.Add(datarow.Id, datarow);
                }

                return data_row[data.Value.Id];
            }

            return null;
        }
        
        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<int, GoodsDataRow> GetAllData()
        {
            Table_goods table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DRgoods? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        GoodsDataRow datarow = new GoodsDataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="callback"></param>
        public override void VisitTable(System.Func<BaseDataRow, bool> callback)
        {
            if (null == callback)
                return;

            this.GetAllData();

            var iterator = data_row.GetEnumerator();
            try
            {
                bool _stop = false;
                while (iterator.MoveNext() && _stop == false)
                {
                    _stop = callback(iterator.Current.Value);
                }
            }
            finally
            {
                iterator.Dispose();
            }
        }
        
        public override BaseDataRow GetTableRow(int id) 
        { 
            return this.GetDataRow(id); 
        }

        public override BaseDataRow GetTableRow(string id)
        {
            int rowId = 0;
            if(int.TryParse(id, out rowId))
                return this.GetDataRow(rowId);

            return null;
        }

        public override BaseDataRow GetTableRowByIndex(int index)
        {
            return this.GetDataRowByIndex(index);
        }

        #endregion DataRow Method
        
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_goods.GetRootAsTable_goods(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_goods GetTable()
        {
            LoadTable();

            return table;
        }
        
        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "goods.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "goods_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public class GoodsBaseDataRow : BaseDataRow
    {
        protected DRgoods _datarow;

        public GoodsBaseDataRow(DRgoods datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }
        
        public override CSLuaTable GetLuaTable()
        {
            base.GetLuaTable();

            if (_LuaDataRow.Length <= 0)
            {
                if(this.HasKey("id")) _LuaDataRow.Set("id", this.Id);
                if(this.HasKey("name")) _LuaDataRow.Set("name", this.Name);
                if(this.HasKey("description")) _LuaDataRow.Set("description", this.Description);
                if(this.HasKey("icon")) _LuaDataRow.Set("icon", this.Icon);
                if(this.HasKey("type")) _LuaDataRow.Set("type", this.Type);
                if(this.HasKey("color")) _LuaDataRow.Set("color", this.Color);
                if(this.HasKey("lv")) _LuaDataRow.Set("lv", this.Lv);
                if(this.HasKey("lv_limit")) _LuaDataRow.Set("lv_limit", this.LvLimit);
                if(this.HasKey("page")) _LuaDataRow.Set("page", this.Page);
                if(this.HasKey("pages")) _LuaDataRow.Set("pages", this.Pages);
                if(this.HasKey("pack_tab_type")) _LuaDataRow.Set("pack_tab_type", this.PackTabType);
                if(this.HasKey("use")) _LuaDataRow.Set("use", this.Use);
                if(this.HasKey("order_num")) _LuaDataRow.Set("order_num", this.OrderNum);
                if(this.HasKey("store_order")) _LuaDataRow.Set("store_order", this.StoreOrder);
                if(this.HasKey("price")) _LuaDataRow.Set("price", this.Price);
                if(this.HasKey("price_hot")) _LuaDataRow.Set("price_hot", this.PriceHot);
                if(this.HasKey("is_gift")) _LuaDataRow.Set("is_gift", this.IsGift);
                if(this.HasKey("sales")) _LuaDataRow.Set("sales", this.SalesArray);
                if(this.HasKey("alliance_order")) _LuaDataRow.Set("alliance_order", this.AllianceOrder);
                if(this.HasKey("price_all")) _LuaDataRow.Set("price_all", this.PriceAll);
                if(this.HasKey("type2")) _LuaDataRow.Set("type2", this.Type2);
                if(this.HasKey("useall")) _LuaDataRow.Set("useall", this.Useall);
                if(this.HasKey("para1")) _LuaDataRow.Set("para1", this.Para1);
                if(this.HasKey("name_value")) _LuaDataRow.Set("name_value", this.NameValueArray);
                if(this.HasKey("para")) _LuaDataRow.Set("para", this.Para);
                if(this.HasKey("para3")) _LuaDataRow.Set("para3", this.Para3);
                if(this.HasKey("pagehot")) _LuaDataRow.Set("pagehot", this.Pagehot);
                if(this.HasKey("save_loc")) _LuaDataRow.Set("save_loc", this.SaveLoc);
                if(this.HasKey("group_num")) _LuaDataRow.Set("group_num", this.GroupNum);
                if(this.HasKey("weight")) _LuaDataRow.Set("weight", this.Weight);
                if(this.HasKey("des_para")) _LuaDataRow.Set("des_para", this.DesPara);
                if(this.HasKey("is_show")) _LuaDataRow.Set("is_show", this.IsShow);
                if(this.HasKey("para2")) _LuaDataRow.Set("para2", this.Para2);
                if(this.HasKey("icon_loc")) _LuaDataRow.Set("icon_loc", this.IconLocArray);
                if(this.HasKey("para4")) _LuaDataRow.Set("para4", this.Para4);
                if(this.HasKey("heroid")) _LuaDataRow.Set("heroid", this.Heroid);
                if(this.HasKey("denyBuy")) _LuaDataRow.Set("denyBuy", this.DenyBuy);
                if(this.HasKey("auto_open")) _LuaDataRow.Set("auto_open", this.AutoOpen);
                if(this.HasKey("go_to")) _LuaDataRow.Set("go_to", this.GoToArray);
                if(this.HasKey("para5")) _LuaDataRow.Set("para5", this.Para5);
                if(this.HasKey("not_gift")) _LuaDataRow.Set("not_gift", this.NotGift);
                if(this.HasKey("open_effect")) _LuaDataRow.Set("open_effect", this.OpenEffect);
                if(this.HasKey("alliance_lv_limit")) _LuaDataRow.Set("alliance_lv_limit", this.AllianceLvLimit);
                if(this.HasKey("rate")) _LuaDataRow.Set("rate", this.RateArray);
                if(this.HasKey("recycleGoods")) _LuaDataRow.Set("recycleGoods", this.RecycleGoodsArray);
                if(this.HasKey("buy_times_limit")) _LuaDataRow.Set("buy_times_limit", this.BuyTimesLimit);
                if(this.HasKey("usemax")) _LuaDataRow.Set("usemax", this.Usemax);
                if(this.HasKey("use_condition")) _LuaDataRow.Set("use_condition", this.UseCondition);
                if(this.HasKey("bauxite")) _LuaDataRow.Set("bauxite", this.Bauxite);
                if(this.HasKey("recycling_alliance_score")) _LuaDataRow.Set("recycling_alliance_score", this.RecyclingAllianceScore);
                if(this.HasKey("is_send")) _LuaDataRow.Set("is_send", this.IsSend);

            }

            return _LuaDataRow;
        }

        protected override LuaValue GetLuaValue(string rowId)
        {
            LuaValue luaValue = new LuaValue();
            switch (rowId)
            {
                case "id": { luaValue.SetValue(this.Id); break; }
                case "name": { luaValue.SetValue(this.Name); break; }
                case "description": { luaValue.SetValue(this.Description); break; }
                case "icon": { luaValue.SetValue(this.Icon); break; }
                case "type": { luaValue.SetValue(this.Type); break; }
                case "color": { luaValue.SetValue(this.Color); break; }
                case "lv": { luaValue.SetValue(this.Lv); break; }
                case "lv_limit": { luaValue.SetValue(this.LvLimit); break; }
                case "page": { luaValue.SetValue(this.Page); break; }
                case "pages": { luaValue.SetValue(this.Pages); break; }
                case "pack_tab_type": { luaValue.SetValue(this.PackTabType); break; }
                case "use": { luaValue.SetValue(this.Use); break; }
                case "order_num": { luaValue.SetValue(this.OrderNum); break; }
                case "store_order": { luaValue.SetValue(this.StoreOrder); break; }
                case "price": { luaValue.SetValue(this.Price); break; }
                case "price_hot": { luaValue.SetValue(this.PriceHot); break; }
                case "is_gift": { luaValue.SetValue(this.IsGift); break; }
                case "sales": { luaValue.SetValue(this.SalesDic); break; }
                case "alliance_order": { luaValue.SetValue(this.AllianceOrder); break; }
                case "price_all": { luaValue.SetValue(this.PriceAll); break; }
                case "type2": { luaValue.SetValue(this.Type2); break; }
                case "useall": { luaValue.SetValue(this.Useall); break; }
                case "para1": { luaValue.SetValue(this.Para1); break; }
                case "name_value": { luaValue.SetValue(this.NameValueArray); break; }
                case "para": { luaValue.SetValue(this.Para); break; }
                case "para3": { luaValue.SetValue(this.Para3); break; }
                case "pagehot": { luaValue.SetValue(this.Pagehot); break; }
                case "save_loc": { luaValue.SetValue(this.SaveLoc); break; }
                case "group_num": { luaValue.SetValue(this.GroupNum); break; }
                case "weight": { luaValue.SetValue(this.Weight); break; }
                case "des_para": { luaValue.SetValue(this.DesPara); break; }
                case "is_show": { luaValue.SetValue(this.IsShow); break; }
                case "para2": { luaValue.SetValue(this.Para2); break; }
                case "icon_loc": { luaValue.SetValue(this.IconLocDic); break; }
                case "para4": { luaValue.SetValue(this.Para4); break; }
                case "heroid": { luaValue.SetValue(this.Heroid); break; }
                case "denyBuy": { luaValue.SetValue(this.DenyBuy); break; }
                case "auto_open": { luaValue.SetValue(this.AutoOpen); break; }
                case "go_to": { luaValue.SetValue(this.GoToArray); break; }
                case "para5": { luaValue.SetValue(this.Para5); break; }
                case "not_gift": { luaValue.SetValue(this.NotGift); break; }
                case "open_effect": { luaValue.SetValue(this.OpenEffect); break; }
                case "alliance_lv_limit": { luaValue.SetValue(this.AllianceLvLimit); break; }
                case "rate": { luaValue.SetValue(this.RateArray); break; }
                case "recycleGoods": { luaValue.SetValue(this.RecycleGoodsArray); break; }
                case "buy_times_limit": { luaValue.SetValue(this.BuyTimesLimit); break; }
                case "usemax": { luaValue.SetValue(this.Usemax); break; }
                case "use_condition": { luaValue.SetValue(this.UseCondition); break; }
                case "bauxite": { luaValue.SetValue(this.Bauxite); break; }
                case "recycling_alliance_score": { luaValue.SetValue(this.RecyclingAllianceScore); break; }
                case "is_send": { luaValue.SetValue(this.IsSend); break; }

                default:
                    break;
            }

            return luaValue;
        }
        
        public override bool HasKey(string column)
        {
            bool result = false;

            switch (column)
            {
                case "id": { result = !this.IsEmpty(_datarow.Id); break; }
                case "name": { result = !this.IsEmpty(this.Name); break; }
                case "description": { result = !this.IsEmpty(this.Description); break; }
                case "icon": { result = !this.IsEmpty(this.Icon); break; }
                case "type": { result = !this.IsEmpty(_datarow.Type); break; }
                case "color": { result = !this.IsEmpty(_datarow.Color); break; }
                case "lv": { result = !this.IsEmpty(_datarow.Lv); break; }
                case "lv_limit": { result = !this.IsEmpty(_datarow.LvLimit); break; }
                case "page": { result = !this.IsEmpty(_datarow.Page); break; }
                case "pages": { result = !this.IsEmpty(_datarow.Pages); break; }
                case "pack_tab_type": { result = !this.IsEmpty(_datarow.PackTabType); break; }
                case "use": { result = !this.IsEmpty(_datarow.Use); break; }
                case "order_num": { result = !this.IsEmpty(_datarow.OrderNum); break; }
                case "store_order": { result = !this.IsEmpty(_datarow.StoreOrder); break; }
                case "price": { result = !this.IsEmpty(_datarow.Price); break; }
                case "price_hot": { result = !this.IsEmpty(_datarow.PriceHot); break; }
                case "is_gift": { result = !this.IsEmpty(_datarow.IsGift); break; }
                case "sales": { result = _datarow.SalesLength > 0; break; }
                case "alliance_order": { result = !this.IsEmpty(_datarow.AllianceOrder); break; }
                case "price_all": { result = !this.IsEmpty(_datarow.PriceAll); break; }
                case "type2": { result = !this.IsEmpty(_datarow.Type2); break; }
                case "useall": { result = !this.IsEmpty(_datarow.Useall); break; }
                case "para1": { result = !this.IsEmpty(this.Para1); break; }
                case "name_value": { result = _datarow.NameValueLength > 0; break; }
                case "para": { result = !this.IsEmpty(this.Para); break; }
                case "para3": { result = !this.IsEmpty(this.Para3); break; }
                case "pagehot": { result = !this.IsEmpty(_datarow.Pagehot); break; }
                case "save_loc": { result = !this.IsEmpty(_datarow.SaveLoc); break; }
                case "group_num": { result = !this.IsEmpty(_datarow.GroupNum); break; }
                case "weight": { result = !this.IsEmpty(_datarow.Weight); break; }
                case "des_para": { result = !this.IsEmpty(_datarow.DesPara); break; }
                case "is_show": { result = !this.IsEmpty(_datarow.IsShow); break; }
                case "para2": { result = !this.IsEmpty(this.Para2); break; }
                case "icon_loc": { result = _datarow.IconLocLength > 0; break; }
                case "para4": { result = !this.IsEmpty(this.Para4); break; }
                case "heroid": { result = !this.IsEmpty(_datarow.Heroid); break; }
                case "denyBuy": { result = !this.IsEmpty(_datarow.DenyBuy); break; }
                case "auto_open": { result = !this.IsEmpty(_datarow.AutoOpen); break; }
                case "go_to": { result = _datarow.GoToLength > 0; break; }
                case "para5": { result = !this.IsEmpty(this.Para5); break; }
                case "not_gift": { result = !this.IsEmpty(_datarow.NotGift); break; }
                case "open_effect": { result = !this.IsEmpty(_datarow.OpenEffect); break; }
                case "alliance_lv_limit": { result = !this.IsEmpty(_datarow.AllianceLvLimit); break; }
                case "rate": { result = _datarow.RateLength > 0; break; }
                case "recycleGoods": { result = _datarow.RecycleGoodsLength > 0; break; }
                case "buy_times_limit": { result = !this.IsEmpty(_datarow.BuyTimesLimit); break; }
                case "usemax": { result = !this.IsEmpty(_datarow.Usemax); break; }
                case "use_condition": { result = !this.IsEmpty(_datarow.UseCondition); break; }
                case "bauxite": { result = !this.IsEmpty(_datarow.Bauxite); break; }
                case "recycling_alliance_score": { result = !this.IsEmpty(_datarow.RecyclingAllianceScore); break; }
                case "is_send": { result = !this.IsEmpty(_datarow.IsSend); break; }

                default:
                    break;
            }

            return result;
        }
        
        public int Id { get { return this.GetTableInt(_datarow.Id); } }

        private string _Name = null;
        public string Name { get { if (null == _Name) _Name = _datarow.Name; return _Name; } }

        private string _Description = null;
        public string Description { get { if (null == _Description) _Description = _datarow.Description; return _Description; } }

        private string _Icon = null;
        public string Icon { get { if (null == _Icon) _Icon = _datarow.Icon; return _Icon; } }

        public int Type { get { return this.GetTableInt(_datarow.Type); } }

        public int Color { get { return this.GetTableInt(_datarow.Color); } }

        public int Lv { get { return this.GetTableInt(_datarow.Lv); } }

        public int LvLimit { get { return this.GetTableInt(_datarow.LvLimit); } }

        public int Page { get { return this.GetTableInt(_datarow.Page); } }

        public int Pages { get { return this.GetTableInt(_datarow.Pages); } }

        public int PackTabType { get { return this.GetTableInt(_datarow.PackTabType); } }

        public int Use { get { return this.GetTableInt(_datarow.Use); } }

        public int OrderNum { get { return this.GetTableInt(_datarow.OrderNum); } }

        public int StoreOrder { get { return this.GetTableInt(_datarow.StoreOrder); } }

        public int Price { get { return this.GetTableInt(_datarow.Price); } }

        public int PriceHot { get { return this.GetTableInt(_datarow.PriceHot); } }

        public int IsGift { get { return this.GetTableInt(_datarow.IsGift); } }

        private string[] _SalesArray = null;
        public string[] SalesArray { get { if(null == _SalesArray) { if (_datarow.SalesLength > 0) { _SalesArray = new string[_datarow.SalesLength]; for (int i = 0; i < _datarow.SalesLength; i++) { _SalesArray[i] = _datarow.Sales(i); } } } return _SalesArray; } }
        public int SalesArrayLength { get { if (null == this.SalesArray) return 0; return this.SalesArray.Length; } }

        private Dictionary<int, int> _SalesDic = null;
        public Dictionary<int, int> SalesDic { get { if(null == _SalesDic) { _SalesDic = new Dictionary<int, int>(); if(SalesArrayLength > 0) { for(int i = 0; i < SalesArrayLength; i++) { string[] array = SalesArray[i].Split(split_chars); if(array.Length > 1) { int key = array[0].ToInt(); if (!_SalesDic.ContainsKey(key)) _SalesDic.Add(array[0].ToInt(), array[1].ToInt()); } } } } return _SalesDic; } }

        public int AllianceOrder { get { return this.GetTableInt(_datarow.AllianceOrder); } }

        public int PriceAll { get { return this.GetTableInt(_datarow.PriceAll); } }

        public int Type2 { get { return this.GetTableInt(_datarow.Type2); } }

        public int Useall { get { return this.GetTableInt(_datarow.Useall); } }

        private string _Para1 = null;
        public string Para1 { get { if (null == _Para1) _Para1 = _datarow.Para1; return _Para1; } }

        private string[] _NameValueArray = null;
        public string[] NameValueArray { get { if(null == _NameValueArray) { if (_datarow.NameValueLength > 0) { _NameValueArray = new string[_datarow.NameValueLength]; for (int i = 0; i < _datarow.NameValueLength; i++) { _NameValueArray[i] = _datarow.NameValue(i); } } } return _NameValueArray; } }
        public int NameValueArrayLength { get { if (null == this.NameValueArray) return 0; return this.NameValueArray.Length; } }

        private string _Para = null;
        public string Para { get { if (null == _Para) _Para = _datarow.Para; return _Para; } }

        private string _Para3 = null;
        public string Para3 { get { if (null == _Para3) _Para3 = _datarow.Para3; return _Para3; } }

        public int Pagehot { get { return this.GetTableInt(_datarow.Pagehot); } }

        public int SaveLoc { get { return this.GetTableInt(_datarow.SaveLoc); } }

        public int GroupNum { get { return this.GetTableInt(_datarow.GroupNum); } }

        public int Weight { get { return this.GetTableInt(_datarow.Weight); } }

        public int DesPara { get { return this.GetTableInt(_datarow.DesPara); } }

        public int IsShow { get { return this.GetTableInt(_datarow.IsShow); } }

        private string _Para2 = null;
        public string Para2 { get { if (null == _Para2) _Para2 = _datarow.Para2; return _Para2; } }

        private string[] _IconLocArray = null;
        public string[] IconLocArray { get { if(null == _IconLocArray) { if (_datarow.IconLocLength > 0) { _IconLocArray = new string[_datarow.IconLocLength]; for (int i = 0; i < _datarow.IconLocLength; i++) { _IconLocArray[i] = _datarow.IconLoc(i); } } } return _IconLocArray; } }
        public int IconLocArrayLength { get { if (null == this.IconLocArray) return 0; return this.IconLocArray.Length; } }

        private Dictionary<string, string> _IconLocDic = null;
        public Dictionary<string, string> IconLocDic { get { if(null == _IconLocDic) { _IconLocDic = new Dictionary<string, string>(); if(IconLocArrayLength > 0) { for(int i = 0; i < IconLocArrayLength; i++) { string[] array = IconLocArray[i].Split(split_chars); if(array.Length > 1) { string key = array[0]; if (!_IconLocDic.ContainsKey(key)) _IconLocDic.Add(array[0], array[1]); } } } } return _IconLocDic; } }

        private string _Para4 = null;
        public string Para4 { get { if (null == _Para4) _Para4 = _datarow.Para4; return _Para4; } }

        public int Heroid { get { return this.GetTableInt(_datarow.Heroid); } }

        public int DenyBuy { get { return this.GetTableInt(_datarow.DenyBuy); } }

        public int AutoOpen { get { return this.GetTableInt(_datarow.AutoOpen); } }

        private int[] _GoToArray = null;
        public int[] GoToArray { get { if (null == _GoToArray) _GoToArray = _datarow.GetGoToArray(); return _GoToArray; } }
        public int GoToArrayLength { get { if (null == this.GoToArray) return 0; return this.GoToArray.Length; } }

        private string _Para5 = null;
        public string Para5 { get { if (null == _Para5) _Para5 = _datarow.Para5; return _Para5; } }

        public int NotGift { get { return this.GetTableInt(_datarow.NotGift); } }

        public int OpenEffect { get { return this.GetTableInt(_datarow.OpenEffect); } }

        public int AllianceLvLimit { get { return this.GetTableInt(_datarow.AllianceLvLimit); } }

        private string[] _RateArray = null;
        public string[] RateArray { get { if(null == _RateArray) { if (_datarow.RateLength > 0) { _RateArray = new string[_datarow.RateLength]; for (int i = 0; i < _datarow.RateLength; i++) { _RateArray[i] = _datarow.Rate(i); } } } return _RateArray; } }
        public int RateArrayLength { get { if (null == this.RateArray) return 0; return this.RateArray.Length; } }

        private int[] _RecycleGoodsArray = null;
        public int[] RecycleGoodsArray { get { if (null == _RecycleGoodsArray) _RecycleGoodsArray = _datarow.GetRecycleGoodsArray(); return _RecycleGoodsArray; } }
        public int RecycleGoodsArrayLength { get { if (null == this.RecycleGoodsArray) return 0; return this.RecycleGoodsArray.Length; } }

        public int BuyTimesLimit { get { return this.GetTableInt(_datarow.BuyTimesLimit); } }

        public int Usemax { get { return this.GetTableInt(_datarow.Usemax); } }

        public int UseCondition { get { return this.GetTableInt(_datarow.UseCondition); } }

        public int Bauxite { get { return this.GetTableInt(_datarow.Bauxite); } }

        public int RecyclingAllianceScore { get { return this.GetTableInt(_datarow.RecyclingAllianceScore); } }

        public int IsSend { get { return this.GetTableInt(_datarow.IsSend); } }


    }

    #endregion DataRow
}