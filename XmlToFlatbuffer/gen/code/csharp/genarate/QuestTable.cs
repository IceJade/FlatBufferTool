// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using Chanto.Table;
using System.Collections.Generic;

namespace Chanto.Table
{
    #region Table

	public sealed class QuestTable : BaseTable
    {
        private Table_quest table = default(Table_quest);

        private Dictionary<int, QuestDataRow> data_row = new Dictionary<int, QuestDataRow>(128);
        
        public static string g_TableFileName = "quest";

        #region Data Method

        public override bool GetBoolValue(int id, string column, bool defaultValue = false)
        {
            bool result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetBoolValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short GetShortValue(int id, string column, short defaultValue = 0)
        {
            short result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetShortValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetIntValue(int id, string column, int defaultValue = 0)
        {
            int result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "series": { result = datarow.Series; break; }
                case "gotype": { result = datarow.Gotype; break; }
                case "gotype2": { result = datarow.Gotype2; break; }
                case "go2": { result = datarow.Go2; break; }
                case "gobuild2": { result = datarow.Gobuild2; break; }
                case "interactiveButton": { result = datarow.InteractiveButton; break; }
                case "Tips_Type": { result = datarow.TipsType; break; }
                case "List_Id": { result = datarow.ListId; break; }
                case "type2": { result = datarow.Type2; break; }
                case "is_chapter": { result = datarow.IsChapter; break; }
                case "auto": { result = datarow.Auto; break; }
                case "progress": { result = datarow.Progress; break; }
                case "gobuild": { result = datarow.Gobuild; break; }
                case "reward_story": { result = datarow.RewardStory; break; }
                case "guide_freedom": { result = datarow.GuideFreedom; break; }
                case "click_story": { result = datarow.ClickStory; break; }
                case "Tips_Movie": { result = datarow.TipsMovie; break; }
                case "Tips_Soil_Id": { result = datarow.TipsSoilId; break; }
                case "finish_story": { result = datarow.FinishStory; break; }
                case "remind_auto": { result = datarow.RemindAuto; break; }
                case "accept2": { result = datarow.Accept2; break; }
                case "is_achievement": { result = datarow.IsAchievement; break; }
                case "Finish_Id": { result = datarow.FinishId; break; }
                case "priority": { result = datarow.Priority; break; }
                case "main_quest": { result = datarow.MainQuest; break; }
                case "par3": { result = datarow.Par3; break; }
                case "processing": { result = datarow.Processing; break; }
                case "daily_series": { result = datarow.DailySeries; break; }
                case "DebugDot": { result = datarow.DebugDot; break; }
                case "book_close": { result = datarow.BookClose; break; }
                case "event_dailyunlock_chest": { result = datarow.EventDailyunlockChest; break; }

                default: { Log.Error("Table_quest.GetIntValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float GetFloatValue(int id, string column, float defaultValue = 0.0f)
        {
            float result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "series": { result = datarow.Series; break; }
                case "gotype": { result = datarow.Gotype; break; }
                case "gotype2": { result = datarow.Gotype2; break; }
                case "go2": { result = datarow.Go2; break; }
                case "gobuild2": { result = datarow.Gobuild2; break; }
                case "interactiveButton": { result = datarow.InteractiveButton; break; }
                case "Tips_Type": { result = datarow.TipsType; break; }
                case "List_Id": { result = datarow.ListId; break; }
                case "type2": { result = datarow.Type2; break; }
                case "is_chapter": { result = datarow.IsChapter; break; }
                case "auto": { result = datarow.Auto; break; }
                case "progress": { result = datarow.Progress; break; }
                case "gobuild": { result = datarow.Gobuild; break; }
                case "reward_story": { result = datarow.RewardStory; break; }
                case "guide_freedom": { result = datarow.GuideFreedom; break; }
                case "click_story": { result = datarow.ClickStory; break; }
                case "Tips_Movie": { result = datarow.TipsMovie; break; }
                case "Tips_Soil_Id": { result = datarow.TipsSoilId; break; }
                case "finish_story": { result = datarow.FinishStory; break; }
                case "remind_auto": { result = datarow.RemindAuto; break; }
                case "accept2": { result = datarow.Accept2; break; }
                case "is_achievement": { result = datarow.IsAchievement; break; }
                case "Finish_Id": { result = datarow.FinishId; break; }
                case "priority": { result = datarow.Priority; break; }
                case "main_quest": { result = datarow.MainQuest; break; }
                case "par3": { result = datarow.Par3; break; }
                case "processing": { result = datarow.Processing; break; }
                case "daily_series": { result = datarow.DailySeries; break; }
                case "DebugDot": { result = datarow.DebugDot; break; }
                case "book_close": { result = datarow.BookClose; break; }
                case "event_dailyunlock_chest": { result = datarow.EventDailyunlockChest; break; }

                default: { Log.Error("Table_quest.GetFloatValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string GetStringValue(int id, string column, string defaultValue = "")
        {
            string result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id.ToString(); break; }
                case "series": { result = datarow.Series.ToString(); break; }
                case "title": { result = datarow.Title; break; }
                case "description": { result = datarow.Description; break; }
                case "name": { result = datarow.Name; break; }
                case "gotype": { result = datarow.Gotype.ToString(); break; }
                case "gotype2": { result = datarow.Gotype2.ToString(); break; }
                case "go2": { result = datarow.Go2.ToString(); break; }
                case "gobuild2": { result = datarow.Gobuild2.ToString(); break; }
                case "interactiveButton": { result = datarow.InteractiveButton.ToString(); break; }
                case "Tips_Type": { result = datarow.TipsType.ToString(); break; }
                case "List_Id": { result = datarow.ListId.ToString(); break; }
                case "type2": { result = datarow.Type2.ToString(); break; }
                case "para1": { result = datarow.Para1; break; }
                case "para2": { result = datarow.Para2; break; }
                case "is_chapter": { result = datarow.IsChapter.ToString(); break; }
                case "pic": { result = datarow.Pic; break; }
                case "pre_id": { result = datarow.PreId; break; }
                case "auto": { result = datarow.Auto.ToString(); break; }
                case "progress": { result = datarow.Progress.ToString(); break; }
                case "gobuild": { result = datarow.Gobuild.ToString(); break; }
                case "reward_story": { result = datarow.RewardStory.ToString(); break; }
                case "guide_freedom": { result = datarow.GuideFreedom.ToString(); break; }
                case "click_story": { result = datarow.ClickStory.ToString(); break; }
                case "Tips_Movie": { result = datarow.TipsMovie.ToString(); break; }
                case "Tips_Soil_Id": { result = datarow.TipsSoilId.ToString(); break; }
                case "finish_story": { result = datarow.FinishStory.ToString(); break; }
                case "para3": { result = datarow.Para3; break; }
                case "remind_auto": { result = datarow.RemindAuto.ToString(); break; }
                case "accept2": { result = datarow.Accept2.ToString(); break; }
                case "is_achievement": { result = datarow.IsAchievement.ToString(); break; }
                case "Finish_Id": { result = datarow.FinishId.ToString(); break; }
                case "priority": { result = datarow.Priority.ToString(); break; }
                case "main_quest": { result = datarow.MainQuest.ToString(); break; }
                case "par3": { result = datarow.Par3.ToString(); break; }
                case "processing": { result = datarow.Processing.ToString(); break; }
                case "daily_series": { result = datarow.DailySeries.ToString(); break; }
                case "DebugDot": { result = datarow.DebugDot.ToString(); break; }
                case "Main_time": { result = datarow.MainTime; break; }
                case "Main_time2": { result = datarow.MainTime2; break; }
                case "book_close": { result = datarow.BookClose.ToString(); break; }
                case "event_dailyunlock_chest": { result = datarow.EventDailyunlockChest.ToString(); break; }

                default: { Log.Error("Table_quest.GetStringValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override bool[] GetBoolArray(int id, string column)
        {
            bool[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetBoolArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short[] GetShortArray(int id, string column)
        {
            short[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetShortArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int[] GetIntArray(int id, string column)
        {
            int[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "Plot": { result = datarow.PlotArray; break; }
                case "go": { result = datarow.GoArray; break; }

                default: { Log.Error("Table_quest.GetIntArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float[] GetFloatArray(int id, string column)
        {
            float[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;
                
            switch (column)
            {
                case "remind": { result = datarow.RemindArray; break; }

                default: { Log.Error("Table_quest.GetFloatArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string[] GetStringArray(int id, string column)
        {
            string[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetStringArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override string GetStringArrayItem(int id, string column, int index, string defaultValue = "")
        {
            string result = defaultValue;

            int length = this.GetStringArrayLength(id, column);
            if (index < 0 || index >= length)
            {
                Log.Error("Table_quest.GetStringArrayItem => index out of array length({0}), [id:{1}, column:{2}, index:{3}]", length, id, column, index);
                return result;
            }
            
            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetStringArrayItem => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetStringArrayLength(int id, string column)
        {
            int result = 0;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetStringArrayLength => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override Dictionary<int, int> GetDictionaryII(int id, string column) 
        {
            Dictionary<int, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetDictionaryII => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<int, string> GetDictionaryIS(int id, string column) 
        {
            Dictionary<int, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetDictionaryIS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, int> GetDictionarySI(int id, string column) 
        {
            Dictionary<string, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetDictionarySI => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, string> GetDictionarySS(int id, string column) 
        {
            Dictionary<string, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_quest.GetDictionarySS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        #endregion Data Method

        #region DataRow Method
        
        /// <summary>
        /// 获得数据行的数量
        /// </summary>
        /// <returns></returns>
        public override int GetDataCount() 
        {
            Table_quest table = this.GetTable();
            if (null == table.ByteBuffer)
                return 0;

            return table.DataLength; 
        }
        
        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public QuestDataRow GetDataRow(int id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_quest table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            if (null != row_index && row_index.ContainsKey(id))
            {
                DRquest? data = table.Data(row_index[id]);
                if (data.HasValue && data.Value.Id == id)
                {
                    QuestDataRow datarow = new QuestDataRow(data.Value, row_index[id]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DRquest? data = table.Data(i);
                if (data.HasValue)
                {
                    QuestDataRow datarow = new QuestDataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过索引获取行数据
        /// </summary>
        /// <param name="index">索引,即行号,从0开始</param>
        /// <returns></returns>
        public QuestDataRow GetDataRowByIndex(int index)
        {
            Table_quest table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;

            if (index < 0 || index >= table.DataLength)
                return null;

            DRquest? data = table.Data(index);
            if (data.HasValue)
            {
                if (!data_row.ContainsKey(data.Value.Id))
                {
                    QuestDataRow datarow = new QuestDataRow(data.Value, index);
                    data_row.Add(datarow.Id, datarow);
                }

                return data_row[data.Value.Id];
            }

            return null;
        }
        
        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<int, QuestDataRow> GetAllData()
        {
            Table_quest table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DRquest? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        QuestDataRow datarow = new QuestDataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="callback"></param>
        public override void VisitTable(System.Func<BaseDataRow, bool> callback)
        {
            if (null == callback)
                return;

            this.GetAllData();

            var iterator = data_row.GetEnumerator();
            try
            {
                bool _stop = false;
                while (iterator.MoveNext() && _stop == false)
                {
                    _stop = callback(iterator.Current.Value);
                }
            }
            finally
            {
                iterator.Dispose();
            }
        }
        
        public override BaseDataRow GetTableRow(int id) 
        { 
            return this.GetDataRow(id); 
        }

        public override BaseDataRow GetTableRow(string id)
        {
            int rowId = 0;
            if(int.TryParse(id, out rowId))
                return this.GetDataRow(rowId);

            return null;
        }

        public override BaseDataRow GetTableRowByIndex(int index)
        {
            return this.GetDataRowByIndex(index);
        }

        #endregion DataRow Method
        
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_quest.GetRootAsTable_quest(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_quest GetTable()
        {
            LoadTable();

            return table;
        }
        
        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "quest.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "quest_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public class QuestBaseDataRow : BaseDataRow
    {
        protected DRquest _datarow;

        public QuestBaseDataRow(DRquest datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }
        
        public override CSLuaTable GetLuaTable()
        {
            base.GetLuaTable();

            if (_LuaDataRow.Length <= 0)
            {
                if(this.HasKey("id")) _LuaDataRow.Set("id", this.Id);
                if(this.HasKey("Plot")) _LuaDataRow.Set("Plot", this.PlotArray);
                if(this.HasKey("series")) _LuaDataRow.Set("series", this.Series);
                if(this.HasKey("title")) _LuaDataRow.Set("title", this.Title);
                if(this.HasKey("description")) _LuaDataRow.Set("description", this.Description);
                if(this.HasKey("name")) _LuaDataRow.Set("name", this.Name);
                if(this.HasKey("gotype")) _LuaDataRow.Set("gotype", this.Gotype);
                if(this.HasKey("go")) _LuaDataRow.Set("go", this.GoArray);
                if(this.HasKey("gotype2")) _LuaDataRow.Set("gotype2", this.Gotype2);
                if(this.HasKey("go2")) _LuaDataRow.Set("go2", this.Go2);
                if(this.HasKey("gobuild2")) _LuaDataRow.Set("gobuild2", this.Gobuild2);
                if(this.HasKey("interactiveButton")) _LuaDataRow.Set("interactiveButton", this.InteractiveButton);
                if(this.HasKey("Tips_Type")) _LuaDataRow.Set("Tips_Type", this.TipsType);
                if(this.HasKey("remind")) _LuaDataRow.Set("remind", this.RemindArray);
                if(this.HasKey("List_Id")) _LuaDataRow.Set("List_Id", this.ListId);
                if(this.HasKey("type2")) _LuaDataRow.Set("type2", this.Type2);
                if(this.HasKey("para1")) _LuaDataRow.Set("para1", this.Para1);
                if(this.HasKey("para2")) _LuaDataRow.Set("para2", this.Para2);
                if(this.HasKey("is_chapter")) _LuaDataRow.Set("is_chapter", this.IsChapter);
                if(this.HasKey("pic")) _LuaDataRow.Set("pic", this.Pic);
                if(this.HasKey("pre_id")) _LuaDataRow.Set("pre_id", this.PreId);
                if(this.HasKey("auto")) _LuaDataRow.Set("auto", this.Auto);
                if(this.HasKey("progress")) _LuaDataRow.Set("progress", this.Progress);
                if(this.HasKey("gobuild")) _LuaDataRow.Set("gobuild", this.Gobuild);
                if(this.HasKey("reward_story")) _LuaDataRow.Set("reward_story", this.RewardStory);
                if(this.HasKey("guide_freedom")) _LuaDataRow.Set("guide_freedom", this.GuideFreedom);
                if(this.HasKey("click_story")) _LuaDataRow.Set("click_story", this.ClickStory);
                if(this.HasKey("Tips_Movie")) _LuaDataRow.Set("Tips_Movie", this.TipsMovie);
                if(this.HasKey("Tips_Soil_Id")) _LuaDataRow.Set("Tips_Soil_Id", this.TipsSoilId);
                if(this.HasKey("finish_story")) _LuaDataRow.Set("finish_story", this.FinishStory);
                if(this.HasKey("para3")) _LuaDataRow.Set("para3", this.Para3);
                if(this.HasKey("remind_auto")) _LuaDataRow.Set("remind_auto", this.RemindAuto);
                if(this.HasKey("accept2")) _LuaDataRow.Set("accept2", this.Accept2);
                if(this.HasKey("is_achievement")) _LuaDataRow.Set("is_achievement", this.IsAchievement);
                if(this.HasKey("Finish_Id")) _LuaDataRow.Set("Finish_Id", this.FinishId);
                if(this.HasKey("priority")) _LuaDataRow.Set("priority", this.Priority);
                if(this.HasKey("main_quest")) _LuaDataRow.Set("main_quest", this.MainQuest);
                if(this.HasKey("par3")) _LuaDataRow.Set("par3", this.Par3);
                if(this.HasKey("processing")) _LuaDataRow.Set("processing", this.Processing);
                if(this.HasKey("daily_series")) _LuaDataRow.Set("daily_series", this.DailySeries);
                if(this.HasKey("DebugDot")) _LuaDataRow.Set("DebugDot", this.DebugDot);
                if(this.HasKey("Main_time")) _LuaDataRow.Set("Main_time", this.MainTime);
                if(this.HasKey("Main_time2")) _LuaDataRow.Set("Main_time2", this.MainTime2);
                if(this.HasKey("book_close")) _LuaDataRow.Set("book_close", this.BookClose);
                if(this.HasKey("event_dailyunlock_chest")) _LuaDataRow.Set("event_dailyunlock_chest", this.EventDailyunlockChest);

            }

            return _LuaDataRow;
        }

        protected override LuaValue GetLuaValue(string rowId)
        {
            LuaValue luaValue = new LuaValue();
            switch (rowId)
            {
                case "id": { luaValue.SetValue(this.Id); break; }
                case "Plot": { luaValue.SetValue(this.PlotArray); break; }
                case "series": { luaValue.SetValue(this.Series); break; }
                case "title": { luaValue.SetValue(this.Title); break; }
                case "description": { luaValue.SetValue(this.Description); break; }
                case "name": { luaValue.SetValue(this.Name); break; }
                case "gotype": { luaValue.SetValue(this.Gotype); break; }
                case "go": { luaValue.SetValue(this.GoArray); break; }
                case "gotype2": { luaValue.SetValue(this.Gotype2); break; }
                case "go2": { luaValue.SetValue(this.Go2); break; }
                case "gobuild2": { luaValue.SetValue(this.Gobuild2); break; }
                case "interactiveButton": { luaValue.SetValue(this.InteractiveButton); break; }
                case "Tips_Type": { luaValue.SetValue(this.TipsType); break; }
                case "remind": { luaValue.SetValue(this.RemindArray); break; }
                case "List_Id": { luaValue.SetValue(this.ListId); break; }
                case "type2": { luaValue.SetValue(this.Type2); break; }
                case "para1": { luaValue.SetValue(this.Para1); break; }
                case "para2": { luaValue.SetValue(this.Para2); break; }
                case "is_chapter": { luaValue.SetValue(this.IsChapter); break; }
                case "pic": { luaValue.SetValue(this.Pic); break; }
                case "pre_id": { luaValue.SetValue(this.PreId); break; }
                case "auto": { luaValue.SetValue(this.Auto); break; }
                case "progress": { luaValue.SetValue(this.Progress); break; }
                case "gobuild": { luaValue.SetValue(this.Gobuild); break; }
                case "reward_story": { luaValue.SetValue(this.RewardStory); break; }
                case "guide_freedom": { luaValue.SetValue(this.GuideFreedom); break; }
                case "click_story": { luaValue.SetValue(this.ClickStory); break; }
                case "Tips_Movie": { luaValue.SetValue(this.TipsMovie); break; }
                case "Tips_Soil_Id": { luaValue.SetValue(this.TipsSoilId); break; }
                case "finish_story": { luaValue.SetValue(this.FinishStory); break; }
                case "para3": { luaValue.SetValue(this.Para3); break; }
                case "remind_auto": { luaValue.SetValue(this.RemindAuto); break; }
                case "accept2": { luaValue.SetValue(this.Accept2); break; }
                case "is_achievement": { luaValue.SetValue(this.IsAchievement); break; }
                case "Finish_Id": { luaValue.SetValue(this.FinishId); break; }
                case "priority": { luaValue.SetValue(this.Priority); break; }
                case "main_quest": { luaValue.SetValue(this.MainQuest); break; }
                case "par3": { luaValue.SetValue(this.Par3); break; }
                case "processing": { luaValue.SetValue(this.Processing); break; }
                case "daily_series": { luaValue.SetValue(this.DailySeries); break; }
                case "DebugDot": { luaValue.SetValue(this.DebugDot); break; }
                case "Main_time": { luaValue.SetValue(this.MainTime); break; }
                case "Main_time2": { luaValue.SetValue(this.MainTime2); break; }
                case "book_close": { luaValue.SetValue(this.BookClose); break; }
                case "event_dailyunlock_chest": { luaValue.SetValue(this.EventDailyunlockChest); break; }

                default:
                    break;
            }

            return luaValue;
        }
        
        public override bool HasKey(string column)
        {
            bool result = false;

            switch (column)
            {
                case "id": { result = !this.IsEmpty(_datarow.Id); break; }
                case "Plot": { result = _datarow.PlotLength > 0; break; }
                case "series": { result = !this.IsEmpty(_datarow.Series); break; }
                case "title": { result = !this.IsEmpty(this.Title); break; }
                case "description": { result = !this.IsEmpty(this.Description); break; }
                case "name": { result = !this.IsEmpty(this.Name); break; }
                case "gotype": { result = !this.IsEmpty(_datarow.Gotype); break; }
                case "go": { result = _datarow.GoLength > 0; break; }
                case "gotype2": { result = !this.IsEmpty(_datarow.Gotype2); break; }
                case "go2": { result = !this.IsEmpty(_datarow.Go2); break; }
                case "gobuild2": { result = !this.IsEmpty(_datarow.Gobuild2); break; }
                case "interactiveButton": { result = !this.IsEmpty(_datarow.InteractiveButton); break; }
                case "Tips_Type": { result = !this.IsEmpty(_datarow.TipsType); break; }
                case "remind": { result = _datarow.RemindLength > 0; break; }
                case "List_Id": { result = !this.IsEmpty(_datarow.ListId); break; }
                case "type2": { result = !this.IsEmpty(_datarow.Type2); break; }
                case "para1": { result = !this.IsEmpty(this.Para1); break; }
                case "para2": { result = !this.IsEmpty(this.Para2); break; }
                case "is_chapter": { result = !this.IsEmpty(_datarow.IsChapter); break; }
                case "pic": { result = !this.IsEmpty(this.Pic); break; }
                case "pre_id": { result = !this.IsEmpty(this.PreId); break; }
                case "auto": { result = !this.IsEmpty(_datarow.Auto); break; }
                case "progress": { result = !this.IsEmpty(_datarow.Progress); break; }
                case "gobuild": { result = !this.IsEmpty(_datarow.Gobuild); break; }
                case "reward_story": { result = !this.IsEmpty(_datarow.RewardStory); break; }
                case "guide_freedom": { result = !this.IsEmpty(_datarow.GuideFreedom); break; }
                case "click_story": { result = !this.IsEmpty(_datarow.ClickStory); break; }
                case "Tips_Movie": { result = !this.IsEmpty(_datarow.TipsMovie); break; }
                case "Tips_Soil_Id": { result = !this.IsEmpty(_datarow.TipsSoilId); break; }
                case "finish_story": { result = !this.IsEmpty(_datarow.FinishStory); break; }
                case "para3": { result = !this.IsEmpty(this.Para3); break; }
                case "remind_auto": { result = !this.IsEmpty(_datarow.RemindAuto); break; }
                case "accept2": { result = !this.IsEmpty(_datarow.Accept2); break; }
                case "is_achievement": { result = !this.IsEmpty(_datarow.IsAchievement); break; }
                case "Finish_Id": { result = !this.IsEmpty(_datarow.FinishId); break; }
                case "priority": { result = !this.IsEmpty(_datarow.Priority); break; }
                case "main_quest": { result = !this.IsEmpty(_datarow.MainQuest); break; }
                case "par3": { result = !this.IsEmpty(_datarow.Par3); break; }
                case "processing": { result = !this.IsEmpty(_datarow.Processing); break; }
                case "daily_series": { result = !this.IsEmpty(_datarow.DailySeries); break; }
                case "DebugDot": { result = !this.IsEmpty(_datarow.DebugDot); break; }
                case "Main_time": { result = !this.IsEmpty(this.MainTime); break; }
                case "Main_time2": { result = !this.IsEmpty(this.MainTime2); break; }
                case "book_close": { result = !this.IsEmpty(_datarow.BookClose); break; }
                case "event_dailyunlock_chest": { result = !this.IsEmpty(_datarow.EventDailyunlockChest); break; }

                default:
                    break;
            }

            return result;
        }
        
        public int Id { get { return this.GetTableInt(_datarow.Id); } }

        private int[] _PlotArray = null;
        public int[] PlotArray { get { if (null == _PlotArray) _PlotArray = _datarow.GetPlotArray(); return _PlotArray; } }
        public int PlotArrayLength { get { if (null == this.PlotArray) return 0; return this.PlotArray.Length; } }

        public int Series { get { return this.GetTableInt(_datarow.Series); } }

        private string _Title = null;
        public string Title { get { if (null == _Title) _Title = _datarow.Title; return _Title; } }

        private string _Description = null;
        public string Description { get { if (null == _Description) _Description = _datarow.Description; return _Description; } }

        private string _Name = null;
        public string Name { get { if (null == _Name) _Name = _datarow.Name; return _Name; } }

        public int Gotype { get { return this.GetTableInt(_datarow.Gotype); } }

        private int[] _GoArray = null;
        public int[] GoArray { get { if (null == _GoArray) _GoArray = _datarow.GetGoArray(); return _GoArray; } }
        public int GoArrayLength { get { if (null == this.GoArray) return 0; return this.GoArray.Length; } }

        public int Gotype2 { get { return this.GetTableInt(_datarow.Gotype2); } }

        public int Go2 { get { return this.GetTableInt(_datarow.Go2); } }

        public int Gobuild2 { get { return this.GetTableInt(_datarow.Gobuild2); } }

        public int InteractiveButton { get { return this.GetTableInt(_datarow.InteractiveButton); } }

        public int TipsType { get { return this.GetTableInt(_datarow.TipsType); } }

        private float[] _RemindArray = null;
        public float[] RemindArray { get { if (null == _RemindArray) _RemindArray = _datarow.GetRemindArray(); return _RemindArray; } }
        public int RemindArrayLength { get { if (null == this.RemindArray) return 0; return this.RemindArray.Length; } }

        public int ListId { get { return this.GetTableInt(_datarow.ListId); } }

        public int Type2 { get { return this.GetTableInt(_datarow.Type2); } }

        private string _Para1 = null;
        public string Para1 { get { if (null == _Para1) _Para1 = _datarow.Para1; return _Para1; } }

        private string _Para2 = null;
        public string Para2 { get { if (null == _Para2) _Para2 = _datarow.Para2; return _Para2; } }

        public int IsChapter { get { return this.GetTableInt(_datarow.IsChapter); } }

        private string _Pic = null;
        public string Pic { get { if (null == _Pic) _Pic = _datarow.Pic; return _Pic; } }

        private string _PreId = null;
        public string PreId { get { if (null == _PreId) _PreId = _datarow.PreId; return _PreId; } }

        public int Auto { get { return this.GetTableInt(_datarow.Auto); } }

        public int Progress { get { return this.GetTableInt(_datarow.Progress); } }

        public int Gobuild { get { return this.GetTableInt(_datarow.Gobuild); } }

        public int RewardStory { get { return this.GetTableInt(_datarow.RewardStory); } }

        public int GuideFreedom { get { return this.GetTableInt(_datarow.GuideFreedom); } }

        public int ClickStory { get { return this.GetTableInt(_datarow.ClickStory); } }

        public int TipsMovie { get { return this.GetTableInt(_datarow.TipsMovie); } }

        public int TipsSoilId { get { return this.GetTableInt(_datarow.TipsSoilId); } }

        public int FinishStory { get { return this.GetTableInt(_datarow.FinishStory); } }

        private string _Para3 = null;
        public string Para3 { get { if (null == _Para3) _Para3 = _datarow.Para3; return _Para3; } }

        public int RemindAuto { get { return this.GetTableInt(_datarow.RemindAuto); } }

        public int Accept2 { get { return this.GetTableInt(_datarow.Accept2); } }

        public int IsAchievement { get { return this.GetTableInt(_datarow.IsAchievement); } }

        public int FinishId { get { return this.GetTableInt(_datarow.FinishId); } }

        public int Priority { get { return this.GetTableInt(_datarow.Priority); } }

        public int MainQuest { get { return this.GetTableInt(_datarow.MainQuest); } }

        public int Par3 { get { return this.GetTableInt(_datarow.Par3); } }

        public int Processing { get { return this.GetTableInt(_datarow.Processing); } }

        public int DailySeries { get { return this.GetTableInt(_datarow.DailySeries); } }

        public int DebugDot { get { return this.GetTableInt(_datarow.DebugDot); } }

        private string _MainTime = null;
        public string MainTime { get { if (null == _MainTime) _MainTime = _datarow.MainTime; return _MainTime; } }

        private string _MainTime2 = null;
        public string MainTime2 { get { if (null == _MainTime2) _MainTime2 = _datarow.MainTime2; return _MainTime2; } }

        public int BookClose { get { return this.GetTableInt(_datarow.BookClose); } }

        public int EventDailyunlockChest { get { return this.GetTableInt(_datarow.EventDailyunlockChest); } }


    }

    #endregion DataRow
}