// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using LF.Table;
using System.Collections.Generic;

namespace LF
{
    #region Table

	public sealed class BuildingTable : BaseTable
    {
        private Table_building table = default(Table_building);

        private Dictionary<int, BuildingDataRow> data_row = new Dictionary<int, BuildingDataRow>(128);
        
        public static string g_TableFileName = "building";

        #region Data Method

        public override bool GetBoolValue(int id, string column, bool defaultValue = false)
        {
            bool result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_building.GetBoolValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short GetShortValue(int id, string column, short defaultValue = 0)
        {
            short result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_building.GetShortValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetIntValue(int id, string column, int defaultValue = 0)
        {
            int result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "station_name": { result = datarow.StationName; break; }
                case "char": { result = datarow.CharAlies; break; }
                case "type": { result = datarow.Type; break; }
                case "max_level": { result = datarow.MaxLevel; break; }
                case "num": { result = datarow.Num; break; }
                case "tiles": { result = datarow.Tiles; break; }
                case "floor": { result = datarow.Floor; break; }
                case "tab_type": { result = datarow.TabType; break; }
                case "building_list": { result = datarow.BuildingList; break; }
                case "order": { result = datarow.Order; break; }
                case "edit": { result = datarow.Edit; break; }
                case "time": { result = datarow.Time; break; }
                case "lack_resource": { result = datarow.LackResource; break; }
                case "station_max": { result = datarow.StationMax; break; }
                case "destip": { result = datarow.Destip; break; }
                case "station_type": { result = datarow.StationType; break; }
                case "exp": { result = datarow.Exp; break; }
                case "store_limit": { result = datarow.StoreLimit; break; }
                case "needScience": { result = datarow.NeedScience; break; }
                case "rush": { result = datarow.Rush; break; }
                case "unlock_quest": { result = datarow.UnlockQuest; break; }
                case "unlock_effect": { result = datarow.UnlockEffect; break; }
                case "destroy_hero": { result = datarow.DestroyHero; break; }
                case "quest_interfaceId": { result = datarow.QuestInterfaceId; break; }
                case "drawing": { result = datarow.Drawing; break; }
                case "month_card": { result = datarow.MonthCard; break; }
                case "unlock_season": { result = datarow.UnlockSeason; break; }

                default: { GameFramework.Log.Error("Table_building.GetIntValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float GetFloatValue(int id, string column, float defaultValue = 0.0f)
        {
            float result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "station_name": { result = datarow.StationName; break; }
                case "char": { result = datarow.CharAlies; break; }
                case "type": { result = datarow.Type; break; }
                case "max_level": { result = datarow.MaxLevel; break; }
                case "num": { result = datarow.Num; break; }
                case "tiles": { result = datarow.Tiles; break; }
                case "floor": { result = datarow.Floor; break; }
                case "tab_type": { result = datarow.TabType; break; }
                case "building_list": { result = datarow.BuildingList; break; }
                case "order": { result = datarow.Order; break; }
                case "edit": { result = datarow.Edit; break; }
                case "time": { result = datarow.Time; break; }
                case "lack_resource": { result = datarow.LackResource; break; }
                case "station_max": { result = datarow.StationMax; break; }
                case "destip": { result = datarow.Destip; break; }
                case "station_type": { result = datarow.StationType; break; }
                case "exp": { result = datarow.Exp; break; }
                case "store_limit": { result = datarow.StoreLimit; break; }
                case "needScience": { result = datarow.NeedScience; break; }
                case "rush": { result = datarow.Rush; break; }
                case "unlock_quest": { result = datarow.UnlockQuest; break; }
                case "unlock_effect": { result = datarow.UnlockEffect; break; }
                case "destroy_hero": { result = datarow.DestroyHero; break; }
                case "quest_interfaceId": { result = datarow.QuestInterfaceId; break; }
                case "drawing": { result = datarow.Drawing; break; }
                case "month_card": { result = datarow.MonthCard; break; }
                case "unlock_season": { result = datarow.UnlockSeason; break; }

                default: { GameFramework.Log.Error("Table_building.GetFloatValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string GetStringValue(int id, string column, string defaultValue = "")
        {
            string result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id.ToString(); break; }
                case "name": { result = datarow.Name; break; }
                case "description": { result = datarow.Description; break; }
                case "station_name": { result = datarow.StationName.ToString(); break; }
                case "small_icon": { result = datarow.SmallIcon; break; }
                case "char": { result = datarow.CharAlies.ToString(); break; }
                case "type": { result = datarow.Type.ToString(); break; }
                case "max_level": { result = datarow.MaxLevel.ToString(); break; }
                case "num": { result = datarow.Num.ToString(); break; }
                case "tiles": { result = datarow.Tiles.ToString(); break; }
                case "floor": { result = datarow.Floor.ToString(); break; }
                case "pic": { result = datarow.Pic; break; }
                case "tab_type": { result = datarow.TabType.ToString(); break; }
                case "building_list": { result = datarow.BuildingList.ToString(); break; }
                case "order": { result = datarow.Order.ToString(); break; }
                case "edit": { result = datarow.Edit.ToString(); break; }
                case "time": { result = datarow.Time.ToString(); break; }
                case "lack_resource": { result = datarow.LackResource.ToString(); break; }
                case "para10": { result = datarow.Para10; break; }
                case "station_max": { result = datarow.StationMax.ToString(); break; }
                case "destip": { result = datarow.Destip.ToString(); break; }
                case "station_type": { result = datarow.StationType.ToString(); break; }
                case "exp": { result = datarow.Exp.ToString(); break; }
                case "store_limit": { result = datarow.StoreLimit.ToString(); break; }
                case "needScience": { result = datarow.NeedScience.ToString(); break; }
                case "rush": { result = datarow.Rush.ToString(); break; }
                case "unlock_quest": { result = datarow.UnlockQuest.ToString(); break; }
                case "gift_id": { result = datarow.GiftId; break; }
                case "para2": { result = datarow.Para2; break; }
                case "para3": { result = datarow.Para3; break; }
                case "para1": { result = datarow.Para1; break; }
                case "para5": { result = datarow.Para5; break; }
                case "unlock_effect": { result = datarow.UnlockEffect.ToString(); break; }
                case "destroy_hero": { result = datarow.DestroyHero.ToString(); break; }
                case "quest_interfaceId": { result = datarow.QuestInterfaceId.ToString(); break; }
                case "drawing": { result = datarow.Drawing.ToString(); break; }
                case "thumb_icon": { result = datarow.ThumbIcon; break; }
                case "month_card": { result = datarow.MonthCard.ToString(); break; }
                case "work_bd_pic": { result = datarow.WorkBdPic; break; }
                case "up_bd_pic": { result = datarow.UpBdPic; break; }
                case "description_simple": { result = datarow.DescriptionSimple; break; }
                case "unlock_season": { result = datarow.UnlockSeason.ToString(); break; }

                default: { GameFramework.Log.Error("Table_building.GetStringValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override bool[] GetBoolArray(int id, string column)
        {
            bool[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_building.GetBoolArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short[] GetShortArray(int id, string column)
        {
            short[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_building.GetShortArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int[] GetIntArray(int id, string column)
        {
            int[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "power": { result = datarow.PowerArray; break; }
                case "inBuilding": { result = datarow.InBuildingArray; break; }
                case "foodShow": { result = datarow.FoodShowArray; break; }
                case "unlock_order": { result = datarow.UnlockOrderArray; break; }

                default: { GameFramework.Log.Error("Table_building.GetIntArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float[] GetFloatArray(int id, string column)
        {
            float[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;
                
            switch (column)
            {
                case "power_dissipation": { result = datarow.PowerDissipationArray; break; }

                default: { GameFramework.Log.Error("Table_building.GetFloatArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string[] GetStringArray(int id, string column)
        {
            string[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "information": { result = datarow.InformationArray; break; }
                case "prefab": { result = datarow.PrefabArray; break; }
                case "prefab_world": { result = datarow.PrefabWorldArray; break; }
                case "put_consume": { result = datarow.PutConsumeArray; break; }
                case "intelligence": { result = datarow.IntelligenceArray; break; }
                case "unlock_num": { result = datarow.UnlockNumArray; break; }
                case "unlock_population": { result = datarow.UnlockPopulationArray; break; }
                case "agility": { result = datarow.AgilityArray; break; }
                case "endurance": { result = datarow.EnduranceArray; break; }
                case "building": { result = datarow.BuildingArray; break; }
                case "strength": { result = datarow.StrengthArray; break; }
                case "fixed_location": { result = datarow.FixedLocationArray; break; }
                case "luck": { result = datarow.LuckArray; break; }
                case "open_arms": { result = datarow.OpenArmsArray; break; }
                case "Unlock_edit": { result = datarow.UnlockEditArray; break; }

                default: { GameFramework.Log.Error("Table_building.GetStringArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override string GetStringArrayItem(int id, string column, int index, string defaultValue = "")
        {
            string result = defaultValue;

            int length = this.GetStringArrayLength(id, column);
            if (index < 0 || index >= length)
            {
                GameFramework.Log.Error("Table_building.GetStringArrayItem => index out of array length({0}), [id:{1}, column:{2}, index:{3}]", length, id, column, index);
                return result;
            }
            
            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "information": { result = datarow.InformationArray[index]; break; }
                case "prefab": { result = datarow.PrefabArray[index]; break; }
                case "prefab_world": { result = datarow.PrefabWorldArray[index]; break; }
                case "put_consume": { result = datarow.PutConsumeArray[index]; break; }
                case "intelligence": { result = datarow.IntelligenceArray[index]; break; }
                case "unlock_num": { result = datarow.UnlockNumArray[index]; break; }
                case "unlock_population": { result = datarow.UnlockPopulationArray[index]; break; }
                case "agility": { result = datarow.AgilityArray[index]; break; }
                case "endurance": { result = datarow.EnduranceArray[index]; break; }
                case "building": { result = datarow.BuildingArray[index]; break; }
                case "strength": { result = datarow.StrengthArray[index]; break; }
                case "fixed_location": { result = datarow.FixedLocationArray[index]; break; }
                case "luck": { result = datarow.LuckArray[index]; break; }
                case "open_arms": { result = datarow.OpenArmsArray[index]; break; }
                case "Unlock_edit": { result = datarow.UnlockEditArray[index]; break; }

                default: { GameFramework.Log.Error("Table_building.GetStringArrayItem => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetStringArrayLength(int id, string column)
        {
            int result = 0;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "information": { result = datarow.InformationArrayLength; break; }
                case "prefab": { result = datarow.PrefabArrayLength; break; }
                case "prefab_world": { result = datarow.PrefabWorldArrayLength; break; }
                case "put_consume": { result = datarow.PutConsumeArrayLength; break; }
                case "intelligence": { result = datarow.IntelligenceArrayLength; break; }
                case "unlock_num": { result = datarow.UnlockNumArrayLength; break; }
                case "unlock_population": { result = datarow.UnlockPopulationArrayLength; break; }
                case "agility": { result = datarow.AgilityArrayLength; break; }
                case "endurance": { result = datarow.EnduranceArrayLength; break; }
                case "building": { result = datarow.BuildingArrayLength; break; }
                case "strength": { result = datarow.StrengthArrayLength; break; }
                case "fixed_location": { result = datarow.FixedLocationArrayLength; break; }
                case "luck": { result = datarow.LuckArrayLength; break; }
                case "open_arms": { result = datarow.OpenArmsArrayLength; break; }
                case "Unlock_edit": { result = datarow.UnlockEditArrayLength; break; }

                default: { GameFramework.Log.Error("Table_building.GetStringArrayLength => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override Dictionary<int, int> GetDictionaryII(int id, string column) 
        {
            Dictionary<int, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "information": { result = datarow.InformationDic; break; }
                case "put_consume": { result = datarow.PutConsumeDic; break; }
                case "unlock_num": { result = datarow.UnlockNumDic; break; }
                case "unlock_population": { result = datarow.UnlockPopulationDic; break; }
                case "building": { result = datarow.BuildingDic; break; }
                case "open_arms": { result = datarow.OpenArmsDic; break; }
                case "Unlock_edit": { result = datarow.UnlockEditDic; break; }

                default: { GameFramework.Log.Error("Table_building.GetDictionaryII => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<int, string> GetDictionaryIS(int id, string column) 
        {
            Dictionary<int, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_building.GetDictionaryIS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, int> GetDictionarySI(int id, string column) 
        {
            Dictionary<string, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { GameFramework.Log.Error("Table_building.GetDictionarySI => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, string> GetDictionarySS(int id, string column) 
        {
            Dictionary<string, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "prefab_world": { result = datarow.PrefabWorldDic; break; }

                default: { GameFramework.Log.Error("Table_building.GetDictionarySS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        #endregion Data Method

        #region DataRow Method
        
        /// <summary>
        /// 获得数据行的数量
        /// </summary>
        /// <returns></returns>
        public override int GetDataCount() 
        {
            Table_building table = this.GetTable();
            if (null == table.ByteBuffer)
                return 0;

            return table.DataLength; 
        }
        
        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public BuildingDataRow GetDataRow(int id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_building table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            if (null != row_index && row_index.ContainsKey(id))
            {
                DRbuilding? data = table.Data(row_index[id]);
                if (data.HasValue && data.Value.Id == id)
                {
                    BuildingDataRow datarow = new BuildingDataRow(data.Value, row_index[id]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DRbuilding? data = table.Data(i);
                if (data.HasValue)
                {
                    BuildingDataRow datarow = new BuildingDataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过索引获取行数据
        /// </summary>
        /// <param name="index">索引,即行号,从0开始</param>
        /// <returns></returns>
        public BuildingDataRow GetDataRowByIndex(int index)
        {
            Table_building table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;

            if (index < 0 || index >= table.DataLength)
                return null;

            DRbuilding? data = table.Data(index);
            if (data.HasValue)
            {
                if (!data_row.ContainsKey(data.Value.Id))
                {
                    BuildingDataRow datarow = new BuildingDataRow(data.Value, index);
                    data_row.Add(datarow.Id, datarow);
                }

                return data_row[data.Value.Id];
            }

            return null;
        }
        
        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<int, BuildingDataRow> GetAllData()
        {
            Table_building table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DRbuilding? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        BuildingDataRow datarow = new BuildingDataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="callback"></param>
        public override void VisitTable(System.Func<BaseDataRow, bool> callback)
        {
            if (null == callback)
                return;

            this.GetAllData();

            var iterator = data_row.GetEnumerator();
            try
            {
                bool _stop = false;
                while (iterator.MoveNext() && _stop == false)
                {
                    _stop = callback(iterator.Current.Value);
                }
            }
            finally
            {
                iterator.Dispose();
            }
        }
        
        public override BaseDataRow GetTableRow(int id) 
        { 
            return this.GetDataRow(id); 
        }

        public override BaseDataRow GetTableRow(string id)
        {
            int rowId = 0;
            if(int.TryParse(id, out rowId))
                return this.GetDataRow(rowId);

            return null;
        }

        public override BaseDataRow GetTableRowByIndex(int index)
        {
            return this.GetDataRowByIndex(index);
        }

        #endregion DataRow Method
        
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_building.GetRootAsTable_building(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_building GetTable()
        {
            LoadTable();

            return table;
        }
        
        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "building.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "building_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public class BuildingBaseDataRow : BaseDataRow
    {
        protected DRbuilding _datarow;

        public BuildingBaseDataRow(DRbuilding datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }
        
        public override CSLuaTable GetLuaTable()
        {
            base.GetLuaTable();

            if (_LuaDataRow.Length <= 0)
            {
                if(this.HasKey("id")) _LuaDataRow.Set("id", this.Id);
                if(this.HasKey("name")) _LuaDataRow.Set("name", this.Name);
                if(this.HasKey("description")) _LuaDataRow.Set("description", this.Description);
                if(this.HasKey("station_name")) _LuaDataRow.Set("station_name", this.StationName);
                if(this.HasKey("small_icon")) _LuaDataRow.Set("small_icon", this.SmallIcon);
                if(this.HasKey("char")) _LuaDataRow.Set("char", this.CharAlies);
                if(this.HasKey("information")) _LuaDataRow.Set("information", this.InformationArray);
                if(this.HasKey("type")) _LuaDataRow.Set("type", this.Type);
                if(this.HasKey("max_level")) _LuaDataRow.Set("max_level", this.MaxLevel);
                if(this.HasKey("num")) _LuaDataRow.Set("num", this.Num);
                if(this.HasKey("tiles")) _LuaDataRow.Set("tiles", this.Tiles);
                if(this.HasKey("floor")) _LuaDataRow.Set("floor", this.Floor);
                if(this.HasKey("power")) _LuaDataRow.Set("power", this.PowerArray);
                if(this.HasKey("pic")) _LuaDataRow.Set("pic", this.Pic);
                if(this.HasKey("prefab")) _LuaDataRow.Set("prefab", this.PrefabArray);
                if(this.HasKey("prefab_world")) _LuaDataRow.Set("prefab_world", this.PrefabWorldArray);
                if(this.HasKey("tab_type")) _LuaDataRow.Set("tab_type", this.TabType);
                if(this.HasKey("building_list")) _LuaDataRow.Set("building_list", this.BuildingList);
                if(this.HasKey("order")) _LuaDataRow.Set("order", this.Order);
                if(this.HasKey("edit")) _LuaDataRow.Set("edit", this.Edit);
                if(this.HasKey("time")) _LuaDataRow.Set("time", this.Time);
                if(this.HasKey("put_consume")) _LuaDataRow.Set("put_consume", this.PutConsumeArray);
                if(this.HasKey("power_dissipation")) _LuaDataRow.Set("power_dissipation", this.PowerDissipationArray);
                if(this.HasKey("lack_resource")) _LuaDataRow.Set("lack_resource", this.LackResource);
                if(this.HasKey("para10")) _LuaDataRow.Set("para10", this.Para10);
                if(this.HasKey("station_max")) _LuaDataRow.Set("station_max", this.StationMax);
                if(this.HasKey("intelligence")) _LuaDataRow.Set("intelligence", this.IntelligenceArray);
                if(this.HasKey("destip")) _LuaDataRow.Set("destip", this.Destip);
                if(this.HasKey("station_type")) _LuaDataRow.Set("station_type", this.StationType);
                if(this.HasKey("exp")) _LuaDataRow.Set("exp", this.Exp);
                if(this.HasKey("unlock_num")) _LuaDataRow.Set("unlock_num", this.UnlockNumArray);
                if(this.HasKey("unlock_population")) _LuaDataRow.Set("unlock_population", this.UnlockPopulationArray);
                if(this.HasKey("store_limit")) _LuaDataRow.Set("store_limit", this.StoreLimit);
                if(this.HasKey("needScience")) _LuaDataRow.Set("needScience", this.NeedScience);
                if(this.HasKey("agility")) _LuaDataRow.Set("agility", this.AgilityArray);
                if(this.HasKey("rush")) _LuaDataRow.Set("rush", this.Rush);
                if(this.HasKey("unlock_quest")) _LuaDataRow.Set("unlock_quest", this.UnlockQuest);
                if(this.HasKey("endurance")) _LuaDataRow.Set("endurance", this.EnduranceArray);
                if(this.HasKey("building")) _LuaDataRow.Set("building", this.BuildingArray);
                if(this.HasKey("gift_id")) _LuaDataRow.Set("gift_id", this.GiftId);
                if(this.HasKey("strength")) _LuaDataRow.Set("strength", this.StrengthArray);
                if(this.HasKey("para2")) _LuaDataRow.Set("para2", this.Para2);
                if(this.HasKey("para3")) _LuaDataRow.Set("para3", this.Para3);
                if(this.HasKey("fixed_location")) _LuaDataRow.Set("fixed_location", this.FixedLocationArray);
                if(this.HasKey("para1")) _LuaDataRow.Set("para1", this.Para1);
                if(this.HasKey("para5")) _LuaDataRow.Set("para5", this.Para5);
                if(this.HasKey("luck")) _LuaDataRow.Set("luck", this.LuckArray);
                if(this.HasKey("open_arms")) _LuaDataRow.Set("open_arms", this.OpenArmsArray);
                if(this.HasKey("unlock_effect")) _LuaDataRow.Set("unlock_effect", this.UnlockEffect);
                if(this.HasKey("inBuilding")) _LuaDataRow.Set("inBuilding", this.InBuildingArray);
                if(this.HasKey("destroy_hero")) _LuaDataRow.Set("destroy_hero", this.DestroyHero);
                if(this.HasKey("Unlock_edit")) _LuaDataRow.Set("Unlock_edit", this.UnlockEditArray);
                if(this.HasKey("quest_interfaceId")) _LuaDataRow.Set("quest_interfaceId", this.QuestInterfaceId);
                if(this.HasKey("drawing")) _LuaDataRow.Set("drawing", this.Drawing);
                if(this.HasKey("thumb_icon")) _LuaDataRow.Set("thumb_icon", this.ThumbIcon);
                if(this.HasKey("month_card")) _LuaDataRow.Set("month_card", this.MonthCard);
                if(this.HasKey("work_bd_pic")) _LuaDataRow.Set("work_bd_pic", this.WorkBdPic);
                if(this.HasKey("up_bd_pic")) _LuaDataRow.Set("up_bd_pic", this.UpBdPic);
                if(this.HasKey("description_simple")) _LuaDataRow.Set("description_simple", this.DescriptionSimple);
                if(this.HasKey("foodShow")) _LuaDataRow.Set("foodShow", this.FoodShowArray);
                if(this.HasKey("unlock_season")) _LuaDataRow.Set("unlock_season", this.UnlockSeason);
                if(this.HasKey("unlock_order")) _LuaDataRow.Set("unlock_order", this.UnlockOrderArray);

            }

            return _LuaDataRow;
        }

        protected override LuaValue GetLuaValue(string rowId)
        {
            LuaValue luaValue = new LuaValue();
            switch (rowId)
            {
                case "id": { luaValue.SetValue(this.Id); break; }
                case "name": { luaValue.SetValue(this.Name); break; }
                case "description": { luaValue.SetValue(this.Description); break; }
                case "station_name": { luaValue.SetValue(this.StationName); break; }
                case "small_icon": { luaValue.SetValue(this.SmallIcon); break; }
                case "char": { luaValue.SetValue(this.CharAlies); break; }
                case "information": { luaValue.SetValue(this.InformationDic); break; }
                case "type": { luaValue.SetValue(this.Type); break; }
                case "max_level": { luaValue.SetValue(this.MaxLevel); break; }
                case "num": { luaValue.SetValue(this.Num); break; }
                case "tiles": { luaValue.SetValue(this.Tiles); break; }
                case "floor": { luaValue.SetValue(this.Floor); break; }
                case "power": { luaValue.SetValue(this.PowerArray); break; }
                case "pic": { luaValue.SetValue(this.Pic); break; }
                case "prefab": { luaValue.SetValue(this.PrefabArray); break; }
                case "prefab_world": { luaValue.SetValue(this.PrefabWorldDic); break; }
                case "tab_type": { luaValue.SetValue(this.TabType); break; }
                case "building_list": { luaValue.SetValue(this.BuildingList); break; }
                case "order": { luaValue.SetValue(this.Order); break; }
                case "edit": { luaValue.SetValue(this.Edit); break; }
                case "time": { luaValue.SetValue(this.Time); break; }
                case "put_consume": { luaValue.SetValue(this.PutConsumeDic); break; }
                case "power_dissipation": { luaValue.SetValue(this.PowerDissipationArray); break; }
                case "lack_resource": { luaValue.SetValue(this.LackResource); break; }
                case "para10": { luaValue.SetValue(this.Para10); break; }
                case "station_max": { luaValue.SetValue(this.StationMax); break; }
                case "intelligence": { luaValue.SetValue(this.IntelligenceArray); break; }
                case "destip": { luaValue.SetValue(this.Destip); break; }
                case "station_type": { luaValue.SetValue(this.StationType); break; }
                case "exp": { luaValue.SetValue(this.Exp); break; }
                case "unlock_num": { luaValue.SetValue(this.UnlockNumDic); break; }
                case "unlock_population": { luaValue.SetValue(this.UnlockPopulationDic); break; }
                case "store_limit": { luaValue.SetValue(this.StoreLimit); break; }
                case "needScience": { luaValue.SetValue(this.NeedScience); break; }
                case "agility": { luaValue.SetValue(this.AgilityArray); break; }
                case "rush": { luaValue.SetValue(this.Rush); break; }
                case "unlock_quest": { luaValue.SetValue(this.UnlockQuest); break; }
                case "endurance": { luaValue.SetValue(this.EnduranceArray); break; }
                case "building": { luaValue.SetValue(this.BuildingDic); break; }
                case "gift_id": { luaValue.SetValue(this.GiftId); break; }
                case "strength": { luaValue.SetValue(this.StrengthArray); break; }
                case "para2": { luaValue.SetValue(this.Para2); break; }
                case "para3": { luaValue.SetValue(this.Para3); break; }
                case "fixed_location": { luaValue.SetValue(this.FixedLocationArray); break; }
                case "para1": { luaValue.SetValue(this.Para1); break; }
                case "para5": { luaValue.SetValue(this.Para5); break; }
                case "luck": { luaValue.SetValue(this.LuckArray); break; }
                case "open_arms": { luaValue.SetValue(this.OpenArmsDic); break; }
                case "unlock_effect": { luaValue.SetValue(this.UnlockEffect); break; }
                case "inBuilding": { luaValue.SetValue(this.InBuildingArray); break; }
                case "destroy_hero": { luaValue.SetValue(this.DestroyHero); break; }
                case "Unlock_edit": { luaValue.SetValue(this.UnlockEditDic); break; }
                case "quest_interfaceId": { luaValue.SetValue(this.QuestInterfaceId); break; }
                case "drawing": { luaValue.SetValue(this.Drawing); break; }
                case "thumb_icon": { luaValue.SetValue(this.ThumbIcon); break; }
                case "month_card": { luaValue.SetValue(this.MonthCard); break; }
                case "work_bd_pic": { luaValue.SetValue(this.WorkBdPic); break; }
                case "up_bd_pic": { luaValue.SetValue(this.UpBdPic); break; }
                case "description_simple": { luaValue.SetValue(this.DescriptionSimple); break; }
                case "foodShow": { luaValue.SetValue(this.FoodShowArray); break; }
                case "unlock_season": { luaValue.SetValue(this.UnlockSeason); break; }
                case "unlock_order": { luaValue.SetValue(this.UnlockOrderArray); break; }

                default:
                    break;
            }

            return luaValue;
        }
        
        public override bool HasKey(string column)
        {
            bool result = false;

            switch (column)
            {
                case "id": { result = !this.IsEmpty(_datarow.Id); break; }
                case "name": { result = !this.IsEmpty(this.Name); break; }
                case "description": { result = !this.IsEmpty(this.Description); break; }
                case "station_name": { result = !this.IsEmpty(_datarow.StationName); break; }
                case "small_icon": { result = !this.IsEmpty(this.SmallIcon); break; }
                case "char": { result = !this.IsEmpty(_datarow.CharAlies); break; }
                case "information": { result = _datarow.InformationLength > 0; break; }
                case "type": { result = !this.IsEmpty(_datarow.Type); break; }
                case "max_level": { result = !this.IsEmpty(_datarow.MaxLevel); break; }
                case "num": { result = !this.IsEmpty(_datarow.Num); break; }
                case "tiles": { result = !this.IsEmpty(_datarow.Tiles); break; }
                case "floor": { result = !this.IsEmpty(_datarow.Floor); break; }
                case "power": { result = _datarow.PowerLength > 0; break; }
                case "pic": { result = !this.IsEmpty(this.Pic); break; }
                case "prefab": { result = _datarow.PrefabLength > 0; break; }
                case "prefab_world": { result = _datarow.PrefabWorldLength > 0; break; }
                case "tab_type": { result = !this.IsEmpty(_datarow.TabType); break; }
                case "building_list": { result = !this.IsEmpty(_datarow.BuildingList); break; }
                case "order": { result = !this.IsEmpty(_datarow.Order); break; }
                case "edit": { result = !this.IsEmpty(_datarow.Edit); break; }
                case "time": { result = !this.IsEmpty(_datarow.Time); break; }
                case "put_consume": { result = _datarow.PutConsumeLength > 0; break; }
                case "power_dissipation": { result = _datarow.PowerDissipationLength > 0; break; }
                case "lack_resource": { result = !this.IsEmpty(_datarow.LackResource); break; }
                case "para10": { result = !this.IsEmpty(this.Para10); break; }
                case "station_max": { result = !this.IsEmpty(_datarow.StationMax); break; }
                case "intelligence": { result = _datarow.IntelligenceLength > 0; break; }
                case "destip": { result = !this.IsEmpty(_datarow.Destip); break; }
                case "station_type": { result = !this.IsEmpty(_datarow.StationType); break; }
                case "exp": { result = !this.IsEmpty(_datarow.Exp); break; }
                case "unlock_num": { result = _datarow.UnlockNumLength > 0; break; }
                case "unlock_population": { result = _datarow.UnlockPopulationLength > 0; break; }
                case "store_limit": { result = !this.IsEmpty(_datarow.StoreLimit); break; }
                case "needScience": { result = !this.IsEmpty(_datarow.NeedScience); break; }
                case "agility": { result = _datarow.AgilityLength > 0; break; }
                case "rush": { result = !this.IsEmpty(_datarow.Rush); break; }
                case "unlock_quest": { result = !this.IsEmpty(_datarow.UnlockQuest); break; }
                case "endurance": { result = _datarow.EnduranceLength > 0; break; }
                case "building": { result = _datarow.BuildingLength > 0; break; }
                case "gift_id": { result = !this.IsEmpty(this.GiftId); break; }
                case "strength": { result = _datarow.StrengthLength > 0; break; }
                case "para2": { result = !this.IsEmpty(this.Para2); break; }
                case "para3": { result = !this.IsEmpty(this.Para3); break; }
                case "fixed_location": { result = _datarow.FixedLocationLength > 0; break; }
                case "para1": { result = !this.IsEmpty(this.Para1); break; }
                case "para5": { result = !this.IsEmpty(this.Para5); break; }
                case "luck": { result = _datarow.LuckLength > 0; break; }
                case "open_arms": { result = _datarow.OpenArmsLength > 0; break; }
                case "unlock_effect": { result = !this.IsEmpty(_datarow.UnlockEffect); break; }
                case "inBuilding": { result = _datarow.InBuildingLength > 0; break; }
                case "destroy_hero": { result = !this.IsEmpty(_datarow.DestroyHero); break; }
                case "Unlock_edit": { result = _datarow.UnlockEditLength > 0; break; }
                case "quest_interfaceId": { result = !this.IsEmpty(_datarow.QuestInterfaceId); break; }
                case "drawing": { result = !this.IsEmpty(_datarow.Drawing); break; }
                case "thumb_icon": { result = !this.IsEmpty(this.ThumbIcon); break; }
                case "month_card": { result = !this.IsEmpty(_datarow.MonthCard); break; }
                case "work_bd_pic": { result = !this.IsEmpty(this.WorkBdPic); break; }
                case "up_bd_pic": { result = !this.IsEmpty(this.UpBdPic); break; }
                case "description_simple": { result = !this.IsEmpty(this.DescriptionSimple); break; }
                case "foodShow": { result = _datarow.FoodShowLength > 0; break; }
                case "unlock_season": { result = !this.IsEmpty(_datarow.UnlockSeason); break; }
                case "unlock_order": { result = _datarow.UnlockOrderLength > 0; break; }

                default:
                    break;
            }

            return result;
        }
        
        public int Id { get { return this.GetTableInt(_datarow.Id); } }

        private string _Name = null;
        public string Name { get { if (null == _Name) _Name = _datarow.Name; return _Name; } }

        private string _Description = null;
        public string Description { get { if (null == _Description) _Description = _datarow.Description; return _Description; } }

        public int StationName { get { return this.GetTableInt(_datarow.StationName); } }

        private string _SmallIcon = null;
        public string SmallIcon { get { if (null == _SmallIcon) _SmallIcon = _datarow.SmallIcon; return _SmallIcon; } }

        public int CharAlies { get { return this.GetTableInt(_datarow.CharAlies); } }

        private string[] _InformationArray = null;
        public string[] InformationArray { get { if(null == _InformationArray) { if (_datarow.InformationLength > 0) { _InformationArray = new string[_datarow.InformationLength]; for (int i = 0; i < _datarow.InformationLength; i++) { _InformationArray[i] = _datarow.Information(i); } } } return _InformationArray; } }
        public int InformationArrayLength { get { if (null == this.InformationArray) return 0; return this.InformationArray.Length; } }

        private Dictionary<int, int> _InformationDic = null;
        public Dictionary<int, int> InformationDic { get { if(null == _InformationDic) { _InformationDic = new Dictionary<int, int>(); if(InformationArrayLength > 0) { for(int i = 0; i < InformationArrayLength; i++) { string[] array = InformationArray[i].Split(split_chars); if(array.Length > 1) { int key = array[0].ToInt(); if (!_InformationDic.ContainsKey(key)) _InformationDic.Add(array[0].ToInt(), array[1].ToInt()); } } } } return _InformationDic; } }

        public int Type { get { return this.GetTableInt(_datarow.Type); } }

        public int MaxLevel { get { return this.GetTableInt(_datarow.MaxLevel); } }

        public int Num { get { return this.GetTableInt(_datarow.Num); } }

        public int Tiles { get { return this.GetTableInt(_datarow.Tiles); } }

        public int Floor { get { return this.GetTableInt(_datarow.Floor); } }

        private int[] _PowerArray = null;
        public int[] PowerArray { get { if (null == _PowerArray) _PowerArray = _datarow.GetPowerArray(); return _PowerArray; } }
        public int PowerArrayLength { get { if (null == this.PowerArray) return 0; return this.PowerArray.Length; } }

        private string _Pic = null;
        public string Pic { get { if (null == _Pic) _Pic = _datarow.Pic; return _Pic; } }

        private string[] _PrefabArray = null;
        public string[] PrefabArray { get { if(null == _PrefabArray) { if (_datarow.PrefabLength > 0) { _PrefabArray = new string[_datarow.PrefabLength]; for (int i = 0; i < _datarow.PrefabLength; i++) { _PrefabArray[i] = _datarow.Prefab(i); } } } return _PrefabArray; } }
        public int PrefabArrayLength { get { if (null == this.PrefabArray) return 0; return this.PrefabArray.Length; } }

        private string[] _PrefabWorldArray = null;
        public string[] PrefabWorldArray { get { if(null == _PrefabWorldArray) { if (_datarow.PrefabWorldLength > 0) { _PrefabWorldArray = new string[_datarow.PrefabWorldLength]; for (int i = 0; i < _datarow.PrefabWorldLength; i++) { _PrefabWorldArray[i] = _datarow.PrefabWorld(i); } } } return _PrefabWorldArray; } }
        public int PrefabWorldArrayLength { get { if (null == this.PrefabWorldArray) return 0; return this.PrefabWorldArray.Length; } }

        private Dictionary<string, string> _PrefabWorldDic = null;
        public Dictionary<string, string> PrefabWorldDic { get { if(null == _PrefabWorldDic) { _PrefabWorldDic = new Dictionary<string, string>(); if(PrefabWorldArrayLength > 0) { for(int i = 0; i < PrefabWorldArrayLength; i++) { string[] array = PrefabWorldArray[i].Split(split_chars); if(array.Length > 1) { string key = array[0]; if (!_PrefabWorldDic.ContainsKey(key)) _PrefabWorldDic.Add(array[0], array[1]); } } } } return _PrefabWorldDic; } }

        public int TabType { get { return this.GetTableInt(_datarow.TabType); } }

        public int BuildingList { get { return this.GetTableInt(_datarow.BuildingList); } }

        public int Order { get { return this.GetTableInt(_datarow.Order); } }

        public int Edit { get { return this.GetTableInt(_datarow.Edit); } }

        public int Time { get { return this.GetTableInt(_datarow.Time); } }

        private string[] _PutConsumeArray = null;
        public string[] PutConsumeArray { get { if(null == _PutConsumeArray) { if (_datarow.PutConsumeLength > 0) { _PutConsumeArray = new string[_datarow.PutConsumeLength]; for (int i = 0; i < _datarow.PutConsumeLength; i++) { _PutConsumeArray[i] = _datarow.PutConsume(i); } } } return _PutConsumeArray; } }
        public int PutConsumeArrayLength { get { if (null == this.PutConsumeArray) return 0; return this.PutConsumeArray.Length; } }

        private Dictionary<int, int> _PutConsumeDic = null;
        public Dictionary<int, int> PutConsumeDic { get { if(null == _PutConsumeDic) { _PutConsumeDic = new Dictionary<int, int>(); if(PutConsumeArrayLength > 0) { for(int i = 0; i < PutConsumeArrayLength; i++) { string[] array = PutConsumeArray[i].Split(split_chars); if(array.Length > 1) { int key = array[0].ToInt(); if (!_PutConsumeDic.ContainsKey(key)) _PutConsumeDic.Add(array[0].ToInt(), array[1].ToInt()); } } } } return _PutConsumeDic; } }

        private float[] _PowerDissipationArray = null;
        public float[] PowerDissipationArray { get { if (null == _PowerDissipationArray) _PowerDissipationArray = _datarow.GetPowerDissipationArray(); return _PowerDissipationArray; } }
        public int PowerDissipationArrayLength { get { if (null == this.PowerDissipationArray) return 0; return this.PowerDissipationArray.Length; } }

        public int LackResource { get { return this.GetTableInt(_datarow.LackResource); } }

        private string _Para10 = null;
        public string Para10 { get { if (null == _Para10) _Para10 = _datarow.Para10; return _Para10; } }

        public int StationMax { get { return this.GetTableInt(_datarow.StationMax); } }

        private string[] _IntelligenceArray = null;
        public string[] IntelligenceArray { get { if(null == _IntelligenceArray) { if (_datarow.IntelligenceLength > 0) { _IntelligenceArray = new string[_datarow.IntelligenceLength]; for (int i = 0; i < _datarow.IntelligenceLength; i++) { _IntelligenceArray[i] = _datarow.Intelligence(i); } } } return _IntelligenceArray; } }
        public int IntelligenceArrayLength { get { if (null == this.IntelligenceArray) return 0; return this.IntelligenceArray.Length; } }

        public int Destip { get { return this.GetTableInt(_datarow.Destip); } }

        public int StationType { get { return this.GetTableInt(_datarow.StationType); } }

        public int Exp { get { return this.GetTableInt(_datarow.Exp); } }

        private string[] _UnlockNumArray = null;
        public string[] UnlockNumArray { get { if(null == _UnlockNumArray) { if (_datarow.UnlockNumLength > 0) { _UnlockNumArray = new string[_datarow.UnlockNumLength]; for (int i = 0; i < _datarow.UnlockNumLength; i++) { _UnlockNumArray[i] = _datarow.UnlockNum(i); } } } return _UnlockNumArray; } }
        public int UnlockNumArrayLength { get { if (null == this.UnlockNumArray) return 0; return this.UnlockNumArray.Length; } }

        private Dictionary<int, int> _UnlockNumDic = null;
        public Dictionary<int, int> UnlockNumDic { get { if(null == _UnlockNumDic) { _UnlockNumDic = new Dictionary<int, int>(); if(UnlockNumArrayLength > 0) { for(int i = 0; i < UnlockNumArrayLength; i++) { string[] array = UnlockNumArray[i].Split(split_chars); if(array.Length > 1) { int key = array[0].ToInt(); if (!_UnlockNumDic.ContainsKey(key)) _UnlockNumDic.Add(array[0].ToInt(), array[1].ToInt()); } } } } return _UnlockNumDic; } }

        private string[] _UnlockPopulationArray = null;
        public string[] UnlockPopulationArray { get { if(null == _UnlockPopulationArray) { if (_datarow.UnlockPopulationLength > 0) { _UnlockPopulationArray = new string[_datarow.UnlockPopulationLength]; for (int i = 0; i < _datarow.UnlockPopulationLength; i++) { _UnlockPopulationArray[i] = _datarow.UnlockPopulation(i); } } } return _UnlockPopulationArray; } }
        public int UnlockPopulationArrayLength { get { if (null == this.UnlockPopulationArray) return 0; return this.UnlockPopulationArray.Length; } }

        private Dictionary<int, int> _UnlockPopulationDic = null;
        public Dictionary<int, int> UnlockPopulationDic { get { if(null == _UnlockPopulationDic) { _UnlockPopulationDic = new Dictionary<int, int>(); if(UnlockPopulationArrayLength > 0) { for(int i = 0; i < UnlockPopulationArrayLength; i++) { string[] array = UnlockPopulationArray[i].Split(split_chars); if(array.Length > 1) { int key = array[0].ToInt(); if (!_UnlockPopulationDic.ContainsKey(key)) _UnlockPopulationDic.Add(array[0].ToInt(), array[1].ToInt()); } } } } return _UnlockPopulationDic; } }

        public int StoreLimit { get { return this.GetTableInt(_datarow.StoreLimit); } }

        public int NeedScience { get { return this.GetTableInt(_datarow.NeedScience); } }

        private string[] _AgilityArray = null;
        public string[] AgilityArray { get { if(null == _AgilityArray) { if (_datarow.AgilityLength > 0) { _AgilityArray = new string[_datarow.AgilityLength]; for (int i = 0; i < _datarow.AgilityLength; i++) { _AgilityArray[i] = _datarow.Agility(i); } } } return _AgilityArray; } }
        public int AgilityArrayLength { get { if (null == this.AgilityArray) return 0; return this.AgilityArray.Length; } }

        public int Rush { get { return this.GetTableInt(_datarow.Rush); } }

        public int UnlockQuest { get { return this.GetTableInt(_datarow.UnlockQuest); } }

        private string[] _EnduranceArray = null;
        public string[] EnduranceArray { get { if(null == _EnduranceArray) { if (_datarow.EnduranceLength > 0) { _EnduranceArray = new string[_datarow.EnduranceLength]; for (int i = 0; i < _datarow.EnduranceLength; i++) { _EnduranceArray[i] = _datarow.Endurance(i); } } } return _EnduranceArray; } }
        public int EnduranceArrayLength { get { if (null == this.EnduranceArray) return 0; return this.EnduranceArray.Length; } }

        private string[] _BuildingArray = null;
        public string[] BuildingArray { get { if(null == _BuildingArray) { if (_datarow.BuildingLength > 0) { _BuildingArray = new string[_datarow.BuildingLength]; for (int i = 0; i < _datarow.BuildingLength; i++) { _BuildingArray[i] = _datarow.Building(i); } } } return _BuildingArray; } }
        public int BuildingArrayLength { get { if (null == this.BuildingArray) return 0; return this.BuildingArray.Length; } }

        private Dictionary<int, int> _BuildingDic = null;
        public Dictionary<int, int> BuildingDic { get { if(null == _BuildingDic) { _BuildingDic = new Dictionary<int, int>(); if(BuildingArrayLength > 0) { for(int i = 0; i < BuildingArrayLength; i++) { string[] array = BuildingArray[i].Split(split_chars); if(array.Length > 1) { int key = array[0].ToInt(); if (!_BuildingDic.ContainsKey(key)) _BuildingDic.Add(array[0].ToInt(), array[1].ToInt()); } } } } return _BuildingDic; } }

        private string _GiftId = null;
        public string GiftId { get { if (null == _GiftId) _GiftId = _datarow.GiftId; return _GiftId; } }

        private string[] _StrengthArray = null;
        public string[] StrengthArray { get { if(null == _StrengthArray) { if (_datarow.StrengthLength > 0) { _StrengthArray = new string[_datarow.StrengthLength]; for (int i = 0; i < _datarow.StrengthLength; i++) { _StrengthArray[i] = _datarow.Strength(i); } } } return _StrengthArray; } }
        public int StrengthArrayLength { get { if (null == this.StrengthArray) return 0; return this.StrengthArray.Length; } }

        private string _Para2 = null;
        public string Para2 { get { if (null == _Para2) _Para2 = _datarow.Para2; return _Para2; } }

        private string _Para3 = null;
        public string Para3 { get { if (null == _Para3) _Para3 = _datarow.Para3; return _Para3; } }

        private string[] _FixedLocationArray = null;
        public string[] FixedLocationArray { get { if(null == _FixedLocationArray) { if (_datarow.FixedLocationLength > 0) { _FixedLocationArray = new string[_datarow.FixedLocationLength]; for (int i = 0; i < _datarow.FixedLocationLength; i++) { _FixedLocationArray[i] = _datarow.FixedLocation(i); } } } return _FixedLocationArray; } }
        public int FixedLocationArrayLength { get { if (null == this.FixedLocationArray) return 0; return this.FixedLocationArray.Length; } }

        private string _Para1 = null;
        public string Para1 { get { if (null == _Para1) _Para1 = _datarow.Para1; return _Para1; } }

        private string _Para5 = null;
        public string Para5 { get { if (null == _Para5) _Para5 = _datarow.Para5; return _Para5; } }

        private string[] _LuckArray = null;
        public string[] LuckArray { get { if(null == _LuckArray) { if (_datarow.LuckLength > 0) { _LuckArray = new string[_datarow.LuckLength]; for (int i = 0; i < _datarow.LuckLength; i++) { _LuckArray[i] = _datarow.Luck(i); } } } return _LuckArray; } }
        public int LuckArrayLength { get { if (null == this.LuckArray) return 0; return this.LuckArray.Length; } }

        private string[] _OpenArmsArray = null;
        public string[] OpenArmsArray { get { if(null == _OpenArmsArray) { if (_datarow.OpenArmsLength > 0) { _OpenArmsArray = new string[_datarow.OpenArmsLength]; for (int i = 0; i < _datarow.OpenArmsLength; i++) { _OpenArmsArray[i] = _datarow.OpenArms(i); } } } return _OpenArmsArray; } }
        public int OpenArmsArrayLength { get { if (null == this.OpenArmsArray) return 0; return this.OpenArmsArray.Length; } }

        private Dictionary<int, int> _OpenArmsDic = null;
        public Dictionary<int, int> OpenArmsDic { get { if(null == _OpenArmsDic) { _OpenArmsDic = new Dictionary<int, int>(); if(OpenArmsArrayLength > 0) { for(int i = 0; i < OpenArmsArrayLength; i++) { string[] array = OpenArmsArray[i].Split(split_chars); if(array.Length > 1) { int key = array[0].ToInt(); if (!_OpenArmsDic.ContainsKey(key)) _OpenArmsDic.Add(array[0].ToInt(), array[1].ToInt()); } } } } return _OpenArmsDic; } }

        public int UnlockEffect { get { return this.GetTableInt(_datarow.UnlockEffect); } }

        private int[] _InBuildingArray = null;
        public int[] InBuildingArray { get { if (null == _InBuildingArray) _InBuildingArray = _datarow.GetInBuildingArray(); return _InBuildingArray; } }
        public int InBuildingArrayLength { get { if (null == this.InBuildingArray) return 0; return this.InBuildingArray.Length; } }

        public int DestroyHero { get { return this.GetTableInt(_datarow.DestroyHero); } }

        private string[] _UnlockEditArray = null;
        public string[] UnlockEditArray { get { if(null == _UnlockEditArray) { if (_datarow.UnlockEditLength > 0) { _UnlockEditArray = new string[_datarow.UnlockEditLength]; for (int i = 0; i < _datarow.UnlockEditLength; i++) { _UnlockEditArray[i] = _datarow.UnlockEdit(i); } } } return _UnlockEditArray; } }
        public int UnlockEditArrayLength { get { if (null == this.UnlockEditArray) return 0; return this.UnlockEditArray.Length; } }

        private Dictionary<int, int> _UnlockEditDic = null;
        public Dictionary<int, int> UnlockEditDic { get { if(null == _UnlockEditDic) { _UnlockEditDic = new Dictionary<int, int>(); if(UnlockEditArrayLength > 0) { for(int i = 0; i < UnlockEditArrayLength; i++) { string[] array = UnlockEditArray[i].Split(split_chars); if(array.Length > 1) { int key = array[0].ToInt(); if (!_UnlockEditDic.ContainsKey(key)) _UnlockEditDic.Add(array[0].ToInt(), array[1].ToInt()); } } } } return _UnlockEditDic; } }

        public int QuestInterfaceId { get { return this.GetTableInt(_datarow.QuestInterfaceId); } }

        public int Drawing { get { return this.GetTableInt(_datarow.Drawing); } }

        private string _ThumbIcon = null;
        public string ThumbIcon { get { if (null == _ThumbIcon) _ThumbIcon = _datarow.ThumbIcon; return _ThumbIcon; } }

        public int MonthCard { get { return this.GetTableInt(_datarow.MonthCard); } }

        private string _WorkBdPic = null;
        public string WorkBdPic { get { if (null == _WorkBdPic) _WorkBdPic = _datarow.WorkBdPic; return _WorkBdPic; } }

        private string _UpBdPic = null;
        public string UpBdPic { get { if (null == _UpBdPic) _UpBdPic = _datarow.UpBdPic; return _UpBdPic; } }

        private string _DescriptionSimple = null;
        public string DescriptionSimple { get { if (null == _DescriptionSimple) _DescriptionSimple = _datarow.DescriptionSimple; return _DescriptionSimple; } }

        private int[] _FoodShowArray = null;
        public int[] FoodShowArray { get { if (null == _FoodShowArray) _FoodShowArray = _datarow.GetFoodShowArray(); return _FoodShowArray; } }
        public int FoodShowArrayLength { get { if (null == this.FoodShowArray) return 0; return this.FoodShowArray.Length; } }

        public int UnlockSeason { get { return this.GetTableInt(_datarow.UnlockSeason); } }

        private int[] _UnlockOrderArray = null;
        public int[] UnlockOrderArray { get { if (null == _UnlockOrderArray) _UnlockOrderArray = _datarow.GetUnlockOrderArray(); return _UnlockOrderArray; } }
        public int UnlockOrderArrayLength { get { if (null == this.UnlockOrderArray) return 0; return this.UnlockOrderArray.Length; } }


    }

    #endregion DataRow
}