// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System;
using System.Text;
using System.Collections.Generic;
using System.IO;

namespace LF
{
	public class StringIdConfig : BaseConfig
    {
        protected override void LoadIndex()
        {
            if (row_index != null && row_index.Count > 0)
            {
                return;
            }

            int offset = 4;

            byte[] buffers = null;

#if UNITY_EDITOR
            buffers = File.ReadAllBytes(this.GetIndexFile());
#else
            if (ConfigManager.Instance.DataTableAssets.ContainsKey(this.GetIndexFileName()))
            {
                buffers = ConfigManager.Instance.DataTableAssets[this.GetIndexFileName()];
            }
#endif

            if (null == buffers)
                return;

            if (buffers.Length <= offset)
                return;

            int count = BitConverter.ToInt32(buffers, offset);
            if (count <= 0)
                return;

            int length = 0;
            int index = 0;
            int hashcode = 0;
            string id;

            offset += 4;

            // 字典初始化并且直接设置成count
            row_index = new Dictionary<int, int>(count);

            for (int i = 0; i < count; i++)
            {
                length = BitConverter.ToInt32(buffers, offset);
                offset += 4;

                id = Encoding.UTF8.GetString(buffers, offset, length);
                offset += length;
                
                index = BitConverter.ToUInt16(buffers, offset);
                offset += 2;

                hashcode = id.GetHashCode();

                if (!this.row_index.ContainsKey(hashcode))
                    this.row_index.Add(hashcode, index);
            }
        }
    }
}