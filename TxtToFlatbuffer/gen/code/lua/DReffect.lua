-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DReffect = {} -- the module
local DReffect_mt = {} -- the class metatable

function DReffect.New()
    local o = {}
    setmetatable(o, {__index = DReffect_mt})
    return o
end
function DReffect.GetRootAsDReffect(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DReffect.New()
    o:Init(buf, n + offset)
    return o
end
function DReffect_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DReffect_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DReffect_mt:AssetName()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DReffect_mt:Level()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DReffect_mt:SoundId()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DReffect_mt:KeepTime()
    local o = self.view:Offset(12)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DReffect.Start(builder) builder:StartObject(5) end
function DReffect.AddId(builder, id) builder:PrependUOffsetTRelativeSlot(0, id, 0) end
function DReffect.AddAssetName(builder, AssetName) builder:PrependUOffsetTRelativeSlot(1, AssetName, 0) end
function DReffect.AddLevel(builder, Level) builder:PrependInt16Slot(2, Level, 0) end
function DReffect.AddSoundId(builder, SoundId) builder:PrependUOffsetTRelativeSlot(3, SoundId, 0) end
function DReffect.AddKeepTime(builder, KeepTime) builder:PrependInt32Slot(4, KeepTime, 0) end
function DReffect.End(builder) return builder:EndObject() end

return DReffect -- return the module