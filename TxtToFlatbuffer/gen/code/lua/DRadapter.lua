-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRadapter = {} -- the module
local DRadapter_mt = {} -- the class metatable

function DRadapter.New()
    local o = {}
    setmetatable(o, {__index = DRadapter_mt})
    return o
end
function DRadapter.GetRootAsDRadapter(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRadapter.New()
    o:Init(buf, n + offset)
    return o
end
function DRadapter_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRadapter_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:MinMemorySize()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:MaxMemorySize()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:ScreenResolution(j)
    local o = self.view:Offset(10)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function DRadapter_mt:ScreenResolutionLength()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRadapter_mt:TargetFrameRate()
    local o = self.view:Offset(12)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:EffectLevel()
    local o = self.view:Offset(14)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:IsEnablePBR()
    local o = self.view:Offset(16)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:AsyncUploadBufferSize()
    local o = self.view:Offset(18)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:IsVegetationRenderingOfMainCity()
    local o = self.view:Offset(20)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:PointSource()
    local o = self.view:Offset(22)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:VisibleRolesNumber()
    local o = self.view:Offset(24)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:IsShowFootShadow()
    local o = self.view:Offset(26)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsShowEnvironmentEffect()
    local o = self.view:Offset(28)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsRealTimeShadowRendering()
    local o = self.view:Offset(30)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsShowSpecialEffects()
    local o = self.view:Offset(32)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:TerrainRenderingLevelOfMainCity()
    local o = self.view:Offset(34)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:BuildingRenderingLevelOfMainCity()
    local o = self.view:Offset(36)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:IsSkyBoxRenderingOfMainCity()
    local o = self.view:Offset(38)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:Is2DCloudRenderingOfMainCity()
    local o = self.view:Offset(40)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsRoleBloomRendering()
    local o = self.view:Offset(42)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsRoleShadowRendering()
    local o = self.view:Offset(44)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsShowRoleEffect()
    local o = self.view:Offset(46)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsShowEffectOfPVE()
    local o = self.view:Offset(48)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsBlitBlur()
    local o = self.view:Offset(50)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsTerrainRenderingOfWorld()
    local o = self.view:Offset(52)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:BuildingRenderingLevelOfWorld()
    local o = self.view:Offset(54)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:WaterRenderingLevelOfWorld()
    local o = self.view:Offset(56)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:IsRoleSelfLightRendering()
    local o = self.view:Offset(58)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:RoleBloomLevel()
    local o = self.view:Offset(60)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function DRadapter_mt:RoleFXAA()
    local o = self.view:Offset(62)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter_mt:IsRoleEnableFXAA()
    local o = self.view:Offset(64)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function DRadapter.Start(builder) builder:StartObject(31) end
function DRadapter.AddId(builder, Id) builder:PrependInt32Slot(0, Id, 0) end
function DRadapter.AddMinMemorySize(builder, MinMemorySize) builder:PrependInt32Slot(1, MinMemorySize, 0) end
function DRadapter.AddMaxMemorySize(builder, MaxMemorySize) builder:PrependInt32Slot(2, MaxMemorySize, 0) end
function DRadapter.AddScreenResolution(builder, ScreenResolution) builder:PrependUOffsetTRelativeSlot(3, ScreenResolution, 0) end
function DRadapter.StartScreenResolutionVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRadapter.AddTargetFrameRate(builder, TargetFrameRate) builder:PrependInt32Slot(4, TargetFrameRate, 0) end
function DRadapter.AddEffectLevel(builder, EffectLevel) builder:PrependInt16Slot(5, EffectLevel, 0) end
function DRadapter.AddIsEnablePBR(builder, IsEnablePBR) builder:PrependBoolSlot(6, IsEnablePBR, 0) end
function DRadapter.AddAsyncUploadBufferSize(builder, AsyncUploadBufferSize) builder:PrependInt32Slot(7, AsyncUploadBufferSize, 0) end
function DRadapter.AddIsVegetationRenderingOfMainCity(builder, IsVegetationRenderingOfMainCity) builder:PrependBoolSlot(8, IsVegetationRenderingOfMainCity, 0) end
function DRadapter.AddPointSource(builder, PointSource) builder:PrependInt16Slot(9, PointSource, 0) end
function DRadapter.AddVisibleRolesNumber(builder, VisibleRolesNumber) builder:PrependInt32Slot(10, VisibleRolesNumber, 0) end
function DRadapter.AddIsShowFootShadow(builder, IsShowFootShadow) builder:PrependBoolSlot(11, IsShowFootShadow, 0) end
function DRadapter.AddIsShowEnvironmentEffect(builder, IsShowEnvironmentEffect) builder:PrependBoolSlot(12, IsShowEnvironmentEffect, 0) end
function DRadapter.AddIsRealTimeShadowRendering(builder, IsRealTimeShadowRendering) builder:PrependBoolSlot(13, IsRealTimeShadowRendering, 0) end
function DRadapter.AddIsShowSpecialEffects(builder, IsShowSpecialEffects) builder:PrependBoolSlot(14, IsShowSpecialEffects, 0) end
function DRadapter.AddTerrainRenderingLevelOfMainCity(builder, TerrainRenderingLevelOfMainCity) builder:PrependInt16Slot(15, TerrainRenderingLevelOfMainCity, 0) end
function DRadapter.AddBuildingRenderingLevelOfMainCity(builder, BuildingRenderingLevelOfMainCity) builder:PrependInt16Slot(16, BuildingRenderingLevelOfMainCity, 0) end
function DRadapter.AddIsSkyBoxRenderingOfMainCity(builder, IsSkyBoxRenderingOfMainCity) builder:PrependBoolSlot(17, IsSkyBoxRenderingOfMainCity, 0) end
function DRadapter.AddIs2DCloudRenderingOfMainCity(builder, Is2DCloudRenderingOfMainCity) builder:PrependBoolSlot(18, Is2DCloudRenderingOfMainCity, 0) end
function DRadapter.AddIsRoleBloomRendering(builder, IsRoleBloomRendering) builder:PrependBoolSlot(19, IsRoleBloomRendering, 0) end
function DRadapter.AddIsRoleShadowRendering(builder, IsRoleShadowRendering) builder:PrependBoolSlot(20, IsRoleShadowRendering, 0) end
function DRadapter.AddIsShowRoleEffect(builder, IsShowRoleEffect) builder:PrependBoolSlot(21, IsShowRoleEffect, 0) end
function DRadapter.AddIsShowEffectOfPVE(builder, IsShowEffectOfPVE) builder:PrependBoolSlot(22, IsShowEffectOfPVE, 0) end
function DRadapter.AddIsBlitBlur(builder, IsBlitBlur) builder:PrependBoolSlot(23, IsBlitBlur, 0) end
function DRadapter.AddIsTerrainRenderingOfWorld(builder, IsTerrainRenderingOfWorld) builder:PrependInt16Slot(24, IsTerrainRenderingOfWorld, 0) end
function DRadapter.AddBuildingRenderingLevelOfWorld(builder, BuildingRenderingLevelOfWorld) builder:PrependInt16Slot(25, BuildingRenderingLevelOfWorld, 0) end
function DRadapter.AddWaterRenderingLevelOfWorld(builder, WaterRenderingLevelOfWorld) builder:PrependInt16Slot(26, WaterRenderingLevelOfWorld, 0) end
function DRadapter.AddIsRoleSelfLightRendering(builder, IsRoleSelfLightRendering) builder:PrependBoolSlot(27, IsRoleSelfLightRendering, 0) end
function DRadapter.AddRoleBloomLevel(builder, RoleBloomLevel) builder:PrependInt16Slot(28, RoleBloomLevel, 0) end
function DRadapter.AddRoleFXAA(builder, RoleFXAA) builder:PrependBoolSlot(29, RoleFXAA, 0) end
function DRadapter.AddIsRoleEnableFXAA(builder, IsRoleEnableFXAA) builder:PrependBoolSlot(30, IsRoleEnableFXAA, 0) end
function DRadapter.End(builder) return builder:EndObject() end

return DRadapter -- return the module