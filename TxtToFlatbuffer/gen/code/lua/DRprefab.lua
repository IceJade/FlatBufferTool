-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRprefab = {} -- the module
local DRprefab_mt = {} -- the class metatable

function DRprefab.New()
    local o = {}
    setmetatable(o, {__index = DRprefab_mt})
    return o
end
function DRprefab.GetRootAsDRprefab(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRprefab.New()
    o:Init(buf, n + offset)
    return o
end
function DRprefab_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRprefab_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRprefab_mt:AssetName()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRprefab_mt:DefaultPrefab()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRprefab_mt:Prefabs(j)
    local o = self.view:Offset(10)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:String(a + ((j-1) * 4))
    end
    return ''
end
function DRprefab_mt:PrefabsLength()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DRprefab.Start(builder) builder:StartObject(4) end
function DRprefab.AddId(builder, id) builder:PrependUOffsetTRelativeSlot(0, id, 0) end
function DRprefab.AddAssetName(builder, AssetName) builder:PrependUOffsetTRelativeSlot(1, AssetName, 0) end
function DRprefab.AddDefaultPrefab(builder, DefaultPrefab) builder:PrependUOffsetTRelativeSlot(2, DefaultPrefab, 0) end
function DRprefab.AddPrefabs(builder, Prefabs) builder:PrependUOffsetTRelativeSlot(3, Prefabs, 0) end
function DRprefab.StartPrefabsVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function DRprefab.End(builder) return builder:EndObject() end

return DRprefab -- return the module