// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using Chanto.Table;
using System.Collections.Generic;

namespace Chanto.Table
{
    #region Table

	public sealed class AdapterTable : BaseConfig
    {
        private Table_adapter table = default(Table_adapter);

        private Dictionary<int, AdapterDataRow> data_row = new Dictionary<int, AdapterDataRow>(128);
        
        public static string g_TableFileName = "adapter";

        #region Data Method

        public override bool GetBoolValue(int id, string column, bool defaultValue = false)
        {
            bool result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "IsEnablePBR": { result = datarow.IsEnablePBR; break; }
                case "IsVegetationRenderingOfMainCity": { result = datarow.IsVegetationRenderingOfMainCity; break; }
                case "IsShowFootShadow": { result = datarow.IsShowFootShadow; break; }
                case "IsShowEnvironmentEffect": { result = datarow.IsShowEnvironmentEffect; break; }
                case "IsRealTimeShadowRendering": { result = datarow.IsRealTimeShadowRendering; break; }
                case "IsShowSpecialEffects": { result = datarow.IsShowSpecialEffects; break; }
                case "IsSkyBoxRenderingOfMainCity": { result = datarow.IsSkyBoxRenderingOfMainCity; break; }
                case "Is2DCloudRenderingOfMainCity": { result = datarow.Is2DCloudRenderingOfMainCity; break; }
                case "IsRoleBloomRendering": { result = datarow.IsRoleBloomRendering; break; }
                case "IsRoleShadowRendering": { result = datarow.IsRoleShadowRendering; break; }
                case "IsShowRoleEffect": { result = datarow.IsShowRoleEffect; break; }
                case "IsShowEffectOfPVE": { result = datarow.IsShowEffectOfPVE; break; }
                case "IsBlitBlur": { result = datarow.IsBlitBlur; break; }
                case "IsRoleSelfLightRendering": { result = datarow.IsRoleSelfLightRendering; break; }
                case "RoleFXAA": { result = datarow.RoleFXAA; break; }
                case "IsRoleEnableFXAA": { result = datarow.IsRoleEnableFXAA; break; }

                default: { Log.Error("Table_adapter.GetBoolValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short GetShortValue(int id, string column, short defaultValue = 0)
        {
            short result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "EffectLevel": { result = datarow.EffectLevel; break; }
                case "PointSource": { result = datarow.PointSource; break; }
                case "TerrainRenderingLevelOfMainCity": { result = datarow.TerrainRenderingLevelOfMainCity; break; }
                case "BuildingRenderingLevelOfMainCity": { result = datarow.BuildingRenderingLevelOfMainCity; break; }
                case "IsTerrainRenderingOfWorld": { result = datarow.IsTerrainRenderingOfWorld; break; }
                case "BuildingRenderingLevelOfWorld": { result = datarow.BuildingRenderingLevelOfWorld; break; }
                case "WaterRenderingLevelOfWorld": { result = datarow.WaterRenderingLevelOfWorld; break; }
                case "RoleBloomLevel": { result = datarow.RoleBloomLevel; break; }

                default: { Log.Error("Table_adapter.GetShortValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetIntValue(int id, string column, int defaultValue = 0)
        {
            int result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "Id": { result = datarow.Id; break; }
                case "MinMemorySize": { result = datarow.MinMemorySize; break; }
                case "MaxMemorySize": { result = datarow.MaxMemorySize; break; }
                case "TargetFrameRate": { result = datarow.TargetFrameRate; break; }
                case "AsyncUploadBufferSize": { result = datarow.AsyncUploadBufferSize; break; }
                case "VisibleRolesNumber": { result = datarow.VisibleRolesNumber; break; }

                default: { Log.Error("Table_adapter.GetIntValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float GetFloatValue(int id, string column, float defaultValue = 0.0f)
        {
            float result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "Id": { result = datarow.Id; break; }
                case "MinMemorySize": { result = datarow.MinMemorySize; break; }
                case "MaxMemorySize": { result = datarow.MaxMemorySize; break; }
                case "TargetFrameRate": { result = datarow.TargetFrameRate; break; }
                case "AsyncUploadBufferSize": { result = datarow.AsyncUploadBufferSize; break; }
                case "VisibleRolesNumber": { result = datarow.VisibleRolesNumber; break; }

                default: { Log.Error("Table_adapter.GetFloatValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string GetStringValue(int id, string column, string defaultValue = "")
        {
            string result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "Id": { result = datarow.Id.ToString(); break; }
                case "MinMemorySize": { result = datarow.MinMemorySize.ToString(); break; }
                case "MaxMemorySize": { result = datarow.MaxMemorySize.ToString(); break; }
                case "TargetFrameRate": { result = datarow.TargetFrameRate.ToString(); break; }
                case "AsyncUploadBufferSize": { result = datarow.AsyncUploadBufferSize.ToString(); break; }
                case "VisibleRolesNumber": { result = datarow.VisibleRolesNumber.ToString(); break; }

                default: { Log.Error("Table_adapter.GetStringValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override bool[] GetBoolArray(int id, string column)
        {
            bool[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetBoolArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short[] GetShortArray(int id, string column)
        {
            short[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetShortArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int[] GetIntArray(int id, string column)
        {
            int[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "ScreenResolution": { result = datarow.ScreenResolutionArray; break; }

                default: { Log.Error("Table_adapter.GetIntArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float[] GetFloatArray(int id, string column)
        {
            float[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;
                
            switch (column)
            {

                default: { Log.Error("Table_adapter.GetFloatArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string[] GetStringArray(int id, string column)
        {
            string[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetStringArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override string GetStringArrayItem(int id, string column, int index, string defaultValue = "")
        {
            string result = defaultValue;

            int length = this.GetStringArrayLength(id, column);
            if (index < 0 || index >= length)
            {
                Log.Error("Table_adapter.GetStringArrayItem => index out of array length({0}), [id:{1}, column:{2}, index:{3}]", length, id, column, index);
                return result;
            }
            
            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetStringArrayItem => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetStringArrayLength(int id, string column)
        {
            int result = 0;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetStringArrayLength => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override Dictionary<int, int> GetDictionaryII(int id, string column) 
        {
            Dictionary<int, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetDictionaryII => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<int, string> GetDictionaryIS(int id, string column) 
        {
            Dictionary<int, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetDictionaryIS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, int> GetDictionarySI(int id, string column) 
        {
            Dictionary<string, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetDictionarySI => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, string> GetDictionarySS(int id, string column) 
        {
            Dictionary<string, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_adapter.GetDictionarySS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        #endregion Data Method

        #region DataRow Method
        
        /// <summary>
        /// 获得数据行的数量
        /// </summary>
        /// <returns></returns>
        public override int GetDataCount() 
        {
            Table_adapter table = this.GetTable();
            if (null == table.ByteBuffer)
                return 0;

            return table.DataLength; 
        }
        
        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public AdapterDataRow GetDataRow(int id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_adapter table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            if (null != row_index && row_index.ContainsKey(id))
            {
                DRadapter? data = table.Data(row_index[id]);
                if (data.HasValue && data.Value.Id == id)
                {
                    AdapterDataRow datarow = new AdapterDataRow(data.Value, row_index[id]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DRadapter? data = table.Data(i);
                if (data.HasValue)
                {
                    AdapterDataRow datarow = new AdapterDataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过索引获取行数据
        /// </summary>
        /// <param name="index">索引,即行号,从0开始</param>
        /// <returns></returns>
        public AdapterDataRow GetDataRowByIndex(int index)
        {
            Table_adapter table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;

            if (index >= table.DataLength)
                return null;

            DRadapter? data = table.Data(index);
            if (data.HasValue)
            {
                if (!data_row.ContainsKey(data.Value.Id))
                {
                    AdapterDataRow datarow = new AdapterDataRow(data.Value, index);
                    data_row.Add(datarow.Id, datarow);
                }

                return data_row[data.Value.Id];
            }

            return null;
        }
        
        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<int, AdapterDataRow> GetAllData()
        {
            Table_adapter table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DRadapter? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        AdapterDataRow datarow = new AdapterDataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="callback"></param>
        public override void VisitTable(System.Func<BaseDataRow, bool> callback)
        {
            if (null == callback)
                return;

            this.GetAllData();

            var iterator = data_row.GetEnumerator();
            try
            {
                bool _stop = false;
                while (iterator.MoveNext() && _stop == false)
                {
                    _stop = callback(iterator.Current.Value);
                }
            }
            finally
            {
                iterator.Dispose();
            }
        }
        
        public override BaseDataRow GetTableRow(int id) 
        { 
            return this.GetDataRow(id); 
        }

        public override BaseDataRow GetTableRow(string id)
        {
            int rowId = 0;
            if(int.TryParse(id, out rowId))
                return this.GetDataRow(rowId);

            return null;
        }
        
        #endregion DataRow Method
        
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_adapter.GetRootAsTable_adapter(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_adapter GetTable()
        {
            LoadTable();

            return table;
        }
        
        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "adapter.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "adapter_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public sealed class AdapterDataRow : BaseDataRow
    {
        private DRadapter _datarow;

        public AdapterDataRow(DRadapter datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }
        
        protected override LuaValue GetLuaValue(string rowId)
        {
            LuaValue luaValue = new LuaValue();
            switch (rowId)
            {
                case "Id": { luaValue.SetValue(this.Id); break; }
                case "MinMemorySize": { luaValue.SetValue(this.MinMemorySize); break; }
                case "MaxMemorySize": { luaValue.SetValue(this.MaxMemorySize); break; }
                case "ScreenResolution": { luaValue.SetValue(this.ScreenResolutionArray); break; }
                case "TargetFrameRate": { luaValue.SetValue(this.TargetFrameRate); break; }
                case "EffectLevel": { luaValue.SetValue(this.EffectLevel); break; }
                case "IsEnablePBR": { luaValue.SetValue(this.IsEnablePBR); break; }
                case "AsyncUploadBufferSize": { luaValue.SetValue(this.AsyncUploadBufferSize); break; }
                case "IsVegetationRenderingOfMainCity": { luaValue.SetValue(this.IsVegetationRenderingOfMainCity); break; }
                case "PointSource": { luaValue.SetValue(this.PointSource); break; }
                case "VisibleRolesNumber": { luaValue.SetValue(this.VisibleRolesNumber); break; }
                case "IsShowFootShadow": { luaValue.SetValue(this.IsShowFootShadow); break; }
                case "IsShowEnvironmentEffect": { luaValue.SetValue(this.IsShowEnvironmentEffect); break; }
                case "IsRealTimeShadowRendering": { luaValue.SetValue(this.IsRealTimeShadowRendering); break; }
                case "IsShowSpecialEffects": { luaValue.SetValue(this.IsShowSpecialEffects); break; }
                case "TerrainRenderingLevelOfMainCity": { luaValue.SetValue(this.TerrainRenderingLevelOfMainCity); break; }
                case "BuildingRenderingLevelOfMainCity": { luaValue.SetValue(this.BuildingRenderingLevelOfMainCity); break; }
                case "IsSkyBoxRenderingOfMainCity": { luaValue.SetValue(this.IsSkyBoxRenderingOfMainCity); break; }
                case "Is2DCloudRenderingOfMainCity": { luaValue.SetValue(this.Is2DCloudRenderingOfMainCity); break; }
                case "IsRoleBloomRendering": { luaValue.SetValue(this.IsRoleBloomRendering); break; }
                case "IsRoleShadowRendering": { luaValue.SetValue(this.IsRoleShadowRendering); break; }
                case "IsShowRoleEffect": { luaValue.SetValue(this.IsShowRoleEffect); break; }
                case "IsShowEffectOfPVE": { luaValue.SetValue(this.IsShowEffectOfPVE); break; }
                case "IsBlitBlur": { luaValue.SetValue(this.IsBlitBlur); break; }
                case "IsTerrainRenderingOfWorld": { luaValue.SetValue(this.IsTerrainRenderingOfWorld); break; }
                case "BuildingRenderingLevelOfWorld": { luaValue.SetValue(this.BuildingRenderingLevelOfWorld); break; }
                case "WaterRenderingLevelOfWorld": { luaValue.SetValue(this.WaterRenderingLevelOfWorld); break; }
                case "IsRoleSelfLightRendering": { luaValue.SetValue(this.IsRoleSelfLightRendering); break; }
                case "RoleBloomLevel": { luaValue.SetValue(this.RoleBloomLevel); break; }
                case "RoleFXAA": { luaValue.SetValue(this.RoleFXAA); break; }
                case "IsRoleEnableFXAA": { luaValue.SetValue(this.IsRoleEnableFXAA); break; }

                default:
                    break;
            }

            return luaValue;
        }
        
        public int Id { get { return _datarow.Id; } }

        public int MinMemorySize { get { return _datarow.MinMemorySize; } }

        public int MaxMemorySize { get { return _datarow.MaxMemorySize; } }

        private int[] _ScreenResolutionArray = null;
        public int[] ScreenResolutionArray { get { if (null == _ScreenResolutionArray) _ScreenResolutionArray = _datarow.GetScreenResolutionArray(); return _ScreenResolutionArray; } }
        public int ScreenResolutionArrayLength { get { if (null == this.ScreenResolutionArray) return 0; return this.ScreenResolutionArray.Length; } }

        public int TargetFrameRate { get { return _datarow.TargetFrameRate; } }

        public short EffectLevel { get { return _datarow.EffectLevel; } }

        public bool IsEnablePBR { get { return _datarow.IsEnablePBR; } }

        public int AsyncUploadBufferSize { get { return _datarow.AsyncUploadBufferSize; } }

        public bool IsVegetationRenderingOfMainCity { get { return _datarow.IsVegetationRenderingOfMainCity; } }

        public short PointSource { get { return _datarow.PointSource; } }

        public int VisibleRolesNumber { get { return _datarow.VisibleRolesNumber; } }

        public bool IsShowFootShadow { get { return _datarow.IsShowFootShadow; } }

        public bool IsShowEnvironmentEffect { get { return _datarow.IsShowEnvironmentEffect; } }

        public bool IsRealTimeShadowRendering { get { return _datarow.IsRealTimeShadowRendering; } }

        public bool IsShowSpecialEffects { get { return _datarow.IsShowSpecialEffects; } }

        public short TerrainRenderingLevelOfMainCity { get { return _datarow.TerrainRenderingLevelOfMainCity; } }

        public short BuildingRenderingLevelOfMainCity { get { return _datarow.BuildingRenderingLevelOfMainCity; } }

        public bool IsSkyBoxRenderingOfMainCity { get { return _datarow.IsSkyBoxRenderingOfMainCity; } }

        public bool Is2DCloudRenderingOfMainCity { get { return _datarow.Is2DCloudRenderingOfMainCity; } }

        public bool IsRoleBloomRendering { get { return _datarow.IsRoleBloomRendering; } }

        public bool IsRoleShadowRendering { get { return _datarow.IsRoleShadowRendering; } }

        public bool IsShowRoleEffect { get { return _datarow.IsShowRoleEffect; } }

        public bool IsShowEffectOfPVE { get { return _datarow.IsShowEffectOfPVE; } }

        public bool IsBlitBlur { get { return _datarow.IsBlitBlur; } }

        public short IsTerrainRenderingOfWorld { get { return _datarow.IsTerrainRenderingOfWorld; } }

        public short BuildingRenderingLevelOfWorld { get { return _datarow.BuildingRenderingLevelOfWorld; } }

        public short WaterRenderingLevelOfWorld { get { return _datarow.WaterRenderingLevelOfWorld; } }

        public bool IsRoleSelfLightRendering { get { return _datarow.IsRoleSelfLightRendering; } }

        public short RoleBloomLevel { get { return _datarow.RoleBloomLevel; } }

        public bool RoleFXAA { get { return _datarow.RoleFXAA; } }

        public bool IsRoleEnableFXAA { get { return _datarow.IsRoleEnableFXAA; } }


    }

    #endregion DataRow
}