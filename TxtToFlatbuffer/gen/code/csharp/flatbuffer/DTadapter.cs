// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRadapter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRadapter GetRootAsDRadapter(ByteBuffer _bb) { return GetRootAsDRadapter(_bb, new DRadapter()); }
  public static DRadapter GetRootAsDRadapter(ByteBuffer _bb, DRadapter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRadapter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinMemorySize { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxMemorySize { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScreenResolution(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ScreenResolutionLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetScreenResolutionBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetScreenResolutionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetScreenResolutionArray() { return __p.__vector_as_array<int>(10); }
  public int TargetFrameRate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public short EffectLevel { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public bool IsEnablePBR { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int AsyncUploadBufferSize { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsVegetationRenderingOfMainCity { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public short PointSource { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public int VisibleRolesNumber { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsShowFootShadow { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShowEnvironmentEffect { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsRealTimeShadowRendering { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShowSpecialEffects { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public short TerrainRenderingLevelOfMainCity { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short BuildingRenderingLevelOfMainCity { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public bool IsSkyBoxRenderingOfMainCity { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Is2DCloudRenderingOfMainCity { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsRoleBloomRendering { get { int o = __p.__offset(42); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsRoleShadowRendering { get { int o = __p.__offset(44); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShowRoleEffect { get { int o = __p.__offset(46); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShowEffectOfPVE { get { int o = __p.__offset(48); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsBlitBlur { get { int o = __p.__offset(50); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public short IsTerrainRenderingOfWorld { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short BuildingRenderingLevelOfWorld { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short WaterRenderingLevelOfWorld { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public bool IsRoleSelfLightRendering { get { int o = __p.__offset(58); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public short RoleBloomLevel { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public bool RoleFXAA { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsRoleEnableFXAA { get { int o = __p.__offset(64); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<LF.Table.DRadapter> CreateDRadapter(FlatBufferBuilder builder,
      int Id = 0,
      int MinMemorySize = 0,
      int MaxMemorySize = 0,
      VectorOffset ScreenResolutionOffset = default(VectorOffset),
      int TargetFrameRate = 0,
      short EffectLevel = 0,
      bool IsEnablePBR = false,
      int AsyncUploadBufferSize = 0,
      bool IsVegetationRenderingOfMainCity = false,
      short PointSource = 0,
      int VisibleRolesNumber = 0,
      bool IsShowFootShadow = false,
      bool IsShowEnvironmentEffect = false,
      bool IsRealTimeShadowRendering = false,
      bool IsShowSpecialEffects = false,
      short TerrainRenderingLevelOfMainCity = 0,
      short BuildingRenderingLevelOfMainCity = 0,
      bool IsSkyBoxRenderingOfMainCity = false,
      bool Is2DCloudRenderingOfMainCity = false,
      bool IsRoleBloomRendering = false,
      bool IsRoleShadowRendering = false,
      bool IsShowRoleEffect = false,
      bool IsShowEffectOfPVE = false,
      bool IsBlitBlur = false,
      short IsTerrainRenderingOfWorld = 0,
      short BuildingRenderingLevelOfWorld = 0,
      short WaterRenderingLevelOfWorld = 0,
      bool IsRoleSelfLightRendering = false,
      short RoleBloomLevel = 0,
      bool RoleFXAA = false,
      bool IsRoleEnableFXAA = false) {
    builder.StartTable(31);
    DRadapter.AddVisibleRolesNumber(builder, VisibleRolesNumber);
    DRadapter.AddAsyncUploadBufferSize(builder, AsyncUploadBufferSize);
    DRadapter.AddTargetFrameRate(builder, TargetFrameRate);
    DRadapter.AddScreenResolution(builder, ScreenResolutionOffset);
    DRadapter.AddMaxMemorySize(builder, MaxMemorySize);
    DRadapter.AddMinMemorySize(builder, MinMemorySize);
    DRadapter.AddId(builder, Id);
    DRadapter.AddRoleBloomLevel(builder, RoleBloomLevel);
    DRadapter.AddWaterRenderingLevelOfWorld(builder, WaterRenderingLevelOfWorld);
    DRadapter.AddBuildingRenderingLevelOfWorld(builder, BuildingRenderingLevelOfWorld);
    DRadapter.AddIsTerrainRenderingOfWorld(builder, IsTerrainRenderingOfWorld);
    DRadapter.AddBuildingRenderingLevelOfMainCity(builder, BuildingRenderingLevelOfMainCity);
    DRadapter.AddTerrainRenderingLevelOfMainCity(builder, TerrainRenderingLevelOfMainCity);
    DRadapter.AddPointSource(builder, PointSource);
    DRadapter.AddEffectLevel(builder, EffectLevel);
    DRadapter.AddIsRoleEnableFXAA(builder, IsRoleEnableFXAA);
    DRadapter.AddRoleFXAA(builder, RoleFXAA);
    DRadapter.AddIsRoleSelfLightRendering(builder, IsRoleSelfLightRendering);
    DRadapter.AddIsBlitBlur(builder, IsBlitBlur);
    DRadapter.AddIsShowEffectOfPVE(builder, IsShowEffectOfPVE);
    DRadapter.AddIsShowRoleEffect(builder, IsShowRoleEffect);
    DRadapter.AddIsRoleShadowRendering(builder, IsRoleShadowRendering);
    DRadapter.AddIsRoleBloomRendering(builder, IsRoleBloomRendering);
    DRadapter.AddIs2DCloudRenderingOfMainCity(builder, Is2DCloudRenderingOfMainCity);
    DRadapter.AddIsSkyBoxRenderingOfMainCity(builder, IsSkyBoxRenderingOfMainCity);
    DRadapter.AddIsShowSpecialEffects(builder, IsShowSpecialEffects);
    DRadapter.AddIsRealTimeShadowRendering(builder, IsRealTimeShadowRendering);
    DRadapter.AddIsShowEnvironmentEffect(builder, IsShowEnvironmentEffect);
    DRadapter.AddIsShowFootShadow(builder, IsShowFootShadow);
    DRadapter.AddIsVegetationRenderingOfMainCity(builder, IsVegetationRenderingOfMainCity);
    DRadapter.AddIsEnablePBR(builder, IsEnablePBR);
    return DRadapter.EndDRadapter(builder);
  }

  public static void StartDRadapter(FlatBufferBuilder builder) { builder.StartTable(31); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddMinMemorySize(FlatBufferBuilder builder, int MinMemorySize) { builder.AddInt(1, MinMemorySize, 0); }
  public static void AddMaxMemorySize(FlatBufferBuilder builder, int MaxMemorySize) { builder.AddInt(2, MaxMemorySize, 0); }
  public static void AddScreenResolution(FlatBufferBuilder builder, VectorOffset ScreenResolutionOffset) { builder.AddOffset(3, ScreenResolutionOffset.Value, 0); }
  public static VectorOffset CreateScreenResolutionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScreenResolutionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScreenResolutionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTargetFrameRate(FlatBufferBuilder builder, int TargetFrameRate) { builder.AddInt(4, TargetFrameRate, 0); }
  public static void AddEffectLevel(FlatBufferBuilder builder, short EffectLevel) { builder.AddShort(5, EffectLevel, 0); }
  public static void AddIsEnablePBR(FlatBufferBuilder builder, bool IsEnablePBR) { builder.AddBool(6, IsEnablePBR, false); }
  public static void AddAsyncUploadBufferSize(FlatBufferBuilder builder, int AsyncUploadBufferSize) { builder.AddInt(7, AsyncUploadBufferSize, 0); }
  public static void AddIsVegetationRenderingOfMainCity(FlatBufferBuilder builder, bool IsVegetationRenderingOfMainCity) { builder.AddBool(8, IsVegetationRenderingOfMainCity, false); }
  public static void AddPointSource(FlatBufferBuilder builder, short PointSource) { builder.AddShort(9, PointSource, 0); }
  public static void AddVisibleRolesNumber(FlatBufferBuilder builder, int VisibleRolesNumber) { builder.AddInt(10, VisibleRolesNumber, 0); }
  public static void AddIsShowFootShadow(FlatBufferBuilder builder, bool IsShowFootShadow) { builder.AddBool(11, IsShowFootShadow, false); }
  public static void AddIsShowEnvironmentEffect(FlatBufferBuilder builder, bool IsShowEnvironmentEffect) { builder.AddBool(12, IsShowEnvironmentEffect, false); }
  public static void AddIsRealTimeShadowRendering(FlatBufferBuilder builder, bool IsRealTimeShadowRendering) { builder.AddBool(13, IsRealTimeShadowRendering, false); }
  public static void AddIsShowSpecialEffects(FlatBufferBuilder builder, bool IsShowSpecialEffects) { builder.AddBool(14, IsShowSpecialEffects, false); }
  public static void AddTerrainRenderingLevelOfMainCity(FlatBufferBuilder builder, short TerrainRenderingLevelOfMainCity) { builder.AddShort(15, TerrainRenderingLevelOfMainCity, 0); }
  public static void AddBuildingRenderingLevelOfMainCity(FlatBufferBuilder builder, short BuildingRenderingLevelOfMainCity) { builder.AddShort(16, BuildingRenderingLevelOfMainCity, 0); }
  public static void AddIsSkyBoxRenderingOfMainCity(FlatBufferBuilder builder, bool IsSkyBoxRenderingOfMainCity) { builder.AddBool(17, IsSkyBoxRenderingOfMainCity, false); }
  public static void AddIs2DCloudRenderingOfMainCity(FlatBufferBuilder builder, bool Is2DCloudRenderingOfMainCity) { builder.AddBool(18, Is2DCloudRenderingOfMainCity, false); }
  public static void AddIsRoleBloomRendering(FlatBufferBuilder builder, bool IsRoleBloomRendering) { builder.AddBool(19, IsRoleBloomRendering, false); }
  public static void AddIsRoleShadowRendering(FlatBufferBuilder builder, bool IsRoleShadowRendering) { builder.AddBool(20, IsRoleShadowRendering, false); }
  public static void AddIsShowRoleEffect(FlatBufferBuilder builder, bool IsShowRoleEffect) { builder.AddBool(21, IsShowRoleEffect, false); }
  public static void AddIsShowEffectOfPVE(FlatBufferBuilder builder, bool IsShowEffectOfPVE) { builder.AddBool(22, IsShowEffectOfPVE, false); }
  public static void AddIsBlitBlur(FlatBufferBuilder builder, bool IsBlitBlur) { builder.AddBool(23, IsBlitBlur, false); }
  public static void AddIsTerrainRenderingOfWorld(FlatBufferBuilder builder, short IsTerrainRenderingOfWorld) { builder.AddShort(24, IsTerrainRenderingOfWorld, 0); }
  public static void AddBuildingRenderingLevelOfWorld(FlatBufferBuilder builder, short BuildingRenderingLevelOfWorld) { builder.AddShort(25, BuildingRenderingLevelOfWorld, 0); }
  public static void AddWaterRenderingLevelOfWorld(FlatBufferBuilder builder, short WaterRenderingLevelOfWorld) { builder.AddShort(26, WaterRenderingLevelOfWorld, 0); }
  public static void AddIsRoleSelfLightRendering(FlatBufferBuilder builder, bool IsRoleSelfLightRendering) { builder.AddBool(27, IsRoleSelfLightRendering, false); }
  public static void AddRoleBloomLevel(FlatBufferBuilder builder, short RoleBloomLevel) { builder.AddShort(28, RoleBloomLevel, 0); }
  public static void AddRoleFXAA(FlatBufferBuilder builder, bool RoleFXAA) { builder.AddBool(29, RoleFXAA, false); }
  public static void AddIsRoleEnableFXAA(FlatBufferBuilder builder, bool IsRoleEnableFXAA) { builder.AddBool(30, IsRoleEnableFXAA, false); }
  public static Offset<LF.Table.DRadapter> EndDRadapter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRadapter>(o);
  }
};

public struct Table_adapter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_adapter GetRootAsTable_adapter(ByteBuffer _bb) { return GetRootAsTable_adapter(_bb, new Table_adapter()); }
  public static Table_adapter GetRootAsTable_adapter(ByteBuffer _bb, Table_adapter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_adapter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRadapter? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRadapter?)(new LF.Table.DRadapter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_adapter> CreateTable_adapter(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_adapter.AddData(builder, dataOffset);
    return Table_adapter.EndTable_adapter(builder);
  }

  public static void StartTable_adapter(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRadapter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRadapter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_adapter> EndTable_adapter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_adapter>(o);
  }
  public static void FinishTable_adapterBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_adapter> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_adapterBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_adapter> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
