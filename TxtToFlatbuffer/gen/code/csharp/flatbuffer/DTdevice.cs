// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Chanto.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRdevice : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRdevice GetRootAsDRdevice(ByteBuffer _bb) { return GetRootAsDRdevice(_bb, new DRdevice()); }
  public static DRdevice GetRootAsDRdevice(ByteBuffer _bb, DRdevice obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRdevice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public short ModeType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short RenderLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<LF.Table.DRdevice> CreateDRdevice(FlatBufferBuilder builder,
      StringOffset IdOffset = default(StringOffset),
      short ModeType = 0,
      short RenderLevel = 0) {
    builder.StartTable(3);
    DRdevice.AddId(builder, IdOffset);
    DRdevice.AddRenderLevel(builder, RenderLevel);
    DRdevice.AddModeType(builder, ModeType);
    return DRdevice.EndDRdevice(builder);
  }

  public static void StartDRdevice(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset IdOffset) { builder.AddOffset(0, IdOffset.Value, 0); }
  public static void AddModeType(FlatBufferBuilder builder, short ModeType) { builder.AddShort(1, ModeType, 0); }
  public static void AddRenderLevel(FlatBufferBuilder builder, short RenderLevel) { builder.AddShort(2, RenderLevel, 0); }
  public static Offset<LF.Table.DRdevice> EndDRdevice(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRdevice>(o);
  }
};

public struct Table_device : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_device GetRootAsTable_device(ByteBuffer _bb) { return GetRootAsTable_device(_bb, new Table_device()); }
  public static Table_device GetRootAsTable_device(ByteBuffer _bb, Table_device obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_device __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRdevice? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRdevice?)(new LF.Table.DRdevice()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_device> CreateTable_device(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_device.AddData(builder, dataOffset);
    return Table_device.EndTable_device(builder);
  }

  public static void StartTable_device(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRdevice>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRdevice>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_device> EndTable_device(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_device>(o);
  }
  public static void FinishTable_deviceBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_device> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_deviceBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_device> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
