// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRconst : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRconst GetRootAsDRconst(ByteBuffer _bb) { return GetRootAsDRconst(_bb, new DRconst()); }
  public static DRconst GetRootAsDRconst(ByteBuffer _bb, DRconst obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRconst __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Content { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<LF.Table.DRconst> CreateDRconst(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset ContentOffset = default(StringOffset)) {
    builder.StartTable(2);
    DRconst.AddContent(builder, ContentOffset);
    DRconst.AddId(builder, idOffset);
    return DRconst.EndDRconst(builder);
  }

  public static void StartDRconst(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset ContentOffset) { builder.AddOffset(1, ContentOffset.Value, 0); }
  public static Offset<LF.Table.DRconst> EndDRconst(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRconst>(o);
  }
};

public struct Table_const : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_const GetRootAsTable_const(ByteBuffer _bb) { return GetRootAsTable_const(_bb, new Table_const()); }
  public static Table_const GetRootAsTable_const(ByteBuffer _bb, Table_const obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_const __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRconst? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRconst?)(new LF.Table.DRconst()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_const> CreateTable_const(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_const.AddData(builder, dataOffset);
    return Table_const.EndTable_const(builder);
  }

  public static void StartTable_const(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRconst>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRconst>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_const> EndTable_const(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_const>(o);
  }
  public static void FinishTable_constBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_const> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_constBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_const> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
