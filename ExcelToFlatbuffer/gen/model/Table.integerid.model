// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using System.Collections.Generic;

namespace Chanto.Table
{
    #region Table

	public sealed class #up_tablename#Table : BaseTable
    {
        private Table_#tablename# table = default(Table_#tablename#);

        private Dictionary<int, #up_tablename#DataRow> data_row = new Dictionary<int, #up_tablename#DataRow>(128);
        
        public static string g_TableFileName = "#tablename#";

        #region DataRow Method
        
        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public #up_tablename#DataRow GetDataRow(int id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_#tablename# table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            if (null != row_index && row_index.ContainsKey(id))
            {
                DR#tablename#? data = table.Data(row_index[id]);
                if (data.HasValue && data.Value.Id == id)
                {
                    #up_tablename#DataRow datarow = new #up_tablename#DataRow(data.Value, row_index[id]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DR#tablename#? data = table.Data(i);
                if (data.HasValue)
                {
                    #up_tablename#DataRow datarow = new #up_tablename#DataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<int, #up_tablename#DataRow> GetAllData()
        {
            Table_#tablename# table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DR#tablename#? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        #up_tablename#DataRow datarow = new #up_tablename#DataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="callback"></param>
        public override void VisitTable(System.Func<BaseDataRow, bool> callback)
        {
            if (null == callback)
                return;

            this.GetAllData();

            var iterator = data_row.GetEnumerator();
            try
            {
                bool _stop = false;
                while (iterator.MoveNext() && _stop == false)
                {
                    _stop = callback(iterator.Current.Value);
                }
            }
            finally
            {
                iterator.Dispose();
            }
        }
        
        public override BaseDataRow GetTableRow(int id) 
        { 
            return this.GetDataRow(id); 
        }

        public override BaseDataRow GetTableRow(string id)
        {
            int rowId = 0;
            if(int.TryParse(id, out rowId))
                return this.GetDataRow(rowId);

            return null;
        }
        
        #endregion DataRow Method
        
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_#tablename#.GetRootAsTable_#tablename#(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_#tablename# GetTable()
        {
            LoadTable();

            return table;
        }
        
        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "#tablename#.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "#tablename#_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public class #up_tablename#BaseDataRow : BaseDataRow
    {
        private DR#tablename# _datarow;

        public #up_tablename#BaseDataRow(DR#tablename# datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }
        
#property_list#
    }

    #endregion DataRow
}