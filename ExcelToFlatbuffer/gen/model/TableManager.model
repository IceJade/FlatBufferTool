// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using Framework;
using System;
using System.Collections.Generic;

namespace Chanto.Table
{
	public class TableManager : Singleton<TableManager>
    {
        private Dictionary<string, byte[]> dataTableAssets = new Dictionary<string, byte[]>(100);
        public Dictionary<string, byte[]> DataTableAssets { get { return dataTableAssets; } }

        private Dictionary<string, BaseTable> dataTables = new Dictionary<string, BaseTable>(100);

        private Dictionary<Type, string> nameCache = new Dictionary<Type, string>(200);
        
        #region Table Method

        /// <summary>
        /// 获得表
        /// </summary>
        /// <typeparam name="T">继承自BaseTable的表类型</typeparam>
        /// <returns>表对象</returns>
        public T GetTable<T>() where T : BaseTable, new()
        {
            Type type = typeof(T);
            
            string lowerName;
            if (!nameCache.TryGetValue(type, out lowerName))
            {
                string typeName = type.Name;
                int index = typeName.LastIndexOf("Table");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseTable");
                    return null;
                }

                string tableName = typeName.Substring(0, index).ToLower();
                lowerName = tableName.ToLower();

                if (!nameCache.ContainsKey(type))
                    nameCache.Add(type, lowerName);
            }
            
            if (!this.dataTables.ContainsKey(lowerName))
                this.dataTables.Add(lowerName, new T());

            return (T)this.dataTables[lowerName];
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="callback"></param>
        public void dumpTable(string tableName, System.Func<BaseDataRow, bool> callback)
        {
            var table = this.GetTable(tableName);
            if (null == table)
                return;

            table.VisitTable(callback);
        }
        
        #endregion Table Method

        #region DataRow Method

        /// <summary>
        /// 判断表的数据行是否存在
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool HasDataRow<T>(int id) where T : BaseDataRow
        {
            Type type = typeof(T);
            
            string tableName;
            if(!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = type.Name;
                int index = typeName.LastIndexOf("DataRow");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return false;
                }

                tableName = typeName.Substring(0, index).ToLower();
                
                if(!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }

            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return table.HasDataRow(id);

            return false;
        }

        /// <summary>
        /// 判断表的数据行是否存在
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool HasDataRow<T>(string id) where T : BaseDataRow
        {
            Type type = typeof(T);
            
            string tableName;
            if(!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = type.Name;

                int index = typeName.LastIndexOf("DataRow");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return false;
                }

                tableName = typeName.Substring(0, index).ToLower();
                
                if(!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }
            
            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return table.HasDataRow(id);

            return false;
        }
        
        /// <summary>
        /// 获得表的数据行
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public T GetDataRow<T>(int id) where T : BaseDataRow
        {
            Type type = typeof(T);
            
            string tableName;
            if(!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = type.Name;
                int index = typeName.LastIndexOf("DataRow");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return null;
                }

                tableName = typeName.Substring(0, index).ToLower();
                
                if(!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }
            
            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return (T)table.GetTableRow(id);

            return null;
        }

        /// <summary>
        /// 获得表的数据行
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public T GetDataRow<T>(string id) where T : BaseDataRow
        {
            Type type = typeof(T);
            
            string tableName;
            if(!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = typeof(T).Name;
                int index = typeName.LastIndexOf("DataRow");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return null;
                }

                tableName = typeName.Substring(0, index).ToLower();
                
                if(!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }
            
            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return (T)table.GetTableRow(id);

            return null;
        }

        #endregion DataRow Method

        #region Framework Method
        
        /// <summary>
        /// 重置所有表
        /// </summary>
        public void ResetAllTable()
        {
            foreach(var table in this.dataTables)
            {
                if (null != table.Value)
                    table.Value.ResetTable();
            }
        }
        
        /// <summary>
        /// 根据表名获得表对象
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <returns>表对象</returns>
        private BaseTable GetTable(string tableName)
        {
            // 如果能找到就直接处理了，找不到再去变小写找
            BaseTable table = null;
            if (this.dataTables.TryGetValue(tableName, out table) && null != table)
                return table;
            
            if (!this.IsValidTable(tableName))
            {
                Log.Error($"Not find the table {tableName}");
                return null;
            }
            
            string lowerName = tableName.ToLower();
            if (!this.dataTables.ContainsKey(lowerName))
            {
                string tableType = string.Format("LF.{0}Table", this.UpFirstChar(tableName));
                table = (BaseTable)Activator.CreateInstance(Type.GetType(tableType));

                this.dataTables.Add(lowerName, table);
            }
            
            return this.dataTables[lowerName];
        }

        /// <summary>
        /// 将字符串的首字母大写
        /// </summary>
        /// <param name="input">输入字符串</param>
        /// <returns></returns>
        private string UpFirstChar(string input)
        {
            if (string.IsNullOrEmpty(input))
                return string.Empty;

            if (input.Length <= 1)
                return input.ToUpper();
            else
                return input.Substring(0, 1).ToUpper() + input.Substring(1);
        }

        /// <summary>
        /// 判断表名是否合法
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <returns>true-合法, false-不合法</returns>
        public bool IsValidTable(string tableName)
        {
            bool isValid = false;

            switch (tableName)
            {
#case_table#
                default: { isValid = ConfigManager.Instance.IsValidTable(tableName); break; }
            }

            return isValid;
        }
        
        #endregion Framework Method
    }
}