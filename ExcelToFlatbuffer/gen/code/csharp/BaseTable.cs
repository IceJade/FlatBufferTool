// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using System.Collections.Generic;
using System;
using UnityGameFramework.Runtime;
using UnityEngine;
using UnityEngine.Networking;
using GameFramework;

namespace Chanto.Table
{
    /// <summary>
    /// 表格数据加载状态
    /// </summary>
    public enum E_LoadState
    {
        Init = 0,
        Loading,
        Loaded,
        Fail,
    }

	public class BaseTable
    {
        protected E_LoadState load_state = E_LoadState.Init;
        protected int current_row_index = 0;
        private string ABTablePrefix = "AB_";

        // 单次循环Sleep时间
        protected int sleepInterval = 1000 / Application.targetFrameRate + 1;
        // 循环最大时间5分钟(60*60*5)
        protected int loopTimeOutCount = 18000;

        /// <summary>
        /// 数据转化为LuaTable
        /// </summary>
        protected CSLuaTable[] _LuaData;

        protected Dictionary<int, int> row_index = null;

        #region Data Method

        public virtual bool GetBoolValue(string id, string column, bool defaultValue = false) { return this.GetBoolValue(id.ToInt(), column, defaultValue); }
        public virtual short GetShortValue(string id, string column, short defaultValue = 0) { return this.GetShortValue(id.ToInt(), column, defaultValue); }
        public virtual int GetIntValue(string id, string column, int defaultValue = 0) { return this.GetIntValue(id.ToInt(), column, defaultValue); }
        public virtual float GetFloatValue(string id, string column, float defaultValue = 0.0f) { return this.GetFloatValue(id.ToInt(), column, defaultValue); }
        public virtual string GetStringValue(string id, string column, string defaultValue = "") { return this.GetStringValue(id.ToInt(), column, defaultValue); }
        public virtual bool[] GetBoolArray(string id, string column) { return this.GetBoolArray(id.ToInt(), column); }
        public virtual short[] GetShortArray(string id, string column) { return this.GetShortArray(id.ToInt(), column); }
        public virtual int[] GetIntArray(string id, string column) { return this.GetIntArray(id.ToInt(), column); }
        public virtual float[] GetFloatArray(string id, string column) { return this.GetFloatArray(id.ToInt(), column); }
        public virtual int GetStringArrayLength(string id, string column) { return this.GetStringArrayLength(id.ToInt(), column); }
        public virtual string[] GetStringArray(string id, string column) { return this.GetStringArray(id.ToInt(), column); }
        public virtual string GetStringArrayItem(string id, string column, int index, string defaultValue = "") { return this.GetStringArrayItem(id.ToInt(), column, index, defaultValue); }
        public virtual Dictionary<int, int> GetDictionaryII(string id, string column) { return this.GetDictionaryII(id.ToInt(), column); }
        public virtual Dictionary<int, string> GetDictionaryIS(string id, string column) { return this.GetDictionaryIS(id.ToInt(), column); }
        public virtual Dictionary<string, int> GetDictionarySI(string id, string column) { return this.GetDictionarySI(id.ToInt(), column); }
        public virtual Dictionary<string, string> GetDictionarySS(string id, string column) { return this.GetDictionarySS(id.ToInt(), column); }

        public virtual bool GetBoolValue(int id, string column, bool defaultValue = false) { return defaultValue; }
        public virtual short GetShortValue(int id, string column, short defaultValue = 0) { return defaultValue; }
        public virtual int GetIntValue(int id, string column, int defaultValue = 0) { return defaultValue; }
        public virtual float GetFloatValue(int id, string column, float defaultValue = 0.0f) { return defaultValue; }
        public virtual string GetStringValue(int id, string column, string defaultValue = "") { return defaultValue; }
        public virtual bool[] GetBoolArray(int id, string column) { return null; }
        public virtual short[] GetShortArray(int id, string column) { return null; }
        public virtual int[] GetIntArray(int id, string column) { return null; }
        public virtual float[] GetFloatArray(int id, string column) { return null; }
        public virtual string[] GetStringArray(int id, string column) { return null; }
        public virtual string GetStringArrayItem(int id, string column, int index, string defaultValue = "") { return defaultValue; }
        public virtual int GetStringArrayLength(int id, string column) { return 0; }
        public virtual Dictionary<int, int> GetDictionaryII(int id, string column) { return null; }
        public virtual Dictionary<int, string> GetDictionaryIS(int id, string column) { return null; }
        public virtual Dictionary<string, int> GetDictionarySI(int id, string column) { return null; }
        public virtual Dictionary<string, string> GetDictionarySS(int id, string column) { return null; }

        #endregion Data Method

        #region DataRow Method

        public virtual bool HasDataRow(int id) { return null != this.GetTableRow(id); }

        public virtual bool HasDataRow(string id) { return null != this.GetTableRow(id); }

        public virtual BaseDataRow GetTableRow(int id) { return null; }

        public virtual BaseDataRow GetTableRow(string id) { return null; }

        public virtual void VisitTable(System.Func<BaseDataRow, bool> callback) { }

        /// <summary>
        /// Lua侧获得所有数据
        /// </summary>
        /// <returns></returns>
        public virtual CSLuaTable[] GetAllLuaData() 
        {
            this.LoadTable();

            if (null != _LuaData)
                return _LuaData;

            _LuaData = new CSLuaTable[row_index.Count];

            int index = 0;
            foreach (var item in row_index)
            {
                var datarow = this.GetTableRow(item.Key);
                if (null != datarow)
                {
                    _LuaData[index] = datarow.GetLuaTable();
                    index++;
                }
            }

            return _LuaData;
        }

        #endregion

        #region Framework Method

        protected virtual void LoadTable()
        {
            if (this.IsLoaded())
                return;

            if (this.IsLoading())
            {
                Log.Warning("the table {0} is loading, please wait...", this.GetTableFileName());
                return;
            }

            byte[] buffers = null;

#if USE_TABLE_ASSET_BUNDLE_MODE
#if UNITY_EDITOR
            buffers = File.ReadAllBytes(this.GetTableFile());
#else
            if (TableManager.Instance.DataTableAssets.ContainsKey(this.GetTableFileName()))
            {
                buffers = TableManager.Instance.DataTableAssets[this.GetTableFileName()];
            }
            else
            {
                Log.Error("The file {0} is not load, please check tables assetbundle", this.GetTableFileName());
            }
#endif
#else

            var filepath = GetTableFile();
            Log.Info($">>>> flatbuffer: loadtable: {filepath}");
            this.load_state = E_LoadState.Loading;
#if UNITY_ANDROID && !UNITY_EDITOR
            // 循环次数记录, 防止死循环
            int loopCount = 0;

            using (UnityWebRequest request = UnityWebRequest.Get(filepath))
            {
                request.SendWebRequest();

                if (Log.Write)
                {
                    Log.Info(string.Format("flatbuffer request path : {0}", request.url));
                }

                while (!request.downloadHandler.isDone)
                {
                    if (request.isNetworkError || request.isHttpError)
                    {
                        this.load_state = E_LoadState.Fail;
                        Log.Error("Load {0} fail, error mssage : {1}", request.url, request.error);

                        return;
                    }

                    // 循环最大时间设置为5分钟, 防止死循环
                    if (loopCount > loopTimeOutCount)
                    {
                        this.load_state = E_LoadState.Fail;
                        Log.Error("Load table {0} time out.", filepath);

                        return;
                    }

                    loopCount++;

                    System.Threading.Thread.Sleep(1000 / Application.targetFrameRate + 1);
                }
                
                buffers = request.downloadHandler.data;
            }
#else
            try
            {
                if (File.Exists(filepath))
                {
                    buffers = File.ReadAllBytes(filepath);
                }
            }
            catch(Exception e)
            {
                this.load_state = E_LoadState.Fail;
                Log.Error("Read table {0} exception, error msg : {1}", filepath, e.Message);
            }
#endif
            
#endif

            if (null != buffers)
            {
                this.InitTable(new ByteBuffer(buffers));
            }
            else
            {
                this.load_state = E_LoadState.Fail;
                Log.Error("Load table {0} fail.", filepath);
            }

            this.LoadIndex();
        }

        protected virtual void LoadIndex()
        {
            if (row_index != null && row_index.Count > 0)
            {
                return;
            }

            int offset = 4;

            byte[] buffers = null;

#if USE_TABLE_ASSET_BUNDLE_MODE
#if UNITY_EDITOR
            buffers = File.ReadAllBytes(this.GetIndexFile());
#else
            if (TableManager.Instance.DataTableAssets.ContainsKey(this.GetIndexFileNameEx()))
            {
                buffers = TableManager.Instance.DataTableAssets[this.GetIndexFileNameEx()];
            }
            else
            {
                Log.Error("The file {0} is not load, please check tables assetbundle", this.GetIndexFileName());
            }
#endif
#else

            var filepath = this.GetIndexFile();
            Log.Info($">>>> flatbuffer: loadindex: {filepath}");
#if UNITY_ANDROID && !UNITY_EDITOR
            // 循环次数记录, 防止死循环
            int loopCount = 0;

            using (UnityWebRequest request = UnityWebRequest.Get(filepath))
            {
                request.SendWebRequest();
                Log.Info(string.Format("flatbuffer request path : {0}", request.url));
                while (!request.downloadHandler.isDone)
                {
                    if (request.isNetworkError || request.isHttpError)
                    {
                        Log.Error("Load {0} fail, error mssage : {1}", request.url, request.error);
                        return;
                    }

                    // 循环最大时间设置为5分钟, 防止死循环
                    if (loopCount > loopTimeOutCount)
                    {
                        Log.Error("Load table {0} time out.", filepath);
                        return;
                    }

                    loopCount++;

                    System.Threading.Thread.Sleep(sleepInterval);
                }

                buffers = request.downloadHandler.data;
            }
#else
            try
            {
                if (File.Exists(filepath))
                {
                    buffers = File.ReadAllBytes(filepath);
                }
            }
            catch(Exception e)
            {
                Log.Error("Read table {0} exception, error msg : {1}", filepath, e.Message);
            }
#endif
#endif

            if (null == buffers)
                return;

            if (buffers.Length <= offset)
                return;

            int count = BitConverter.ToInt32(buffers, offset);
            if (count <= 0)
                return;

            int id = 0;
            int index = 0;

            offset += 4;

            // 字典初始化并且直接设置成count
            row_index = new Dictionary<int, int>(count);
            for (int i = 0; i < count; i++)
            {
                id = BitConverter.ToInt32(buffers, offset);
                offset += 4;

                index = BitConverter.ToUInt16(buffers, offset);
                offset += 2;

                if (!this.row_index.ContainsKey(id))
                    this.row_index.Add(id, index);
            }
        }

        // 加载文件
        protected virtual void LoadFile(string filename, byte[] buffer)
        {

        }

        protected virtual bool IsLoaded()
        {
            return this.load_state == E_LoadState.Loaded;
        }

        protected virtual bool IsLoading()
        {
            return this.load_state == E_LoadState.Loading;
        }

        protected virtual void InitTable(ByteBuffer byteBuffer)
        {
            
        }
        
        public virtual void ResetTable()
        {
            this.load_state = E_LoadState.Init;
            this.current_row_index = 0;
        }

        protected virtual string GetTableFile()
        {
            string dataFileName = this.GetDataFileName();

#if USE_TABLE_ASSET_BUNDLE_MODE
            if (ABTestConfigController.Instance.IsUseABTestConfig(this.GetTableFileName()))
            {
                string abFileName = ABTablePrefix + dataFileName;
                if (TableManager.Instance.DataTableAssets.ContainsKey(abFileName))
                    dataFileName = abFileName;
            }

            return Path.Combine("./Assets/Shelter/Tables/", dataFileName);
#else
            if (ABTestConfigController.Instance.IsUseABTestConfig(this.GetTableFileName()))
            {
                string abFileName = ABTablePrefix + dataFileName;

                if(!GameEntry.DataTable.UseLocalDataTable)
                {
                    // 如果读写区存在表文件, 那么使用此文件
                    string abFullPathFile = Path.Combine(CommonUtils.GetInternalDir(), "Tables", this.GetProjectName(), abFileName);
                    if (File.Exists(abFullPathFile))
                    {
#if !UNITY_EDITOR && !UNITY_IOS
                        return "file://" + abFullPathFile;
#endif
                        return abFullPathFile;
                    }

                    
                }

                // 如果AB文件在只读区存在, 那么使用此文件
                return Path.Combine(Application.streamingAssetsPath, "Tables", this.GetProjectName(), abFileName);
            }

            if (!GameEntry.DataTable.UseLocalDataTable)
            {
                // 如果读写区存在表文件, 那么使用此文件
                string fullPathFile = Path.Combine(CommonUtils.GetInternalDir(), "Tables", this.GetProjectName(), dataFileName);
                if (File.Exists(fullPathFile))
                {
#if !UNITY_EDITOR && !UNITY_IOS
                    return "file://" + fullPathFile;
#endif
                    return fullPathFile;
                }
            }

            return Path.Combine(Application.streamingAssetsPath, "Tables", dataFileName);
#endif
        }

        protected virtual string GetIndexFile()
        {
            string indexFileName = this.GetIndexFileName();

#if USE_TABLE_ASSET_BUNDLE_MODE
            if (ABTestConfigController.Instance.IsUseABTestConfig(this.GetTableFileName()))
            {
                string abFileName = ABTablePrefix + indexFileName;
                if (TableManager.Instance.DataTableAssets.ContainsKey(abFileName))
                    indexFileName = abFileName;
            }

            return Path.Combine("./Assets/Shelter/Tables/ids", indexFileName + ".bytes");
#else
            if (ABTestConfigController.Instance.IsUseABTestConfig(this.GetTableFileName()))
            {
                string abFileName = ABTablePrefix + indexFileName + ".bytes";

                if (!GameEntry.DataTable.UseLocalDataTable)
                {
                    // 如果读写区存在表文件, 那么使用此文件
                    string abFullPathFile = Path.Combine(CommonUtils.GetInternalDir(), "Tables/ids", this.GetProjectName(), abFileName);
                    if (File.Exists(abFullPathFile))
                    {
#if !UNITY_EDITOR && !UNITY_IOS
                        return "file://" + abFullPathFile;  
#endif
                        return abFullPathFile;
                    }
                }

                // 如果AB文件在只读区存在, 那么使用此文件
                return Path.Combine(Application.streamingAssetsPath, "Tables/ids", abFileName);
            }

            if (!GameEntry.DataTable.UseLocalDataTable)
            {
                // 如果读写区存在表文件, 那么使用此文件
                string fullPathFile = Path.Combine(CommonUtils.GetInternalDir(), "Tables/ids", this.GetProjectName(), indexFileName + ".bytes");
                if (File.Exists(fullPathFile))
                {
#if !UNITY_EDITOR && !UNITY_IOS
                    return "file://" + fullPathFile;
#endif
                    return fullPathFile;
                }
            }

            return Path.Combine(Application.streamingAssetsPath, "Tables/ids", indexFileName + ".bytes");
#endif
        }

        protected virtual string GetTableFileName()
        {
            return string.Empty;
        }

        protected string GetDataReadWritePath()
        {
            return CommonUtils.GetInternalDir();
        }

        private string GetDataFileNameEx()
        {
            string dataFileName = this.GetDataFileName();

            if (ABTestConfigController.Instance.IsUseABTestConfig(this.GetTableFileName()))
            {
                string abFileName = ABTablePrefix + dataFileName;
                if (TableManager.Instance.DataTableAssets.ContainsKey(abFileName))
                    dataFileName = abFileName;
            }

            return dataFileName;
        }

        protected virtual string GetDataFileName()
        {
            return string.Empty;
        }

        private string GetIndexFileNameEx()
        {
            string indexFileName = this.GetIndexFileName();

            if (ABTestConfigController.Instance.IsUseABTestConfig(this.GetTableFileName()))
            {
                string abFileName = ABTablePrefix + indexFileName;
                if (TableManager.Instance.DataTableAssets.ContainsKey(abFileName))
                    indexFileName = abFileName;
            }

            return indexFileName;
        }

        private string GetProjectName()
        {
            string projectName = GameEntry.DataTable.BranchName;
            if (projectName == "develop")
                return string.Empty;

            return projectName;
        }

        protected virtual string GetIndexFileName()
        {
            return string.Empty;
        }

#endregion Framework Method
    }
}