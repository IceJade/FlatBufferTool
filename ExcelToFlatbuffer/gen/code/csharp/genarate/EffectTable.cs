// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using System.IO;
using FlatBuffers;
using Chanto.Table;
using System.Collections.Generic;

namespace Chanto.Table
{
    #region Table
    
	public sealed class EffectTable : StringIdConfig
    {
        private Table_effect table = default(Table_effect);

        private Dictionary<string, EffectDataRow> data_row = new Dictionary<string, EffectDataRow>(128);
        
        public static string g_TableFileName = "effect";

        #region Data Method

        public override bool GetBoolValue(string id, string column, bool defaultValue = false)
        {
            bool result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetBoolValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short GetShortValue(string id, string column, short defaultValue = 0)
        {
            short result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "Level": { result = datarow.Level; break; }

                default: { Log.Error("Table_effect.GetShortValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetIntValue(string id, string column, int defaultValue = 0)
        {
            int result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "KeepTime": { result = datarow.KeepTime; break; }

                default: { Log.Error("Table_effect.GetIntValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float GetFloatValue(string id, string column, float defaultValue = 0.0f)
        {
            float result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "KeepTime": { result = datarow.KeepTime; break; }

                default: { Log.Error("Table_effect.GetFloatValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string GetStringValue(string id, string column, string defaultValue = "")
        {
            string result = defaultValue;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {
                case "id": { result = datarow.Id; break; }
                case "AssetName": { result = datarow.AssetName; break; }
                case "SoundId": { result = datarow.SoundId; break; }
                case "KeepTime": { result = datarow.KeepTime.ToString(); break; }

                default: { Log.Error("Table_effect.GetStringValue => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override bool[] GetBoolArray(string id, string column)
        {
            bool[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetBoolArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override short[] GetShortArray(string id, string column)
        {
            short[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetShortArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int[] GetIntArray(string id, string column)
        {
            int[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetIntArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override float[] GetFloatArray(string id, string column)
        {
            float[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetFloatArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override string[] GetStringArray(string id, string column)
        {
            string[] result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetStringArray => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override string GetStringArrayItem(string id, string column, int index, string defaultValue = "")
        {
            string result = defaultValue;

            int length = this.GetStringArrayLength(id, column);
            if (index < 0 || index >= length)
            {
                Log.Error("Table_effect.GetStringArrayItem => index out of array length({0}), [id:{1}, column:{2}, index:{3}]", length, id, column, index);
                return result;
            }
            
            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetStringArrayItem => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override int GetStringArrayLength(string id, string column)
        {
            int result = 0;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetStringArrayLength => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }
        
        public override Dictionary<int, int> GetDictionaryII(string id, string column) 
        {
            Dictionary<int, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetDictionaryII => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<int, string> GetDictionaryIS(string id, string column) 
        {
            Dictionary<int, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetDictionaryIS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, int> GetDictionarySI(string id, string column) 
        {
            Dictionary<string, int> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetDictionarySI => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        public override Dictionary<string, string> GetDictionarySS(string id, string column) 
        {
            Dictionary<string, string> result = null;

            var datarow = this.GetDataRow(id);
            if (null == datarow)
                return result;

            switch (column)
            {

                default: { Log.Error("Table_effect.GetDictionarySS => data type is not match, or not find [id:{0}, column:{1}]", id, column); break; }
            }

            return result;
        }

        #endregion Data Method

        #region DataRow Method

        /// <summary>
        /// 获得行数据
        /// </summary>
        /// <param name="id">字段ID的值</param>
        /// <returns>行数据</returns>
        public EffectDataRow GetDataRow(string id)
        {
            if (data_row.ContainsKey(id))
                return data_row[id];

            Table_effect table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            if (data_row.Count >= table.DataLength)
                return null;
            
            int hashcode = id.GetHashCode();
            if (null != row_index && row_index.ContainsKey(hashcode))
            {
                DReffect? data = table.Data(row_index[hashcode]);
                if (data.HasValue && data.Value.Id == id)
                {
                    EffectDataRow datarow = new EffectDataRow(data.Value, row_index[hashcode]);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    return datarow;
                }
            }

            if (current_row_index >= table.DataLength)
                return null;

            int start = current_row_index;
            for (int i = start; i < table.DataLength; i++)
            {
                DReffect? data = table.Data(i);
                if (data.HasValue)
                {
                    EffectDataRow datarow = new EffectDataRow(data.Value, i);
                    if(!data_row.ContainsKey(datarow.Id))
                        data_row.Add(datarow.Id, datarow);

                    current_row_index = i;
                    
                    if (datarow.Id == id)
                        return datarow;
                }
            }

            return null;
        }

        /// <summary>
        /// 获得所有行数据
        /// </summary>
        /// <returns>所有行数据</returns>
        public Dictionary<string, EffectDataRow> GetAllData()
        {
            this.LoadTable();

            Table_effect table = this.GetTable();
            if (null == table.ByteBuffer)
                return null;
                
            int dataCount = table.DataLength;
            if (data_row.Count < dataCount)
            {
                for (int i = 0; i < table.DataLength; i++)
                {
                    DReffect? data = table.Data(i);
                    if (data.HasValue && !data_row.ContainsKey(data.Value.Id))
                    {
                        EffectDataRow datarow = new EffectDataRow(data.Value, i);
                        data_row.Add(data.Value.Id, datarow);
                    }
                }
            }

            return data_row;
        }

        /// <summary>
        /// Lua侧获得所有数据
        /// </summary>
        /// <returns></returns>
        public override CSLuaTable[] GetAllLuaData()
        {
            if (null != _LuaData)
                return _LuaData;

            int index = 0;
            var datas = this.GetAllData();
            foreach (var item in datas)
            {
                if (null != item.Value)
                {
                    _LuaData[index] = item.Value.GetLuaTable();
                    index++;
                }
            }

            return _LuaData;
        }
        
        public override BaseDataRow GetTableRow(string id) 
        { 
            return this.GetDataRow(id); 
        }

        #endregion DataRow Method
                
        #region Framework Method

        protected override void InitTable(ByteBuffer byteBuffer)
        {
            table = Table_effect.GetRootAsTable_effect(byteBuffer);
            
            this.load_state = E_LoadState.Loaded;
        }

        public override void ResetTable()
        {
            base.ResetTable();

            this.data_row.Clear();
        }
        
        private Table_effect GetTable()
        {
            LoadTable();

            return table;
        }

        protected override string GetTableFileName()
        {
            return g_TableFileName;
        }

        protected override string GetDataFileName()
        {
            return "effect.bytes";
        }

        protected override string GetIndexFileName()
        {
            return "effect_ids";
        }
        
        #endregion Framework Method
    }

    #endregion Table

    #region DataRow

    public sealed class EffectDataRow : BaseDataRow
    {
        private DReffect _datarow;

        public EffectDataRow(DReffect datarow, int index) : base(index)
        {
            this._datarow = datarow;
        }

        protected override LuaValue GetLuaValue(string rowId)
        {
            LuaValue luaValue = new LuaValue();
            switch (rowId)
            {
                case "id": { luaValue.SetValue(this.Id); break; }
                case "AssetName": { luaValue.SetValue(this.AssetName); break; }
                case "Level": { luaValue.SetValue(this.Level); break; }
                case "SoundId": { luaValue.SetValue(this.SoundId); break; }
                case "KeepTime": { luaValue.SetValue(this.KeepTime); break; }

                default:
                    break;
            }

            return luaValue;
        }

        private string _Id = null;
        public string Id { get { if (null == _Id) _Id = _datarow.Id; return _Id; } }

        private string _AssetName = null;
        public string AssetName { get { if (null == _AssetName) _AssetName = _datarow.AssetName; return _AssetName; } }

        public short Level { get { return _datarow.Level; } }

        private string _SoundId = null;
        public string SoundId { get { if (null == _SoundId) _SoundId = _datarow.SoundId; return _SoundId; } }

        public int KeepTime { get { return _datarow.KeepTime; } }


    }

    #endregion DataRow
}