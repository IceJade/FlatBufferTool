-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Table

local flatbuffers = require('flatbuffers')

local DRconst = {} -- the module
local DRconst_mt = {} -- the class metatable

function DRconst.New()
    local o = {}
    setmetatable(o, {__index = DRconst_mt})
    return o
end
function DRconst.GetRootAsDRconst(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DRconst.New()
    o:Init(buf, n + offset)
    return o
end
function DRconst_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DRconst_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRconst_mt:Content()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DRconst.Start(builder) builder:StartObject(2) end
function DRconst.AddId(builder, id) builder:PrependUOffsetTRelativeSlot(0, id, 0) end
function DRconst.AddContent(builder, Content) builder:PrependUOffsetTRelativeSlot(1, Content, 0) end
function DRconst.End(builder) return builder:EndObject() end

return DRconst -- return the module